package examine_fla
{
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import flash.geom.Point;
    import flash.text.TextField;
    
    public dynamic class MainTimeline extends MovieClip
    {
        
        
        public var examine_mc:MovieClip;
        
        public var events:Array;
        
        public var layout:String;
        
        public var isDragging:Boolean;
        
        public var hasTooltip:Boolean;
        
        public var curTooltip:Number;
        
        public const keepCustomInScreen:Boolean = true;
        
        public const uiLeft:uint = 10;
        
        public const uiRight:uint = 464;
        
        public const uiTop:uint = 20;
        
        public const uiMinHeight:uint = 200;
        
        public const uiMinWidth:uint = 150;
        
        public var itemIconSize:Number;
        
        public var charIconH:Number;
        
        public var charIconW:Number;
        
        public var userPortraitHeight:Number;
        
        public var userPortraitWidth:Number;
        
        public var initDone:Boolean;
        
        public var addStats_array:Array;
        
        public var status_array:Array;
        
        public var cachedInput:String;
        
        public function MainTimeline()
        {
            super();
            addFrameScript(0,this.frame1);
        }

        public function CreateInterface(id:String)
        {
            var mc:MovieClip = ElementBuilder.CreateElement(id, "Base");

            mc.x = 0;
            mc.y = 0;

            this[id] = mc;

            this.addChild(mc);
        }

        // ---------------
        
        public function onEventUp(param1:Number) : *
        {
            var _loc2_:Boolean = false;
            // PIP - temporarily disabled
            // switch(this.events[param1])
            // {
            //     case "IE UICancel":
            //     ExternalInterface.call("hideUI");
            //     _loc2_ = true;
            // }
            return _loc2_;
        }

        // Always set stage to be fullscreen.
        public function onEventResolution(width:Number, height:Number) : *
        {
            ExternalInterface.call("setMcSize", width, height);
        }
        
        public function onEventDown(param1:Number) : *
        {
            return false;
        }
        
        public function onEventResize() : *
        {
        }
        
        public function onEventInit() : *
        {
            ExternalInterface.call("setPosition","center","screen","center");
            this.examine_mc.init();
        }
        
        public function start() : *
        {
        }
        
        public function setAnchor(param1:Number, param2:* = true) : *
        {
        }
        
        public function clearTooltip() : *
        {
        }
        
        public function setText(param1:Number, param2:String) : *
        {
            switch(param1)
            {
                case 0:
                this.examine_mc.setName(param2);
                break;
                case 4:
                this.examine_mc.closeBtn_mc.setText(param2.toUpperCase());
                break;
                case 3:
                this.examine_mc.title_txt.htmlText = param2.toUpperCase();
            }
        }
        
        public function setPlayerProfile(param1:String, param2:Number) : *
        {
            this.examine_mc.userPortrait_mc.tooltip = param1;
            this.examine_mc.userPortrait_mc.visible = Boolean(param1 != "");
            this.examine_mc.userPortrait_mc.hl_mc.gotoAndStop(param2);
        }
        
        public function showPortrait(param1:Boolean, param2:Boolean = false) : *
        {
            if(param1)
            {
                this.examine_mc.setType(param2);
            }
            this.examine_mc.portrait_mc.visible = param1;
        }
        
        public function addStat(param1:Number, param2:Number, param3:String, param4:String, param5:Number) : *
        {
            this.examine_mc.addStat(param1,param2,param3,param4,param5);
        }
        
        public function addTitle(param1:Number, param2:String, param3:Number) : *
        {
            this.examine_mc.addTitle(param1,param2,param3);
        }
        
        public function update() : *
        {
            var _loc2_:Number = NaN;
            var _loc3_:Number = NaN;
            var _loc4_:Number = NaN;
            var _loc5_:String = null;
            var _loc6_:String = null;
            var _loc1_:uint = 0;
            while(_loc1_ < this.addStats_array.length)
            {
                _loc2_ = this.addStats_array[_loc1_++];
                _loc3_ = this.addStats_array[_loc1_++];
                _loc4_ = this.addStats_array[_loc1_++];
                _loc5_ = this.addStats_array[_loc1_++];
                _loc6_ = this.addStats_array[_loc1_++];
                if(_loc2_ == 5)
                {
                this.addTitle(_loc3_,_loc5_,_loc2_);
                }
                else
                {
                this.addStat(_loc3_,_loc4_,_loc5_,_loc6_,_loc2_);
                }
            }
            this.addStats_array = new Array();
            this.examine_mc.cleanUpUnusedStats();
            this.examine_mc.list.positionElements();
        }
        
        public function updateStatusses(param1:Boolean) : *
        {
            var _loc3_:Number = NaN;
            var _loc4_:Number = NaN;
            var _loc5_:Number = NaN;
            var _loc6_:String = null;
            var _loc7_:Number = NaN;
            var _loc8_:String = null;
            var _loc2_:uint = 0;
            while(_loc2_ < this.status_array.length)
            {
                if(this.status_array[_loc2_] != undefined)
                {
                _loc3_ = Number(this.status_array[_loc2_]);
                _loc4_ = Number(this.status_array[_loc2_ + 1]);
                _loc5_ = Number(this.status_array[_loc2_ + 2]);
                _loc6_ = String(this.status_array[_loc2_ + 3]);
                _loc7_ = Number(this.status_array[_loc2_ + 4]);
                _loc8_ = String(this.status_array[_loc2_ + 5]);
                this.addStatus(param1,_loc3_,_loc4_,_loc5_,_loc6_,_loc7_,_loc8_);
                }
                _loc2_ += 6;
            }
            this.status_array = new Array();
            this.examine_mc.cleanUpUnusedStatusses();
            this.examine_mc.list.positionElements();
        }
        
        public function addStatus(param1:Boolean, param2:Number, param3:Number, param4:Number, param5:String, param6:Number, param7:String = "") : *
        {
            this.examine_mc.addStatus(param1,param2,param3,param4,param5,param6,param7);
        }
        
        public function setStatusTitle(param1:Number, param2:String = "") : *
        {
            this.examine_mc.statusContainer_mc.label_txt.htmlText = param2;
        }
        
        public function clearPanel() : *
        {
            this.examine_mc.clearPanel();
        }
        
        public function selectStat(param1:Number) : *
        {
            this.examine_mc.selectStat(param1);
        }
        
        public function addBtnHint(param1:Number, param2:String, param3:Number) : *
        {
        }
        
        public function clearBtnHints() : *
        {
        }
        
        public function getGlobalPositionOfMC(param1:MovieClip) : Point
        {
            var _loc2_:Point = param1.localToGlobal(new Point(0,0));
            _loc2_.x -= root.x;
            _loc2_.y -= root.y;
            return _loc2_;
        }
        
        public function showTooltipForMC(param1:MovieClip, param2:Number, param3:Boolean = false) : *
        {
            var _loc4_:Point = this.getGlobalPositionOfMC(param1);
            var _loc5_:Number = param1.width;
            this.hasTooltip = true;
            var _loc6_:Number = 0;
            if(param1 && param1.mOffsetY)
            {
                _loc6_ = param1.mOffsetY;
            }
            if(param1 && param1.mWOverride)
            {
                _loc5_ = param1.mWOverride;
            }

            // custom talent tooltip
            if (param3)
            {
                // ExternalInterface.call("pipShowTalentTooltip",param1.type,param2,_loc4_.x,_loc4_.y + _loc6_,_loc5_,param1.height,"right",param1.val_txt.htmlText);
                ExternalInterface.call("pipShowTalentTooltip",param2,_loc4_.x,_loc4_.y + _loc6_,_loc5_,param1.height,"right","",param1.val_txt.htmlText);
            }
            else
            {
                ExternalInterface.call("showTooltip",param1.type,param2,_loc4_.x,_loc4_.y + _loc6_,_loc5_,param1.height,"right");
            }
        }
        
        public function startsWith(param1:String, param2:String) : Boolean
        {
            param1 = param1.toLowerCase();
            param2 = param2.toLowerCase();
            return param2 == param1.substr(0,param2.length);
        }
        
        function frame1() : *
        {
            this.events = new Array("IE UICancel");
            this.layout = "fixed";
            this.isDragging = false;
            this.hasTooltip = false;
            this.curTooltip = -1;
            this.itemIconSize = 80;
            this.charIconH = 100;
            this.charIconW = 80;
            this.userPortraitHeight = 36;
            this.userPortraitWidth = 36;
            this.initDone = false;
            this.addStats_array = new Array();
            this.status_array = new Array();
            this.cachedInput = "";
        }
    }
}
