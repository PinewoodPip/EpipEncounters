package
{
    import LS_Classes.LSPanelHelpers;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import LS_Classes.listDisplay;
    import flash.text.TextField;
    import flash.events.MouseEvent;

    public dynamic class Element extends MovieClip
    {
        public static var nextId:Number = 0;

        public var elements:Array;

        public var id:Number = -1;

        public var stringId:String = "Uninitialized!";

        public var type:String = "Base";

        public var list:listDisplay;

        public var hit_mc:MovieClip;

        public var interfaceId:String;
        
        public function Element()
        {
            super();
            addFrameScript(0,this.frame1);
            this.list = new listDisplay();
            this.addChild(this.list);
            this.elements = new Array();

            if (this.hit_mc)
            {
                this.hit_mc.alpha = 0;
                this.hit_mc.width = 1;
                this.hit_mc.height = 1;

                this.hit_mc.addEventListener(MouseEvent.MOUSE_UP, this.onHitUp);
                this.hit_mc.addEventListener(MouseEvent.MOUSE_DOWN, this.onHitDown);
                this.hit_mc.addEventListener(MouseEvent.MOUSE_OVER, this.onHitOver);
                this.hit_mc.addEventListener(MouseEvent.MOUSE_OUT, this.onHitOut);
            }
        }

        public function AddElement(elementType:String, elementId:String, positionList:Boolean = false) : *
        {
            // trace("ElementBuilder");
            // trace(ElementBuilder);
            // trace("ElementBuilder.CreateElement");
            // trace(ElementBuilder.CreateElement);

            var mc:MovieClip = ElementBuilder.CreateElement(this.interfaceId, elementType, elementId);

            this.elements.push(mc);
            // this.addChild(mc);
            this.list.addElement(mc, positionList);
            this[elementId] = mc;
        }

        private function GetElementIndex(stringId:String) : *
        {
            var index:int = -1;

            for (var i:int = 0; i < this.elements.length && index < 0; i++)
            {
                var mc:Element = this.elements[i];

                if (mc.stringId == stringId)
                {
                    index = i;
                }
            }

            return index;
        }

        public function RemoveElement(stringId:String, positionList:Boolean = false) : *
        {
            var index:Number = this.GetElementIndex(stringId);

            if (index >= 0)
            {
                var mc:Element = this.elements[index];
                this.list.removeElement(mc.list_id, positionList);
                // this.removeChild(mc);
                this.elements.splice(index, 1);
            }
            else
            {
                trace("Tried to remove element that does not exist on this one: id " + stringId);
            }
        }

        public function MakeDraggable() : *
        {
            LSPanelHelpers.makeDraggable(this);
        }

        public function SetScale(scale:Number) : *
        {
            this.scaleX = scale;
            this.scaleY = scale;
        }

        // EVENT LISTENERS
        public function onHitUp(e:MouseEvent) : *
        {
            ExternalInterface.call("elementHitUp", this.interfaceId, this.id, this.stringId);
        }

        public function onHitDown(e:MouseEvent) : *
        {
            ExternalInterface.call("elementHitDown", this.interfaceId, this.id, this.stringId);
        }

        public function onHitOver(e:MouseEvent) : *
        {
            ExternalInterface.call("elementHitOver", this.interfaceId, this.id, this.stringId);
        }

        public function onHitOut(e:MouseEvent) : *
        {
            ExternalInterface.call("elementHitOut", this.interfaceId, this.id, this.stringId);
        }

        // ---------------------------

        private function frame1() : *
        {
            // this.elements = new Array();
        }
    }
}
