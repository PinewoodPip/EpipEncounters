package optionsInput_fla
{
    import LS_Classes.horizontalList;
    import LS_Classes.listDisplay;
    import LS_Classes.scrollList;
    import LS_Classes.textEffect;
    import com.flashdynamix.motion.TweensyTimelineZero;
    import com.flashdynamix.motion.TweensyZero;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import flash.geom.Point;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFormat;
    
    public dynamic class controlsMenu_1 extends MovieClip
    {
        
        
        public var apply_mc:MovieClip;
        
        public var back_mc:MovieClip;
        
        public var contentHolder_mc:MovieClip;
        
        public var default_mc:MovieClip;
        
        public var menuButtonContainer_mc:MovieClip;
        
        public var overlay_mc:MovieClip;
        
        public var save_mc:MovieClip;
        
        public var tabHolder_mc:MovieClip;
        
        public var title_txt:TextField;
        
        public var toptitle_txt:TextField;
        
        public const hlColour:uint = 0;
        
        public const defaultColour:uint = 14077127;
        
        public const menuButtonContainerCenterPos:Point = new Point(176,156);
        
        public var tab_content_array:Array;
        
        public var tab_scroll_array:Array;
        
        public var menuBtnList:listDisplay;
        
        public var tabList:horizontalList;
        
        public var timelineHideOverlay:TweensyTimelineZero;
        
        public var oldContent:Number;
        
        public var currentContent:Number;
        
        public function controlsMenu_1()
        {
            super();
            addFrameScript(0,this.frame1);
        }
        
        public function init() : *
        {
            this.title_txt.filters = textEffect.createStrokeFilter(0,2,0.75,1.4,3);
            this.back_mc.text_txt.filters = textEffect.createStrokeFilter(0,2,0.75,1.4,3);
            this.save_mc.text_txt.filters = textEffect.createStrokeFilter(0,2,0.75,1.4,3);
            this.default_mc.text_txt.filters = textEffect.createStrokeFilter(0,2,0.75,1.4,3);
            this.overlay_mc.accept_mc.text_txt.filters = textEffect.createStrokeFilter(0,2,0.75,1.4,3);
            this.overlay_mc.cancel_mc.text_txt.filters = textEffect.createStrokeFilter(0,2,0.75,1.4,3);
            this.overlay_mc.clear_mc.text_txt.filters = textEffect.createStrokeFilter(0,2,0.75,1.4,3);
            this.apply_mc.pressedFunc = this.applyPressed;
            this.save_mc.pressedFunc = this.acceptPressed;
            this.back_mc.pressedFunc = this.cancelPressed;
            this.default_mc.pressedFunc = this.defaultPressed;
            this.overlay_mc.accept_mc.pressedFunc = this.inputAcceptPressed;
            this.overlay_mc.cancel_mc.pressedFunc = this.inputCancelPressed;
            this.overlay_mc.clear_mc.pressedFunc = this.inputClearPressed;
        }

        private function onMenuBtnPress(obj:Object) : *
        {
            for (var i:int = 0; i < this.menuBtnList.content_array.length; i++)
            {
                this.menuBtnList.content_array[i].setEnabled(i != obj.ID);
                this.menuBtnList.content_array[i].setActive(this.menuBtnList.content_array[i].id == obj.ID);
            }

            ExternalInterface.call(obj.callback, obj.ID);
        }
        
        public function addMenuButton(param1:String, param2:String, param3:Number, param4:Boolean) : *
        {
            var text:String = param1;
            var callBack:String = param2;
            var buttonID:Number = param3;
            var isCurrent:Boolean = param4;
            var btn:MovieClip = new menuButton();
            var obj:Object = new Object();
            obj.callback = callBack;
            obj.ID = buttonID;

            btn.interactiveTextOnClick = true;
            btn.id = buttonID;
            btn.SND_Click = "UI_Gen_BigButton_Click";
            btn.initialize(text.toUpperCase(),this.onMenuBtnPress, obj, isCurrent,-1,isCurrent);
            this.menuBtnList.addElement(btn,true);
            this.menuButtonContainer_mc.x = this.menuButtonContainerCenterPos.x - this.menuBtnList.width * 0.5;
            this.menuButtonContainer_mc.y = this.menuButtonContainerCenterPos.y;
            this.default_mc.snd_Click = "UI_Gen_Default";
            this.back_mc.snd_Click = "UI_Gen_Cancel";
            this.save_mc.snd_Click = "UI_Gen_Accept";
            this.apply_mc.snd_Click = "UI_Gen_Apply";
        }
        
        public function menuButtonOnOver(param1:MovieClip) : *
        {
            param1.text_txt.textColor = this.hlColour;
        }
        
        public function menuButtonOnOut(param1:MovieClip) : *
        {
            if(param1.isActive)
            {
                param1.text_txt.textColor = this.hlColour;
            }
            else
            {
                param1.text_txt.textColor = this.defaultColour;
            }
        }
        
        public function resetMenuButtons() : *
        {
            var _loc2_:uint = 0;
            var _loc3_:MovieClip = null;
            var _loc1_:Number = this.menuBtnList.length;
            if(_loc1_ > 0)
            {
                _loc2_ = 0;
                while(_loc2_ < _loc1_)
                {
                _loc3_ = this.menuBtnList.getAt(_loc2_);
                if(_loc3_.id != 4)
                {
                    _loc3_.setActive(false);
                }
                _loc2_++;
                }
            }
        }
        
        public function inputAcceptPressed() : *
        {
            ExternalInterface.call("inputAcceptPressed");
            ExternalInterface.call("PlaySound","UI_Gen_Accept");
        }
        
        public function inputCancelPressed() : *
        {
            ExternalInterface.call("inputCancelPressed");
            ExternalInterface.call("PlaySound","UI_Gen_Cancel");
        }
        
        public function inputClearPressed() : *
        {
            ExternalInterface.call("inputClearPressed");
            ExternalInterface.call("PlaySound","UI_Gen_Reset");
        }
        
        public function defaultPressed() : *
        {
            ExternalInterface.call("defaultPressed");
            ExternalInterface.call("PlaySound","UI_Gen_Default");
        }
        
        public function applyPressed() : *
        {
            ExternalInterface.call("ApplyKeyChanges");
            ExternalInterface.call("PlaySound","UI_Gen_Apply");
        }
        
        public function acceptPressed() : *
        {
            ExternalInterface.call("SaveKeyChanges");
            ExternalInterface.call("PlaySound","UI_Gen_Accept");
        }
        
        public function cancelPressed() : *
        {
            ExternalInterface.call("PlaySound","UI_Gen_Cancel");
            ExternalInterface.call("cancelPressed");
        }
        
        public function addTab(param1:Number, param2:String) : *
        {
            var _loc7_:TextFormat = null;
            var _loc3_:Number = 50;
            var _loc4_:MovieClip;
            (_loc4_ = new tabButton()).text_txt.htmlText = param2.toUpperCase();
            while(_loc4_.text_txt.width < _loc4_.text_txt.textWidth)
            {
                (_loc7_ = _loc4_.text_txt.getTextFormat()).size = Number(_loc7_.size) - 1;
                _loc4_.text_txt.defaultTextFormat = _loc7_;
                _loc4_.text_txt.setTextFormat(_loc7_);
            }
            _loc4_.text_txt.filters = textEffect.createStrokeFilter(0,1.2,1,1.4,3);
            _loc4_.id = param1;
            _loc4_.active_mc.visible = false;
            _loc4_.tabContent = this.tab_content_array.length;
            this.tabList.addElement(_loc4_,false);
            this.tabHolder_mc.x = 818;
            var _loc5_:MovieClip = new Container();
            this.contentHolder_mc.addChild(_loc5_);
            var _loc6_:scrollList = new scrollList();
            _loc5_.content_mc = _loc6_;
            _loc5_.content_mc.EL_SPACING = 0;
            _loc5_.content_mc.m_customElementHeight = _loc3_;
            _loc5_.content_mc.m_scrollbar_mc.m_SCROLLSPEED = _loc3_ + _loc5_.content_mc.EL_SPACING;
            _loc6_.TOP_SPACING = -4;
            _loc5_.content_mc.x = 10;
            _loc5_.content_mc.y = 0;
            _loc5_.content_mc.setFrame(900,791);
            _loc5_.content_mc.TOP_SPACING = 40;
            _loc5_.content_mc.SB_SPACING = -13;
            _loc5_.content_mc.m_scrollbar_mc.y = 16;
            _loc5_.content_mc.m_scrollbar_mc.setLength(682);
            this.tab_content_array.push(_loc5_);
            _loc5_.addChild(_loc5_.content_mc);
            this.tab_scroll_array.push(_loc6_.m_scrollbar_mc);
            if(this.tab_content_array.length == 1)
            {
                _loc5_.visible = true;
                _loc4_.setActive(true);
                this.oldContent = 0;
                _loc5_.content_mc.m_scrollbar_mc.mouseWheelEnabled = true;
            }
            else
            {
                _loc5_.visible = false;
            }
        }
        
        public function removeContent() : *
        {
            this.tabList.clearElements();
            this.tab_content_array = new Array();
            this.tab_scroll_array = new Array();
            this.removeChildrenOf(this.contentHolder_mc);
        }
        
        public function removeChildrenOf(param1:MovieClip) : void
        {
            var _loc2_:int = 0;
            if(param1.numChildren != 0)
            {
                _loc2_ = param1.numChildren;
                while(_loc2_ > 0)
                {
                _loc2_--;
                param1.removeChildAt(_loc2_);
                }
            }
        }
        
        public function addLine(param1:Number) : *
        {
            var _loc3_:MovieClip = null;
            var _loc2_:MovieClip = this.tab_content_array[param1];
            if(_loc2_)
            {
                _loc3_ = new Line();
                _loc2_.content_mc.addElement(_loc3_);
                _loc2_.content_mc.m_scrollbar_mc.scrollbarVisible();
            }
        }
        
        public function addTitle(param1:Number, param2:String) : *
        {
            var _loc4_:Number = NaN;
            var _loc5_:MovieClip = null;
            var _loc3_:MovieClip = this.tab_content_array[param1];
            if(_loc3_)
            {
                _loc4_ = 24;
                (_loc5_ = new GroupHeader()).x = _loc4_;
                _loc5_.text_txt.autoSize = TextFieldAutoSize.CENTER;
                _loc5_.text_txt.htmlText = param2;
                _loc5_.text_txt.filters = textEffect.createStrokeFilter(0,1.2,1,1.4,3);
                _loc5_.text_txt.y = _loc4_ - Math.round(_loc5_.text_txt.textHeight * 0.5);
                if(_loc3_.content_mc.length % 2 == 1)
                {
                _loc5_.formHL_mc.visible = false;
                }
                _loc3_.content_mc.addElement(_loc5_);
            }
        }
        
        public function addEntry(param1:Number, param2:Number, param3:String, param4:String, param5:String) : *
        {
            var _loc7_:Number = NaN;
            var _loc8_:MovieClip = null;
            var _loc6_:MovieClip;
            if(_loc6_ = this.tab_content_array[param1])
            {
                _loc7_ = 24;
                (_loc8_ = new Input()).text_txt.filters = textEffect.createStrokeFilter(0,1.2,1,1.4,3);
                _loc8_.input1_mc.input_txt.filters = textEffect.createStrokeFilter(0,1.2,1,1.4,3);
                _loc8_.input2_mc.input_txt.filters = textEffect.createStrokeFilter(0,1.2,1,1.4,3);
                _loc8_.x = _loc7_;
                _loc8_.id = param2;
                _loc8_.descr = param3;
                _loc8_.text_txt.autoSize = TextFieldAutoSize.LEFT;
                _loc8_.text_txt.htmlText = param3;
                _loc8_.input1_mc.input_txt.htmlText = param4;
                _loc8_.input2_mc.input_txt.htmlText = param5;
                _loc8_.text_txt.y = _loc7_ - Math.round(_loc8_.text_txt.textHeight * 0.5);
                if(_loc6_.content_mc.length % 2 == 1)
                {
                _loc8_.formHL_mc.visible = false;
                }
                _loc6_.content_mc.addElement(_loc8_,false);
            }
        }
        
        public function hideScrollbars() : *
        {
            var _loc1_:* = 0;
            while(_loc1_ < this.tab_scroll_array.length)
            {
                this.tab_scroll_array[_loc1_].visible = false;
                _loc1_++;
            }
        }
        
        public function selectContent(param1:Number) : *
        {
            this.hideScrollbars();
            if(this.oldContent != -1)
            {
                this.tab_content_array[this.oldContent].visible = false;
                this.tab_content_array[this.oldContent].content_mc.m_scrollbar_mc.mouseWheelEnabled = false;
            }
            var _loc2_:MovieClip = this.tabList.getElementByNumber("id",param1);
            if(_loc2_)
            {
                this.oldContent = _loc2_.tabContent;
                ExternalInterface.call("selectedTab",_loc2_.id);
                this.tab_content_array[_loc2_.tabContent].visible = true;
                this.tab_content_array[_loc2_.tabContent].content_mc.select(0);
                this.tab_content_array[_loc2_.tabContent].content_mc.m_scrollbar_mc.mouseWheelEnabled = true;
                this.tab_content_array[_loc2_.tabContent].content_mc.m_scrollbar_mc.scrollbarVisible();
            }
        }
        
        public function initDone() : *
        {
            this.tabList.positionElements();
            var _loc1_:* = 0;
            while(_loc1_ < this.tab_content_array.length)
            {
                this.tab_content_array[_loc1_].content_mc.positionElements();
                _loc1_++;
            }
            this.tabHolder_mc.x = 960 - Math.round(this.tabHolder_mc.width * 0.5);
            this.selectContent(0);
        }
        
        public function selectFromCurrentContent(param1:Number) : *
        {
            var _loc2_:MovieClip = this.tabList.getCurrentMovieClip();
            if(_loc2_)
            {
                this.tab_content_array[_loc2_.tabContent].content_mc.select(param1);
            }
        }
        
        public function selectTab(param1:Number) : *
        {
            this.tabList.select(param1);
        }
        
        public function currentTab() : MovieClip
        {
            var _loc1_:MovieClip = this.tabList.getCurrentMovieClip();
            if(_loc1_)
            {
                return this.tab_content_array[_loc1_.tabContent];
            }
            return null;
        }
        
        public function selectNext() : *
        {
            var _loc1_:MovieClip = this.currentTab();
            if(_loc1_)
            {
                _loc1_.content_mc.next();
            }
        }
        
        public function selectPrevious() : *
        {
            var _loc1_:MovieClip = this.currentTab();
            if(_loc1_)
            {
                _loc1_.content_mc.previous();
            }
        }
        
        public function changeButton(param1:Number, param2:Number) : *
        {
            var _loc4_:MovieClip = null;
            var _loc3_:MovieClip = this.currentTab();
            // trace(param1)
            // trace(this.tabList.content_array[0]);
            // _loc3_ = this.tabList.content_array[param1];
            // trace(_loc3_);
            // trace(this.contentHolder_mc.content_array[param1]);
            var _loc5_:MovieClip = null;
            var _loc6_:MovieClip = null;
            var _loc7_:int = 0;

            for (; _loc7_ < this.tab_content_array.length; _loc7_++)
            {
                _loc6_ = this.tab_content_array[_loc7_];
                if (_loc6_.content_mc.getElementByNumber("id", param1) != null)
                {
                    _loc5_ = _loc6_.content_mc.getElementByNumber("id", param1);
                    // break;
                }
            }

            if (_loc5_)
            {
                _loc6_.content_mc.selectMC(_loc5_);
                this.overlay_mc.command_txt.htmlText = _loc5_.descr;
                ExternalInterface.call("changingKey",param1,param2);
                this.showOverlay();
            }
        }
        
        public function changeCurrentButton() : *
        {
            var _loc2_:MovieClip = null;
            var _loc1_:MovieClip = this.currentTab();
            if(_loc1_)
            {
                _loc2_ = _loc1_.content_mc.getCurrentMovieClip();
                if(_loc2_)
                {
                this.overlay_mc.command_txt.htmlText = _loc2_.descr;
                ExternalInterface.call("changingKey",_loc2_.id);
                this.showOverlay();
                }
            }
        }
        
        public function setCurrentInput(param1:Number, param2:String) : *
        {
            var _loc4_:MovieClip = null;
            var _loc3_:MovieClip = this.currentTab();
            if(_loc3_)
            {
                if(_loc4_ = _loc3_.content_mc.getCurrentMovieClip())
                {
                if(param1 == 0)
                {
                    _loc4_.input1_mc.input_txt.htmlText = param2;
                }
                else if(param1 == 1)
                {
                    _loc4_.input2_mc.input_txt.htmlText = param2;
                }
                this.hideOverlay();
                }
            }
        }
        
        public function setInput(param1:Number, param2:Number, param3:String) : *
        {
            var _loc5_:MovieClip = null;
            var _loc4_:MovieClip;
            var _loc6_:int = 0;

            for (; _loc6_ < this.tab_content_array.length; _loc6_++)
            {
                _loc4_ = this.tab_content_array[_loc6_];
                if (_loc4_.content_mc.getElementByNumber("id", param1) != null)
                {
                    _loc5_ = _loc4_.content_mc.getElementByNumber("id", param1);
                    // break;
                }
            }

            trace(_loc5_);

            if (_loc5_)
            {
                if (param2 == 0)
                {
                    _loc5_.input1_mc.input_txt.htmlText = param3;
                }
                else if (param2 == 1)
                {
                    _loc5_.input2_mc.input_txt.htmlText = param3;
                }

                this.hideOverlay();
            }
        }
        
        public function changeOverlayText(param1:String) : *
        {
            this.overlay_mc.text_txt.htmlText = param1;
        }
        
        public function showOverlay() : *
        {
            this.overlay_mc.visible = true;
            TweensyZero.to(this.overlay_mc,{"alpha":1},0.8);
        }
        
        public function hidingOverlay() : *
        {
            this.overlay_mc.visible = false;
        }
        
        public function hideOverlay() : *
        {
            this.timelineHideOverlay = TweensyZero.to(this.overlay_mc,{"alpha":0},0.8);
            this.timelineHideOverlay.onComplete = this.hidingOverlay;
        }
        
        function frame1() : *
        {
            this.tab_content_array = new Array();
            this.tab_scroll_array = new Array();
            this.menuBtnList = new listDisplay();
            this.menuBtnList.EL_SPACING = 2;
            this.menuButtonContainer_mc.addChild(this.menuBtnList);
            this.tabList = new horizontalList();
            this.tabHolder_mc.addChild(this.tabList);
            addChild(this.overlay_mc);
            this.overlay_mc.visible = false;
            this.oldContent = -1;
            this.currentContent = -1;
            this.overlay_mc.visible = false;
        }
    }
}
