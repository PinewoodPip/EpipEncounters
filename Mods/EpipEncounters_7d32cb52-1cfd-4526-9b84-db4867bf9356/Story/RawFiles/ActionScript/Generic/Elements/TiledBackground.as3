package Elements
{
    import LS_Classes.LSPanelHelpers;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import LS_Classes.listDisplay;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.events.Event;

    public dynamic class TiledBackground extends Element
    {
        public var background_mc:MovieClip = null;

        public var _bg_Red:MovieClip;
        public var _bg_Box:MovieClip;
        public var _bg_FormattedTooltip:MovieClip;
        public var _bg_Note:MovieClip;

        private var _delay:int = 0;

        private var currentWidth:Number = 0;
        private var currentHeight:Number = 0;
        private var _currentType:String = "";
        private var _currentAlpha:Number = 1;

        public var visualTypes:Object = null; // maps String -> Object{MovieClip:MovieClip, Width1:Number, Width2:Number, Width3:Number, Height1:Number, Height2:Number, Height3:Number}

        public function TiledBackground()
        {
            super();

            this.visualTypes = new Object();

            this.RegisterType("RedPrompt", this._bg_Red, 80, 310, 80, 89, 290, 90); // Box
            this.RegisterType("Black", this._bg_Box, 1, 1, 1, 1, 1, 1); // Black
            this.RegisterType("FormattedTooltip", this._bg_FormattedTooltip, 15, 382, 15, 80, 4, 60); // FormattedTooltip
            this.RegisterType("Note", this._bg_Note, 126, 600, 126, 121, 793, 175); // Note

            this.SetBackground("Black", 80 + 310 + 80, 89 + 290 + 90);
        }

        public override function get elementType() : String
        {
            return "TiledBackground";
        }

        public override function SetSize(width:Number, height:Number) : *
        {
            this.SetBackground(this._currentType, width, height);
        }

        public override function SetAlpha(alpha:Number, affectChildren:Boolean = false) : *
        {
            if (!affectChildren)
            {
                this.background_mc.alpha = alpha;
                this._currentAlpha = alpha;
            }
            else
            {
                this.alpha = alpha;
            }
        }

        public function SetBackground(backgroundType:String, backgroundWidth:Number, backgroundHeight:Number) : *
        {
            var data:Object = this.visualTypes[backgroundType];
            var minWidth:Number = data.Width1 + data.Width2 + data.Width3;
            var minHeight:Number = data.Height1 + data.Height2 + data.Height3;

            if (this.background_mc)
            {
                this.removeChild(this.background_mc);
            }
            this.background_mc = data.MovieClip;
            this.addChild(data.MovieClip);
            this.setChildIndex(data.MovieClip, 0);

            this.background_mc.visible = true;
            this.background_mc.scaleX = 1;
            this.background_mc.scaleY = 1;

            if (backgroundWidth < minWidth)
            {
                backgroundWidth = minWidth;
                this.Log("SetBackground: Width below minimum");
            }
            if (backgroundHeight < minHeight)
            {
                backgroundHeight = minHeight;
                this.Log("SetBackground: Height below minimum");
            }

            this.currentWidth = backgroundWidth;
            this.currentHeight = backgroundHeight;

            var topWidth:Number = backgroundWidth - data.Width1 - data.Width3;
            this.background_mc.top_shp.width = topWidth;
            this.background_mc.bottom_shp.width = topWidth + 1;

            var sideHeight:Number = backgroundHeight - data.Height1 - data.Height3;

            this.background_mc.left_shp.height = sideHeight;
            this.background_mc.right_shp.height = sideHeight;

            this.background_mc.center_shp.width = topWidth;
            this.background_mc.center_shp.height = sideHeight;

            this.background_mc.top_shp.x = data.Width1;
            this.background_mc.top_right_shp.x = backgroundWidth - data.Width3;

            // Row 2

            this.background_mc.left_shp.y = data.Height1;

            this.background_mc.center_shp.x = data.Width1;
            this.background_mc.center_shp.y = data.Height1;

            this.background_mc.right_shp.x = backgroundWidth - data.Width3;
            this.background_mc.right_shp.y = data.Height1;

            // Row 3

            this.background_mc.bottom_left_shp.y = backgroundHeight - data.Height3 - 0.5;

            this.background_mc.bottom_shp.x = data.Width1;
            this.background_mc.bottom_shp.y = backgroundHeight - data.Height3 - 0.5;

            this.background_mc.bottom_right_shp.x = backgroundWidth - data.Width3 + 1; // TODO
            this.background_mc.bottom_right_shp.y = backgroundHeight - data.Height3 - 0.5;

            this._currentType = backgroundType;

            this.SetAlpha(this._currentAlpha);
        }

        private function RegisterType(stringID:String, mc:MovieClip, width1:Number, width2:Number, width3:Number, height1:Number, height2:Number, height3:Number) : *
        {
            var obj:Object = new Object();

            obj.MovieClip = mc;
            obj.Width1 = width1;
            obj.Width2 = width2;
            obj.Width3 = width3;
            obj.Height1 = height1;
            obj.Height2 = height2;
            obj.Height3 = height3;

            this.visualTypes[stringID] = obj;

            this.removeChild(mc);
        }
    }
}
