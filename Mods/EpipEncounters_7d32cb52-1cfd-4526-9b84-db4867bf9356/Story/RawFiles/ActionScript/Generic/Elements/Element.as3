package Elements
{
    import com.flashdynamix.motion.TweensyTimelineZero;
    import com.flashdynamix.motion.TweensyZero;
    import fl.motion.easing.Linear;
    import fl.motion.easing.Quadratic;
    import fl.motion.easing.Cubic;
    import fl.motion.easing.Quartic;
    import fl.motion.easing.Sine;
    import fl.motion.easing.Elastic;
    import LS_Classes.LSPanelHelpers;
    import LS_Classes.tooltipHelper;
    import flash.display.MovieClip;
    import flash.display.Bitmap;
    import flash.display.BitmapData;
    import flash.display.DisplayObject;
    import flash.external.ExternalInterface;
    import LS_Classes.listDisplay;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.events.Event;
    import flash.utils.Dictionary;
    import flash.geom.Rectangle;
    import flash.geom.Point;

    public dynamic class Element extends MovieClip
    {
        public var stringID:String = "Uninitialized!";
        public var childElements:Dictionary;
        public var parentElement:MovieClip = null;

        protected var _ignoreUp = false;

        public var CENTER_IN_LIST:Boolean = false;

        public var customBitmap:Bitmap;

        public var _nextTweenFromProperties:Object = null;
        public var _nextTweenToProperties:Object;
        
        public function Element()
        {
            super();

            this.childElements = new Dictionary();

            this.addEventListener(MouseEvent.MOUSE_DOWN, this.onElementMouseDown);
            this.addEventListener(MouseEvent.MOUSE_UP, this.onElementMouseUp);
            this.addEventListener(MouseEvent.ROLL_OVER, this.onElementMouseOver);
            this.addEventListener(MouseEvent.ROLL_OUT, this.onElementMouseOut);
            this.addEventListener(MouseEvent.RIGHT_CLICK, this.onElementRightClick);

            this._nextTweenToProperties = {};
        }

        public function AddChildElement(mc:MovieClip) : *
        {
            this.childElements[mc.stringID] = mc;
            this[mc.stringID] = mc;
            this.addChild(mc);
        }

        public function SetChildIndex(childID:String, index:Number) : *
        {
            var childElement:MovieClip = this.childElements[childID];
            for each(var value:Object in this.childElements)
            {
                if (value == childID)
                {
                    childElement = this.childElement[value];
                }
            }

            if (childElement == null)
            {
                this.Log(childID + " is not a child of " + this.stringID, 2);
            }
            else
            {
                this.setChildIndex(childElement, index);
            }
        }

        public function RemoveChildElement(mc:MovieClip) : *
        {
            delete this.childElements[mc.stringID];
            try // TODO investigate what the issue is with lists
            {
                this.removeChild(mc);
            }
            catch (error:Error)
            {
                
            }
        }

        public function HasParent() : Boolean
        {
            return this.parentElement != null;
        }

        public function get elementType() : String
        {
            this.Log("Attempted to get elementType of base Element class!", 2);
            return "Element";
        }

        // UTILITY

        public function SetAsUIDraggableArea() : *
        {
            LSPanelHelpers.makeDraggable(this);
        }

        public function SetSizeOverride(width:Number, height:Number) : *
        {
            this.widthOverride = width;
            this.heightOverride = height;
        }

        public function ShowTooltip(align:String = "right") : void
        {
            var referenceObject:MovieClip = this.root as MovieClip;
            var width:Number = this.width;
            var height:Number = this.height;
            var xOffset:Number = 0;
            var yOffset:Number = 0;
            var context:Number = -1;

            if(this.tooltipOverrideW)
            {
                _loc4_ = this.tooltipOverrideW;
            }
            if(this.tooltipOverrideH)
            {
                height = this.tooltipOverrideH;
            }
            if(this.tooltipXOffset)
            {
                xOffset = this.tooltipXOffset;
            }
            if(this.tooltipYOffset)
            {
                yOffset = this.tooltipYOffset;
            }
            if(this.contextParam)
            {
                context = this.contextParam;
            }

            var point:Point = tooltipHelper.getGlobalPositionOfMC(this, referenceObject);

            referenceObject.hasTooltip = true;
            referenceObject.curTooltip = "asdasd";

            ExternalInterface.call("ShowElementTooltip", this.stringID, point.x + xOffset, point.y + yOffset, width, height, context, align);
        }

        public function SetCenterInLists(center:Boolean) : *
        {
            this.CENTER_IN_LIST = center;
        }

        public function Move(x:Number, y:Number) : *
        {
            this.SetPosition(this.GetPositionX() + x, this.GetPositionY() + y);
        }

        public function GetPositionX() : Number
        {
            return this.x;
        }

        public function GetPositionY() : Number
        {
            return this.y;
        }

        public function GetRawWidth() : Number
        {
            this.Log("GetRawWidth() not implemented for this element", 2);

            return this.width;
        }

        public function GetRawHeight() : Number
        {
            this.Log("GetRawHeight() not implemented for this element", 2);
            
            return this.height;
        }

        public function SetPositionRelativeToParent(position:String, horizontalOffset:Number=0, verticalOffset:Number=0) : *
        {
            var parent:MovieClip = this.parent;

            // Reset the element's position to 0, 0 and temporarily set scale to 0
            // so it doesn't affect parent calculated width / height.
            var oldScaleX:Number = this.scaleX;
            var oldScaleY:Number = this.scaleY;
            var elementWidth:Number = this.width;
            var elementHeight:Number = this.height;

            // TODO support width/height override?
            
            this.x = 0;
            this.y = 0;
            this.scaleX = 0;
            this.scaleY = 0;

            if (parent)
            {
                var parentWidth:Number = parent.width;
                var parentHeight:Number = parent.height;
                var success:Boolean = true;

                switch (position)
                {
                    case "Center":
                    {
                        this.SetPosition(parentWidth/2 - elementWidth/2, parentHeight/2 - elementHeight/2);
                        break;
                    }
                    case "TopLeft":
                    {
                        this.SetPosition(0, 0);
                        break;
                    }
                    case "TopRight":
                    {
                        this.SetPosition(parentWidth - elementWidth, 0);
                        break;
                    }
                    case "Left":
                    {
                        this.SetPosition(0, parentHeight/2 - elementHeight/2);
                        break;
                    }
                    case "Right":
                    {
                        this.SetPosition(parentWidth - elementWidth, parentHeight/2 - elementHeight/2);
                        break;
                    }
                    case "BottomLeft":
                    {
                        this.SetPosition(0, parentHeight - elementWidth);
                        break;
                    }
                    case "BottomRight":
                    {
                        this.SetPosition(parentWidth - elementWidth, parentHeight - elementHeight);
                        break;
                    }
                    case "Top":
                    {
                        this.SetPosition(parentWidth/2 - elementWidth/2, 0);
                        break;
                    }
                    case "Bottom":
                    {
                        this.SetPosition(parentWidth/2 - elementWidth/2, parentHeight - elementHeight);
                        break;
                    }
                    default:
                    {
                        this.Log("SetPositionRelativeToParent(): unsupported position " + position);
                        success = false;
                    }
                }

                if (success && (horizontalOffset != 0 || verticalOffset != 0))
                {
                    this.Move(horizontalOffset, verticalOffset);
                }
            }
            else
            {
                this.Log("SetPositionRelativeToParent(): element has no parent.", 2);
            }

            this.scaleX = oldScaleX;
            this.scaleY = oldScaleY;
        }

        public function SetRotation(degrees:Number) : *
        {
            this.rotation = degrees;
        }

        public function SetAlpha(alpha:Number, affectChildren:Boolean = false) : *
        {
            if (!affectChildren)
            {
                this.Log("SetAlpha: affectChildren no implemented for this element", 2);
            }
            else
            {
                this.alpha = alpha;
            }
        }

        public function SetVisible(visible:Boolean) : *
        {
            this.visible = visible;
        }

        public function SetMouseEnabled(enabled:Boolean) : *
        {
            this.mouseEnabled = enabled;
            this.SetMouseChildren(enabled);

            this.Log("Element type does not properly support SetMouseEnabled; setting mouseChildren as well.");
        }

        protected function Log(msg:String, msgType:int = 1) : *
        {
            ExternalInterface.call("GenericLog", this.stringID, this.elementType, msg, msgType);
        }

        public function SetMouseChildren(enabled:Boolean) : *
        {
            this.mouseChildren = enabled;
        }

        public function SetScale(scale:Number) : *
        {
            this.scaleX = scale;
            this.scaleY = scale;
        }

        public function SetSize(width:Number, height:Number) : *
        {
            this.Log("Element.SetSize not implemented for this element", 2);
        }

        public function SetPosition(x:Number, y:Number) : *
        {
            this.x = x;
            this.y = y;
        }

        // EVENT LISTENERS

        public function onElementMouseUp(e:MouseEvent) : *
        {
            // trace("Click: " + this.stringID);
            if (this._ignoreUp)
            {
                this._ignoreUp = false;
            }
            else
            {
                ExternalInterface.call("elementMouseUp", this.stringID);
            }
        }

        public function onElementMouseDown(e:MouseEvent) : *
        {
            ExternalInterface.call("elementMouseDown", this.stringID);
            this._ignoreUp = true;
        }

        public function onElementMouseOver(e:MouseEvent) : *
        {
            ExternalInterface.call("elementMouseOver", this.stringID);
        }

        public function onElementMouseOut(e:MouseEvent) : *
        {
            ExternalInterface.call("elementMouseOut", this.stringID);
        }

        public function onElementRightClick(e:MouseEvent) : *
        {
            ExternalInterface.call("elementRightClick", this.stringID);
        }

        public function SetScrollRect(x:Number, y:Number, width:Number, height:Number) : *
        {
            this.scrollRect = new Rectangle(x, y, width, height);
        }

        public function RemoveScrollRect() : *
        {
            this.scrollRect = null;
        }

        // Registers a property to be tween on the next startTween() call.
        public function addTweenProperty(property:String, phase:String, toValue:Object) : *
        {
            if (phase == "From")
            {
                if (this._nextTweenFromProperties == null)
                {
                    this._nextTweenFromProperties = {};
                }
                this._nextTweenFromProperties[property] = toValue;
            }
            else
            {
                this._nextTweenToProperties[property] = toValue;
            }
        }

        // Start a tween. Properties to tween must first be set via addTweenProperty()
        public function startTween(eventID:String, duration:Number, functionType:String, delay:Number=0) : *
        {
            var func:Function = null;
            switch (functionType)
            {
                case "Linear_EaseNone":
                    func = Linear.easeNone;
                    break;
                case "Linear_EaseIn":
                    func = Linear.easeIn;
                    break
                case "Linear_EaseOut":
                    func = Linear.easeOut;
                    break
                case "Linear_EaseInOut":
                    func = Linear.easeInOut;
                    break;
                    
                case "Quadratic_EaseIn":
                    func = Quadratic.easeIn;
                    break
                case "Quadratic_EaseOut":
                    func = Quadratic.easeOut;
                    break
                case "Quadratic_EaseInOut":
                    func = Quadratic.easeInOut;
                    break;

                case "Cubic_EaseIn":
                    func = Cubic.easeIn;
                    break
                case "Cubic_EaseOut":
                    func = Cubic.easeOut;
                    break
                case "Cubic_EaseInOut":
                    func = Cubic.easeInOut;
                    break;

                case "Quartic_EaseIn":
                    func = Quartic.easeIn;
                    break
                case "Quartic_EaseOut":
                    func = Quartic.easeOut;
                    break
                case "Quartic_EaseInOut":
                    func = Quartic.easeInOut;
                    break;

                case "Sine_EaseIn":
                    func = Sine.easeIn;
                    break
                case "Sine_EaseOut":
                    func = Sine.easeOut;
                    break
                case "Sine_EaseInOut":
                    func = Sine.easeInOut;
                    break;

                case "Elastic_EaseIn":
                    func = Elastic.easeIn;
                    break
                case "Elastic_EaseOut":
                    func = Elastic.easeOut;
                    break
                case "Elastic_EaseInOut":
                    func = Elastic.easeInOut;
                    break;

                default:
                    this.Log("Invalid tweening function and/or easing combo " + functionType, 2);
            }

            var tween:TweensyTimelineZero = null;
            if (this._nextTweenFromProperties != null)
            {
                tween = TweensyZero.fromTo(this, this._nextTweenFromProperties, this._nextTweenToProperties, duration, func, delay);
            }
            else
            {
                tween = TweensyZero.to(this, this._nextTweenToProperties, duration, func, delay);
            }

            var parameters:Array = new Array();
            parameters.push(this.stringID, eventID);

            tween.onComplete = this._onTweenCompleted;
            tween.onCompleteParams = parameters;

            this._nextTweenFromProperties = null;
            this._nextTweenToProperties = {};
        }

        // Forward tween completion events.
        public function _onTweenCompleted(elementID:String, eventID:String) : *
        {
            ExternalInterface.call("elementTweenCompleted", elementID, eventID);
        }
    }
}
