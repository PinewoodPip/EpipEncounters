package Elements
{
    import LS_Classes.LSPanelHelpers;
    import LS_Classes.tooltipHelper;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import LS_Classes.listDisplay;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.events.Event;
    import flash.geom.Point;

    public dynamic class Element extends MovieClip
    {
        public var stringID:String = "Uninitialized!";
        public var childElements:Array;

        protected var _ignoreUp = false;

        public var CENTER_IN_LIST:Boolean = false;
        
        public function Element()
        {
            super();

            this.childElements = new Array();

            this.addEventListener(MouseEvent.MOUSE_DOWN, this.onElementMouseDown);
            this.addEventListener(MouseEvent.MOUSE_UP, this.onElementMouseUp);
            this.addEventListener(MouseEvent.ROLL_OVER, this.onElementMouseOver);
            this.addEventListener(MouseEvent.ROLL_OUT, this.onElementMouseOut);
            this.addEventListener(MouseEvent.RIGHT_CLICK, this.onElementRightClick);
        }

        public function AddChildElement(mc:MovieClip) : *
        {
            this.childElements[mc.stringID] = mc;
            this[mc.stringID] = mc;
            this.addChild(mc);
        }

        public function get elementType() : String
        {
            this.Log("Attempted to get elementType of base Element class!", 2);
            return "Element";
        }

        // UTILITY

        public function SetAsUIDraggableArea() : *
        {
            LSPanelHelpers.makeDraggable(this);
        }

        public function SetSizeOverride(width:Number, height:Number) : *
        {
            this.widthOverride = width;
            this.heightOverride = height;
        }

        public function ShowTooltip(align:String = "right") : void
        {
            var referenceObject:MovieClip = this.root as MovieClip;
            var width:Number = this.width;
            var height:Number = this.height;
            var xOffset:Number = 0;
            var yOffset:Number = 0;
            var context:Number = -1;

            if(this.tooltipOverrideW)
            {
                _loc4_ = this.tooltipOverrideW;
            }
            if(this.tooltipOverrideH)
            {
                height = this.tooltipOverrideH;
            }
            if(this.tooltipXOffset)
            {
                xOffset = this.tooltipXOffset;
            }
            if(this.tooltipYOffset)
            {
                yOffset = this.tooltipYOffset;
            }
            if(this.contextParam)
            {
                context = this.contextParam;
            }

            var point:Point = tooltipHelper.getGlobalPositionOfMC(this, referenceObject);

            referenceObject.hasTooltip = true;
            referenceObject.curTooltip = "asdasd";

            ExternalInterface.call("ShowElementTooltip", this.stringID, point.x + xOffset, point.y + yOffset, width, height, context, align);
        }

        public function SetCenterInLists(center:Boolean) : *
        {
            this.CENTER_IN_LIST = center;
        }

        public function Move(x:Number, y:Number) : *
        {
            this.SetPosition(this.GetPositionX() + x, this.GetPositionY() + y);
        }

        public function GetPositionX() : Number
        {
            return this.x;
        }

        public function GetPositionY() : Number
        {
            return this.y;
        }

        public function SetPositionRelativeToParent(position:String, horizontalOffset:Number=0, verticalOffset:Number=0) : *
        {
            var parent:MovieClip = this.parent;

            if (parent)
            {
                var parentWidth:Number = parent.width;
                var parentHeight:Number = parent.height;
                var success:Boolean = true;

                switch (position)
                {
                    case "Center":
                    {
                        this.SetPosition(parentWidth/2 - this.width/2, parentHeight/2 - this.height/2);
                        break;
                    }
                    case "TopLeft":
                    {
                        this.SetPosition(0, 0);
                        break;
                    }
                    case "TopRight":
                    {
                        this.SetPosition(parentWidth - this.width, 0);
                        break;
                    }
                    case "Left":
                    {
                        this.SetPosition(0, parentHeight/2 - this.height/2);
                        break;
                    }
                    case "Right":
                    {
                        this.SetPosition(parentWidth - this.width, parentHeight/2 - this.height/2);
                        break;
                    }
                    case "BottomLeft":
                    {
                        this.SetPosition(0, parentHeight - this.height);
                        break;
                    }
                    case "BottomRight":
                    {
                        this.SetPosition(parentWidth - this.width, parentHeight - this.height);
                        break;
                    }
                    case "Top":
                    {
                        this.SetPosition(parentWidth/2 - this.width/2, 0);
                        break;
                    }
                    case "Bottom":
                    {
                        this.SetPosition(parentWidth/2 - this.width/2, parentHeight - this.height);
                        break;
                    }
                    default:
                    {
                        this.Log("SetPositionRelativeToParent(): unsupported position " + position);
                        success = false;
                    }
                }

                if (success && (horizontalOffset != 0 || verticalOffset != 0))
                {
                    this.Move(horizontalOffset, verticalOffset);
                }
            }
            else
            {
                this.Log("SetPositionRelativeToParent(): element has no parent.", 2);
            }
        }

        public function SetRotation(degrees:Number) : *
        {
            this.rotation = degrees;
        }

        public function SetAlpha(alpha:Number, affectChildren:Boolean = false) : *
        {
            if (!affectChildren)
            {
                this.Log("SetAlpha: affectChildren no implemented for this element", 2);
            }
            else
            {
                this.alpha = alpha;
            }
        }

        public function SetMouseEnabled(enabled:Boolean) : *
        {
            this.mouseEnabled = enabled;
            this.SetMouseChildren(enabled);

            this.Log("Element type does not properly support SetMouseEnabled; setting mouseChildren instead.");
        }

        protected function Log(msg:String, msgType:int = 1) : *
        {
            ExternalInterface.call("GenericLog", this.stringID, this.elementType, msg, msgType);
        }

        public function SetMouseChildren(enabled:Boolean) : *
        {
            this.mouseChildren = enabled;
        }

        public function SetScale(scale:Number) : *
        {
            this.scaleX = scale;
            this.scaleY = scale;
        }

        public function SetSize(width:Number, height:Number) : *
        {
            this.Log("Element.SetSize not implemented for this element", 2);
        }

        public function SetPosition(x:Number, y:Number) : *
        {
            this.x = x;
            this.y = y;
        }

        // EVENT LISTENERS

        public function onElementMouseUp(e:MouseEvent) : *
        {
            // trace("Click: " + this.stringID);
            if (this._ignoreUp)
            {
                this._ignoreUp = false;
            }
            else
            {
                ExternalInterface.call("elementMouseUp", this.stringID);
            }
        }

        public function onElementMouseDown(e:MouseEvent) : *
        {
            ExternalInterface.call("elementMouseDown", this.stringID);
            this._ignoreUp = true;
        }

        public function onElementMouseOver(e:MouseEvent) : *
        {
            ExternalInterface.call("elementMouseOver", this.stringID);
        }

        public function onElementMouseOut(e:MouseEvent) : *
        {
            ExternalInterface.call("elementMouseOut", this.stringID);
        }

        public function onElementRightClick(e:MouseEvent) : *
        {
            ExternalInterface.call("elementRightClick", this.stringID);
        }
    }
}
