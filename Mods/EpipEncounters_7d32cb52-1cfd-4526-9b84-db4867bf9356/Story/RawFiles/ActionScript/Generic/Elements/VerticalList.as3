package Elements
{
    import LS_Classes.LSPanelHelpers;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import TPW_Classes.ListDisplay;
    import flash.text.TextField;
    import flash.events.MouseEvent;

    public dynamic class VerticalList extends Element
    {
        public var list:PipListDisplay;

        public var respositionAfterAdding:Boolean = true;

        public function VerticalList()
        {
            super();

            this.list = new PipListDisplay();
            this.addChild(this.list);
        }

        public override function get elementType() : String
        {
            return "VerticalList";
        }

        // Children are added to the list.
        public override function AddChildElement(mc:MovieClip) : *
        {
            this.childElements[mc.stringID] = mc;
            this[mc.stringID] = mc;
            
            this.list.addElement(mc, this.respositionAfterAdding);
        }

        public override function OnChildRemoved(element:MovieClip) : *
        {
            delete this.childElements[element.stringID];
            this.list.removeElement(this.list.content_array.indexOf(element), false); // Do not reposition the list.
        }

        public function SetRepositionAfterAdding(reposition:Boolean) : *
        {
            this.respositionAfterAdding = reposition;
        }

        public function SetTopSpacing(spacing:Number) : *
        {
            this.list.TOP_SPACING = spacing;
        }

        public function SetMouseWheelEnabled(enabled:Boolean) : *
        {
            this.list.mouseWheelWhenOverEnabled = enabled;
        }

        public override function SetSize(width:Number, height:Number) : *
        {
            this.list.setFrame(width, height);
        }

        public function SetElementSpacing(spacing:Number) : *
        {
            this.list.EL_SPACING = spacing;
        }

        public function SetSideSpacing(spacing:Number) : *
        {
            this.list.SIDE_SPACING = spacing;
        }

        public function Clear() : *
        {
            this.list.clearElements();
        }

        public function Reposition() : *
        {
            this.list.positionElements();
        }

        public function SortByChildIndex()
        {
            var arr:Array = this.list.content_array;
            for (var i:int = 0; i < arr.length; i++)
            {
                var mc:MovieClip = arr[i];
                mc.___childIndex = mc.GetChildIndex(mc);
            }
            this.list.content_array.sortOn(["___childIndex"], Array.NUMERIC)
            this.Reposition();
        }
    }
}
