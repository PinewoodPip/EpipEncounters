package Elements
{
    import LS_Classes.LSPanelHelpers;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import LS_Classes.listDisplay;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.display.Bitmap;
    import flash.display.BitmapData;

    public dynamic class Texture extends Element
    {
        private var customBitmap:Bitmap = null;
        private var bitmapHolder:MovieClip = null; // Ensures that the bitmap stays in the same z-order.

        public function Texture()
        {
            super();

            this.bitmapHolder = new MovieClip();
            this.addChild(this.bitmapHolder);
        }

        public override function get elementType() : String
        {
            return "Texture";
        }

        public function SetTexture(guid:String, width:Number=-1, height:Number=-1) : *
        {
            if (this.customBitmap != null)
            {
                this.bitmapHolder.removeChild(this.customBitmap);
            }
            this.customBitmap = new Bitmap(new BitmapData(1, 1));
            this.bitmapHolder.addChild(this.customBitmap);
            
            IggyFunctions.setTextureForBitmap(this.customBitmap, guid);

            // Must be done setTextureForBitmap(); initial values for BitmapData constructor and IggyFunctions call are disregarded(?)
            if (width != -1)
            {
                this.customBitmap.width = width;
            }
            if (height != -1)
            {
                this.customBitmap.height = height;
            }
        }
        
        public override function GetRawWidth(considerOverrides:Boolean=true) : Number
        {
            if (considerOverrides && this.widthOverride)
            {
                return this.widthOverride;
            }
            return this.bitmapHolder.width;
        }

        public override function GetRawHeight(considerOverrides:Boolean=true) : Number
        {
            if (considerOverrides && this.heightOverride)
            {
                return this.heightOverride;
            }
            return this.bitmapHolder.height;
        }
    }
}
