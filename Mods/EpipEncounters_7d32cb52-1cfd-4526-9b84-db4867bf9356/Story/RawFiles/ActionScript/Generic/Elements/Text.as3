package Elements
{
    import LS_Classes.LSPanelHelpers;
    import LS_Classes.textEffect;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import LS_Classes.listDisplay;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.events.Event;
    import flash.events.FocusEvent;
    import flash.events.KeyboardEvent;
    import flash.text.TextFormat;
    import flash.geom.Rectangle;

    public dynamic class Text extends Element
    {
        public var text_txt:TextField;

        public var _cachedText:String = "";
        private var _editable:Boolean = false;
        private var _focused:Boolean = false;

        public var _nextTextFormatProperties:Object = null; // Proxy object to set text format properties from lua. For optimization purposes, this is only initialized when necessary.

        public function Text()
        {
            super();
            Initialize();
        }

        public override function Initialize() : *
        {
            super.Initialize();
            this._cachedText = "";

            // Text elements are not mouse enabled by default.
            this.SetMouseEnabled(false);
            this.SetEditable(false);
            this.SetType("Center");

            this.text_txt.addEventListener(Event.CHANGE,this.onChange);
            this.text_txt.addEventListener(FocusEvent.FOCUS_IN,this.onFocus, false, 0, true);
            this.text_txt.addEventListener(FocusEvent.FOCUS_OUT,this.onFocusLost, false, 0, true);

            // Remove filters
            this.text_txt.filters = [];
        }

        public override function get elementType() : String
        {
            return "Text";
        }

        public override function SupportsPooling() : Boolean
        {
            return false;
        }

        public override function SetMouseEnabled(enabled) : *
        {
            this.mouseEnabled = enabled;
            this.text_txt.mouseEnabled = enabled;
        }

        public function SetType(txtType:String) : *
        {
            var format:TextFormat = this.text_txt.defaultTextFormat;
            txtType = txtType.toLowerCase();

            format.align = txtType;

            this.text_txt.defaultTextFormat = format;
            this.SetText(this._cachedText, false); // Required to update text format
            this.text_txt.wordWrap = true; // This gets unset at some unknown time, at least from pooling.
        }

        public function SetText(text:String, setSize:Boolean=false) : *
        {
            this.text_txt.htmlText = text;
            this._cachedText = text;

            if (setSize) // TODO move to lua
            {
                this.SetSize(this.text_txt.textWidth, this.text_txt.textHeight);
            }
        }

        public function SetEditable(editable:Boolean) : *
        {
            this.text_txt.selectable = editable;

            this._editable = editable;

            if (!editable)
            {
                this.text_txt.restrict = "";
            }
            else // Setting a field to be editable also turns on mouse events.
            {
                this.SetMouseEnabled(true);
            }
        }

        // Returns whether the text field is being edited.
        public function IsFocused() : Boolean
        {
            return (root as MovieClip).stage.focus == this.text_txt;
        }

        public function IsMouseWithinRange(startIndex:int, length:int) : Boolean
        {
            var mouseX:Number = this.text_txt.mouseX;
            var mouseY:Number = this.text_txt.mouseY;

            for (var i:int = startIndex; i < startIndex + length; i++)
            {
                var rect:Rectangle = this.text_txt.getCharBoundaries(i);

                if (mouseX >= rect.x && mouseX <= rect.x + rect.width && mouseY >= rect.y && mouseY <= rect.y + rect.height)
                {
                    return true;
                }
            }
            return false;
        }

        public function IsMouseWithinKeyword(keyword:String, startIndex:int=-1) : Boolean
        {
            var text:String = this.text_txt.htmlText;
            if (startIndex < 0)
            {
                startIndex = text.indexOf(keyword);
            }
            else
            {
                startIndex = text.indexOf(keyword, startIndex - 1); // Parameter is 1-based.
            }
            var endIndex:int = startIndex + keyword.length;

            while (startIndex >= 0)
            {
                if (IsMouseWithinRange(startIndex, keyword.length))
                {
                    return true;
                }

                startIndex = text.indexOf(keyword, endIndex);
                endIndex = startIndex + keyword.length;
            }
            
            return false;
        }

        public function SetRestrictedCharacters(restriction:String) : *
        {
            this.text_txt.restrict = restriction;
        }

        public override function SetSize(width:Number, height:Number) : *
        {
            this.text_txt.width = width;
            this.text_txt.height = height;
        }

        public function AddStroke(color:uint, size:Number, alpha:Number = 1.0, strength:uint = 1, p5:uint = 2) : *
        {
            this.text_txt.filters = textEffect.createStrokeFilter(color, size, alpha, strength, p5);
        }

        // lineIndex param is 1-based.
        public function GetLineHeight(lineIndex:uint) : Number
        {
            return this.text_txt.getLineMetrics(lineIndex - 1).height;
        }

        // lineIndex param is 1-based.
        public function GetLineWidth(lineIndex:uint) : Number
        {
            return this.text_txt.getLineMetrics(lineIndex - 1).width;
        }

        public function PrepareNewTextFormat() : *
        {
            this._nextTextFormatProperties = new Object();
        }

        public function SetTextFormat(startIndex:Number=-1, endIndex:Number=-1) : *
        {
            var newFormat:TextFormat = new TextFormat();
            for (var key:String in this._nextTextFormatProperties)
            {
                newFormat[key] = this._nextTextFormatProperties[key];
            }
            if (startIndex != -1 && endIndex != -1)
            {
                this.text_txt.setTextFormat(newFormat, startIndex, endIndex);
            }
            else if (startIndex != -1)
            {
                this.text_txt.setTextFormat(newFormat, startIndex);
            }
            else
            {
                this.text_txt.setTextFormat(newFormat);
            }
        }

        public function SetFocused(focused:Boolean) : *
        {
            if (focused != this._focused)
            {
                if (focused)
                {
                    this.root.stage.focus = this.text_txt;
                }
                else
                {
                    this.root.stage.focus = null;
                }
            }
        }

        private function acceptSave() : *
        {
            var _loc1_:String = this.text_txt.text;

            _loc1_ = this.strReplace(_loc1_,"\n","");
            _loc1_ = this.strReplace(_loc1_,"\r","");
            _loc1_ = this.strReplace(_loc1_,"\t","");

            this._cachedText = _loc1_;

            ExternalInterface.call("Text_Changed", this.stringID, _loc1_);
        }
        
        private function onChange(param1:Event) : *
        {
            if (!this._editable)
            {
                this.text_txt.htmlText = this._cachedText;
            }
            else
            {
                this.acceptSave();
            }
        }
        
        private function onFocus(param1:FocusEvent) : *
        {
            if (this._editable)
            {
                var base:MovieClip = root as MovieClip;

                this.text_txt.addEventListener(KeyboardEvent.KEY_DOWN, this.inputHandler);
                ExternalInterface.call("inputFocus");

                ExternalInterface.call("Text_Focused", this.stringID);

                this._focused = true;
            }
        }
        
        private function onFocusLost(param1:FocusEvent) : *
        {
            this.text_txt.removeEventListener(KeyboardEvent.KEY_DOWN, this.inputHandler);
            ExternalInterface.call("inputFocusLost");

            ExternalInterface.call("Text_Unfocused", this.stringID);

            this._focused = false;
        }
        
        private function strReplace(param1:String, param2:String, param3:String) : String
        {
            return param1.split(param2).join(param3);
        }
        
        private function inputHandler(param1:KeyboardEvent) : *
        {
            this.acceptSave();

            if(param1.charCode == 13)
            {
                ExternalInterface.call("inputFocusLost");
                stage.focus = null;
            }
        }

        // TODO setfont
    }
}
