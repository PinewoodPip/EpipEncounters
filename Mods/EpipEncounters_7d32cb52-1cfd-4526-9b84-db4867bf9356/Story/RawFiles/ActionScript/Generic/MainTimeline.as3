package arenaResult_fla
{
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import flash.geom.Point;
    import flash.text.TextField;
    import flash.utils.Dictionary;
    import flash.utils.getDefinitionByName;
    
    public dynamic class MainTimeline extends MovieClip
    {
        public var events:Array;
        public var layout:String;
        public var isDragging:Boolean;
        public var hasTooltip:Boolean;
        public var curTooltip:Number;
        public const keepCustomInScreen:Boolean = true;

        // -----------------

        public var Root:MovieClip = null;
        public var elements:Dictionary;
        
        public function MainTimeline()
        {
            super();
            addFrameScript(0,this.frame1);

            this.elements = new Dictionary();
            this.AddElement("Root", "Empty", "");
        }

        // Can't get this to fire.
        // public function onEventResize() : *
        // {
        //     ExternalInterface.call("viewportChanged");
        // }

        public function AddElement(id:String, elementType:String, parentID:String = "") : *
        {
            var elementClass:Class = getDefinitionByName("Elements." + elementType) as Class;

            if (elementClass == null) {trace("AddElement: Invalid elementType: " + elementType); return;}

            var mc:MovieClip = new elementClass();
            var parent:MovieClip = this.GetElementByID(parentID);

            if (mc && parent)
            {
                mc.stringID = id;

                if (parentID != "")
                {
                    mc.parentElement = parent;
                }

                this.elements[id] = mc;

                parent.AddChildElement(mc);
            }
            else
            {
                trace("AddElement: element creation or parent fetch failed");
            }
        }

        public function AddChildElement(mc:MovieClip) : *
        {
            this.elements[mc.stringID] = mc; // TODO use childElements
            this[mc.stringID] = mc;
            this.addChild(mc);
        }

        public function DestroyElement(id:String) : *
        {
            var element:MovieClip = this.GetElementByID(id);

            if (element == null)
            {
                trace("DestroyElement(): element not found " + id);
            }
            else
            {
                this.RecursivelyDestroyElement(element);
            }
        }

        private function RecursivelyDestroyElement(element:MovieClip) : *
        {
            for (var key:String in element.childElements)
            {
                RecursivelyDestroyElement(element.childElements[key]);
            }

            element.CleanUp();
        }

        public function GetElementByID(id:String) : MovieClip
        {
            var element:MovieClip = null;

            if (id == "")
            {
                element = this;
            }
            else
            {
                element = this.elements[id];
            }

            if (element == null) {trace("GetElementByID: not found: " + id);}

            return element;
        }

        public function GetElementByPath() : MovieClip
        {
            trace("TODO GetElementByPath")
        }

        // ---------------
        
        public function onEventUp(param1:Number) : *
        {
            // TODO port code form input.swf
            return false;
        }

        public function onEventDown(param1:Number) : *
        {
            return false;
        }

        // Always set stage to be fullscreen.
        public function onEventResolution(width:Number, height:Number) : *
        {
            ExternalInterface.call("setMcSize", width, height);
        }
        
        public function onEventResize() : *
        {

        }
        
        public function onEventInit() : *
        {
            ExternalInterface.call("setPosition","center","screen","center");
        }
        
        public function addBtnHint(param1:Number, param2:String, param3:Number) : *
        {
        }
        
        public function clearBtnHints() : *
        {
        }
        
        public function getGlobalPositionOfMC(param1:MovieClip) : Point
        {
            var _loc2_:Point = param1.localToGlobal(new Point(0,0));
            _loc2_.x -= root.x;
            _loc2_.y -= root.y;
            return _loc2_;
        }
        
        // TODO reimplement
        public function showTooltipForMC(param1:MovieClip, param2:Number, param3:Boolean = false) : *
        {
            var _loc4_:Point = this.getGlobalPositionOfMC(param1);
            var _loc5_:Number = param1.width;
            this.hasTooltip = true;
            var _loc6_:Number = 0;
            if(param1 && param1.mOffsetY)
            {
                _loc6_ = param1.mOffsetY;
            }
            if(param1 && param1.mWOverride)
            {
                _loc5_ = param1.mWOverride;
            }

            // custom talent tooltip
            if (param3)
            {
                // ExternalInterface.call("pipShowTalentTooltip",param1.type,param2,_loc4_.x,_loc4_.y + _loc6_,_loc5_,param1.height,"right",param1.val_txt.htmlText);
                ExternalInterface.call("pipShowTalentTooltip",param2,_loc4_.x,_loc4_.y + _loc6_,_loc5_,param1.height,"right","",param1.val_txt.htmlText);
            }
            else
            {
                ExternalInterface.call("showTooltip",param1.type,param2,_loc4_.x,_loc4_.y + _loc6_,_loc5_,param1.height,"right");
            }
        }
        
        function frame1() : *
        {
            this.events = new Array("IE UICancel");
            this.layout = "fixed";
            this.isDragging = false;
            this.hasTooltip = false;
            this.curTooltip = -1;
        }
    }
}
