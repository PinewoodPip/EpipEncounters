package TPW_Classes
{
    import flash.events.Event;
    import flash.geom.Rectangle;
    
    public dynamic class Grid extends PipListDisplay
    {
        
        
        protected var m_row:uint = 3;
        
        protected var m_col:uint = 9;
        
        protected var m_maxPages:uint = 1;
        
        protected var m_currpage:uint = 1;
        
        public var ROW_SPACING:Number = 4;
        
        public var m_centered:Boolean = false;
        
        public var m_gridAlign:Number = 0;

        public var contentWidth:Number = 0;
        public var contentHeight:Number = 0;
        
        public function Grid()
        {
            super();
            this.m_currpage = 1;
        }
        
        override public function positionElements() : *
        {
            if(content_array.length < 1)
            {
                return;
            }
            var nextX:Number = m_sideSpacing;
            var unknown1:Number = 0;
            var index:uint = 0;
            if(this.m_NeedsSorting)
            {
                INTSort();
            }
            if(this.m_centered)
            {
                unknown1 = Math.round(getElementWidth(content_array[0]) * 0.5);
            }
            var unknown2:Boolean = true;
            var nextY:Number = m_topSpacing;
            var columnIndex:uint = 0;
            var rowIndex:uint = 0;
            var usedPagesCount:uint = 1;
            var maxRowWidth:Number = 0;
            var maxHeight:Number = 0;
            if(this.m_gridAlign == 0)
            {
                index = 0;
                while(index < content_array.length)
                {
                    this.m_maxPages = usedPagesCount;
                    if(!content_array[index].m_filteredObject && content_array[index].visible) // Only consider visible elements
                    {
                        content_array[index].x = unknown1 + nextX;
                        content_array[index].y = nextY;
                        nextX = nextX + Math.round(getElementWidth(content_array[index]) + EL_SPACING);
                        maxRowWidth = Math.max(maxRowWidth, nextX); // Should be checked before the wrap-to-next-row check
                        maxHeight = Math.max(maxHeight, nextY + getElementHeight(content_array[index]));
                        if(!this.m_hasScrollRect)
                        {
                            if(this.m_currpage == usedPagesCount)
                            {
                                if(unknown2)
                                {
                                m_CurrentSelection = content_array[index];
                                unknown2 = false;
                                }
                                content_array[index].visible = true;
                            }
                            else
                            {
                                content_array[index].visible = false;
                            }
                        }
                        if(++columnIndex >= this.m_col)
                        {
                            columnIndex = 0;
                            rowIndex++;
                            nextX = m_sideSpacing;
                            nextY = nextY + Math.round(getElementHeight(content_array[index]) + this.ROW_SPACING);
                        }
                        if(this.m_row != 0 && rowIndex >= this.m_row)
                        {
                            if(!this.m_hasScrollRect)
                            {
                                unknown1 = 0;
                            }
                            else
                            {
                                unknown1 = Math.round(content_array[index].x + getElementWidth(content_array[index]) + EL_SPACING);
                            }
                            nextX = m_sideSpacing;
                            nextY = m_topSpacing;
                            usedPagesCount++;
                            rowIndex = 0;
                            columnIndex = 0;
                        }
                    }
                    index++;
                }

                // Update content width and height
                this.contentWidth = maxRowWidth;
                this.contentHeight = maxHeight;
            }
            else // Unused logic
            {
                if(this.m_col > content_array.length)
                {
                nextX = Math.round((this.m_col - content_array.length) * (getElementWidth(content_array[0]) + EL_SPACING));
                }
                index = 0;
                while(index < content_array.length)
                {
                this.m_maxPages = usedPagesCount;
                content_array[index].x = unknown1 + nextX;
                content_array[index].y = nextY;
                nextX = nextX + (getElementWidth(content_array[index]) + EL_SPACING);
                if(!this.m_hasScrollRect)
                {
                    if(this.m_currpage == usedPagesCount)
                    {
                        if(unknown2)
                        {
                            m_CurrentSelection = content_array[index];
                            unknown2 = false;
                        }
                        content_array[index].visible = true;
                    }
                    else
                    {
                        content_array[index].visible = false;
                    }
                }
                if(++columnIndex >= this.m_col)
                {
                    if(this.m_col > content_array.length - index)
                    {
                        nextX = Math.round((this.m_col + 1 - (content_array.length - index)) * (getElementWidth(content_array[index]) + EL_SPACING));
                    }
                    else
                    {
                        nextX = m_sideSpacing;
                    }
                    columnIndex = 0;
                    rowIndex++;
                    nextY = nextY + (Math.round(getElementHeight(content_array[index]) + this.ROW_SPACING) + m_topSpacing);
                }
                if(this.m_row != 0 && rowIndex >= this.m_row)
                {
                    if(!this.m_hasScrollRect)
                    {
                        unknown1 = 0;
                    }
                    else
                    {
                        unknown1 = Math.round(content_array[index].x + getElementWidth(content_array[index]) + EL_SPACING);
                    }
                    nextX = m_sideSpacing;
                    nextY = m_topSpacing;
                    usedPagesCount++;
                    rowIndex = 0;
                    columnIndex = 0;
                }
                index++;
                }
            }
            if(this.m_NeedsSorting)
            {
                this.m_NeedsSorting = false;
                dispatchEvent(new Event("listSorted"));
            }
        }
        
        public function getCurrRow() : Number
        {
            if(m_CurrentSelection)
            {
                return this.getRowOfElement(m_CurrentSelection.list_pos);
            }
            return -1;
        }
        
        public function selectPos(param1:Number, param2:Number, param3:Boolean = false) : *
        {
            var _loc4_:Number;
            if((_loc4_ = param1 * this.m_col + param2) >= 0 && _loc4_ < content_array.length)
            {
                select(_loc4_,param3);
            }
        }
        
        public function nextPage() : *
        {
            this.setPage(this.m_currpage + 1);
        }
        
        public function previousPage() : *
        {
            this.setPage(this.m_currpage - 1);
        }
        
        public function nextRow() : *
        {
            select(currentSelection + this.m_col);
        }
        
        public function previousRow() : *
        {
            var _loc1_:Number = this.getRowOfElement(currentSelection);
            if(_loc1_ != 0)
            {
                select(currentSelection - this.m_col);
            }
        }
        
        public function previousCol() : Boolean
        {
            var _loc1_:Boolean = false;
            var _loc2_:Number = this.getRowOfElement(currentSelection);
            var _loc3_:Number = this.getRowOfElement(currentSelection - 1);
            if(currentSelection != 0 && _loc2_ == _loc3_)
            {
                super.previous();
                _loc1_ = true;
            }
            return _loc1_;
        }
        
        public function nextCol() : Boolean
        {
            var _loc1_:Boolean = false;
            var _loc2_:Number = this.getRowOfElement(currentSelection);
            var _loc3_:Number = this.getRowOfElement(currentSelection + 1);
            if(currentSelection != content_array.length - 1 && _loc2_ == _loc3_)
            {
                super.next();
                _loc1_ = true;
            }
            return _loc1_;
        }
        
        private function getRowOfElement(param1:Number) : Number
        {
            return Number(Math.floor(param1 / this.m_col));
        }
        
        private function getColOfElement(param1:Number) : Number
        {
            return Math.floor(param1 / this.m_row);
        }
        
        override public function clearElements() : *
        {
            this.m_currpage = 1;
            this.m_maxPages = 1;
            super.clearElements();
        }
        
        public function setPage(param1:Number) : *
        {
            var _loc2_:Number = NaN;
            var _loc3_:Rectangle = null;
            if(param1 > 0 && this.m_currpage != param1 && content_array.length > 0)
            {
                if(param1 <= 1)
                {
                param1 = 1;
                }
                else if(param1 > this.m_maxPages)
                {
                param1 = this.m_maxPages;
                }
                this.m_currpage = param1;
                if(this.m_hasScrollRect)
                {
                _loc2_ = container_mc.scrollRect.width;
                _loc3_ = new Rectangle((param1 - 1) * _loc2_,0,_loc2_,container_mc.scrollRect.height);
                container_mc.scrollRect = _loc3_;
                }
                else
                {
                this.positionElements();
                }
                dispatchEvent(new Event(Event.CHANGE));
            }
        }
        
        public function refreshPage() : *
        {
            var _loc1_:uint = this.m_currpage;
            this.m_currpage = 1;
            this.setPage(_loc1_);
        }
        
        public function get col() : uint
        {
            return this.m_col;
        }
        
        public function set col(param1:uint) : void
        {
            this.m_col = param1;
            this.refreshPage();
        }
        
        public function get row() : uint
        {
            return this.m_row;
        }
        
        public function set row(param1:uint) : void
        {
            this.m_row = param1;
            this.refreshPage();
        }
        
        public function getRow(param1:uint) : uint
        {
            return Math.ceil((param1 + 1) / this.col);
        }
        
        public function getCol(param1:uint) : uint
        {
            var _loc2_:Number = this.getRow(param1);
            return Math.ceil(param1 - (_loc2_ - 1) * this.col);
        }
        
        public function get rowsUsed() : uint
        {
            return Math.ceil(content_array.length / this.m_col);
        }
        
        public function get maxPages() : uint
        {
            return this.m_maxPages;
        }
        
        public function get currPage() : uint
        {
            return this.m_currpage;
        }
        
        override public function cursorLeft() : *
        {
            var _loc1_:Number = NaN;
            var _loc2_:Number = NaN;
            var _loc3_:Number = NaN;
            if(currentSelection == -1)
            {
                select(0);
            }
            else
            {
                _loc1_ = currentSelection - 1;
                _loc2_ = this.getRow(currentSelection);
                _loc3_ = this.getRow(_loc1_);
                if(_loc1_ >= 0 && _loc2_ == _loc3_)
                {
                select(_loc1_);
                }
            }
        }
        
        override public function cursorRight() : *
        {
            var _loc1_:Number = NaN;
            var _loc2_:Number = NaN;
            if(currentSelection == -1)
            {
                select(0);
            }
            else
            {
                _loc1_ = this.getRow(currentSelection);
                _loc2_ = this.getRow(currentSelection + 1);
                if(_loc1_ == _loc2_)
                {
                select(currentSelection + 1);
                }
            }
        }
        
        override public function cursorUp() : *
        {
            var _loc1_:Number = NaN;
            if(currentSelection == -1)
            {
                select(0);
            }
            else
            {
                _loc1_ = currentSelection - this.col;
                if(_loc1_ >= 0)
                {
                select(_loc1_);
                }
            }
        }
        
        override public function cursorDown() : *
        {
            var _loc1_:Number = NaN;
            if(currentSelection == -1)
            {
                select(0);
            }
            else
            {
                _loc1_ = currentSelection + this.col;
                if(_loc1_ < content_array.length)
                {
                select(_loc1_);
                }
            }
        }
    }
}
