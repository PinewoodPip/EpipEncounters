 
package notification_fla
{
    import LS_Classes.larTween;
    import LS_Classes.textEffect;
    import fl.motion.easing.Cubic;
    import fl.motion.easing.Quadratic;
    import flash.display.MovieClip;
    import flash.events.TimerEvent;
    import flash.external.ExternalInterface;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    
    public dynamic class MainTimeline extends MovieClip
    {
        
        
        public var fightBanner_mc:MovieClip;
        
        public var notCast_mc:MovieClip;
        
        public var not_mc:MovieClip;
        
        public var regionBanner_mc:MovieClip;
        
        public var events:Array;
        
        public var layout:String;
        
        public var deadlineTimer:Timer;
        
        public var isController:Boolean;
        
        public var newSkill_mc:MovieClip;
        
        public var fadeTime:Number;
        
        public var regionFadeOutTime:Number;
        
        public var showTime:Number;
        
        public var showFightTime:Number;
        
        public const beginY:Number = 230;
        
        public const endY:Number = 250;
        
        public var beginRegionY:Number;
        
        public var endRegionY:Number;
        
        public var regionTween:larTween;
        
        public var regionTweenY:larTween;
        
        public var beginFightY:Number;
        
        public var fightDelayTimer:Timer;
        
        public var fightTweenA:IggyTween;
        
        public var fightTweenB:IggyTween;
        
        public var fightTweenC:IggyTween;
        
        public const notCastFadeInTime:Number = 0.4;
        
        public const notCastFadeOutTime:Number = 0.25;
        
        public var notCastTween:larTween;

        public var notCastY:Number = 250;

        public var showCastNots:Boolean = true;
        
        public function MainTimeline()
        {
            super();
            addFrameScript(0,this.frame1);
        }
        
        public function useCleanUpTimer(param1:Number) : *
        {
            if(this.deadlineTimer != null)
            {
                this.deadlineTimer.reset();
            }
            else
            {
                this.deadlineTimer = new Timer(param1 + 500,1);
                this.deadlineTimer.addEventListener(TimerEvent.TIMER_COMPLETE,this.deadLineHit);
            }
            this.deadlineTimer.start();
        }
        
        public function deadLineHit(param1:TimerEvent) : *
        {
            var _loc2_:Boolean = true;
            if(this.notCastTween)
            {
                this.notCastTween.stop();
            }
            if(this.regionTween)
            {
                this.regionTween.stop();
            }
            if(this.regionTweenY)
            {
                this.regionTweenY.stop();
            }
            if(this.notCast_mc.visible)
            {
                this.notCast_mc.visible = false;
            }
            if(this.regionBanner_mc.visible)
            {
                this.regionBanner_mc.visible = false;
            }
            if(this.newSkill_mc && this.newSkill_mc.visible)
            {
                this.newSkill_mc.animationDone();
                _loc2_ = false;
            }
            if(this.not_mc.visible)
            {
                this.hideHPMC(this.not_mc);
                _loc2_ = false;
            }
            if(_loc2_)
            {
                this.INTNotificationDone();
            }
        }
        
        public function setAnchor(param1:Number, param2:* = true) : *
        {
            ExternalInterface.call("registeranchorId","notification" + param1);
            ExternalInterface.call("setAnchor","top","splitscreen","top");
        }
        
        public function setShared(param1:Boolean) : *
        {
            if(param1)
            {
                ExternalInterface.call("setAnchor","top","screen","top");
            }
            else
            {
                ExternalInterface.call("setAnchor","top","splitscreen","top");
            }
        }
        
        public function onEventResize() : *
        {
        }
        
        public function onEventUp(param1:Number) : *
        {
            return false;
        }
        
        public function onEventDown(param1:Number) : *
        {
            return false;
        }
        
        public function setControllerMode(param1:Boolean) : *
        {
            var _loc2_:Array = null;
            this.isController = param1;
            if(this.newSkill_mc)
            {
                removeChild(this.newSkill_mc);
            }
            if(this.isController)
            {
                this.newSkill_mc = new mcNewSkillController();
                addChild(this.newSkill_mc);
                this.newSkill_mc.keyInfo_mc.visible = false;
                this.newSkill_mc.x = 512;
                this.newSkill_mc.y = 60;
            }
            else
            {
                this.newSkill_mc = new mcNewSkillKBM();
                addChild(this.newSkill_mc);
                _loc2_ = textEffect.createStrokeFilter(0,1,0.8,1,3);
                this.newSkill_mc.title_mc.holder_mc.filters = _loc2_;
                this.newSkill_mc.keyInfo_mc.holder_mc.filters = _loc2_;
                this.newSkill_mc.x = 960;
                this.newSkill_mc.y = 330;
            }
            this.newSkill_mc.visible = false;
            this.newSkill_mc.gotoAndStop(1);
            this.newSkill_mc.skill_mc.gotoAndStop(1);
            this.newSkill_mc.skill_mc.skillEl_mc.name_txt.autoSize = TextFieldAutoSize.LEFT;
        }
        
        public function onEventInit() : *
        {
            this.fightDelayTimer = new Timer(10,1);
            this.fightDelayTimer.addEventListener(TimerEvent.TIMER_COMPLETE,this.fightTimerDone);
            this.showFightTime = 2;
            var _loc1_:Array = textEffect.createStrokeFilter(0,1,0.8,1,3);
            this.not_mc.filters = _loc1_;
            this.not_mc.text_txt.autoSize = TextFieldAutoSize.CENTER;
            this.not_mc.textHL_txt.autoSize = TextFieldAutoSize.CENTER;
            this.regionBanner_mc.text_txt.autoSize = TextFieldAutoSize.CENTER;
            this.fightBanner_mc.visible = false;
            this.regionBanner_mc.visible = false;
            this.not_mc.visible = false;
            this.notCast_mc.visible = false;
            this.notCast_mc.text_txt.autoSize = TextFieldAutoSize.LEFT;
            this.fightBanner_mc.text_txt.filters = this.regionBanner_mc.text_txt.filters = textEffect.createStrokeFilter(0,2,0.8,3,4);
        }
        
        public function setLabel(param1:Number, param2:String) : *
        {
            var _loc3_:Array = null;
            var _loc4_:Array = null;
            if(this.isController)
            {
                _loc3_ = new Array(this.newSkill_mc.title_mc.text_txt,this.newSkill_mc.keyInfo_mc.text_txt);
                if(param1 >= 0 && param1 < _loc3_.length)
                {
                _loc3_[param1].htmlText = param2;
                }
            }
            else
            {
                _loc4_ = new Array(this.newSkill_mc.title_mc.holder_mc.text_txt,this.newSkill_mc.keyInfo_mc.holder_mc.text_txt);
                if(param1 >= 0 && param1 < _loc4_.length)
                {
                _loc4_[param1].htmlText = param2;
                }
            }
        }
        
        public function showNewSkill(param1:String, param2:String, param3:String) : *
        {
            if(!this.newSkill_mc)
            {
                return;
            }
            if(this.isController)
            {
                this.newSkill_mc.skill_mc.skillEl_mc.desc_txt.visible = true;
                this.newSkill_mc.skill_mc.skillEl_mc.name_txt.htmlText = param1;
                this.newSkill_mc.skill_mc.x = 227 - Math.round(this.newSkill_mc.skill_mc.skillEl_mc.frame_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.name_txt.textWidth) * 0.5);
                if(this.newSkill_mc.skill_mc.mask_mc && this.newSkill_mc.skill_mc.mask_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.mask_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                if(this.newSkill_mc.skill_mc.frameMask_mc && this.newSkill_mc.skill_mc.frameMask_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.frameMask_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                this.newSkill_mc.skill_mc.skillEl_mc.desc_txt.htmlText = param2;
                this.newSkill_mc.skill_mc.iggy_si.visible = true;
                this.newSkill_mc.startSkillAnim();
            }
            else
            {
                this.newSkill_mc.skill_mc.skillEl_mc.desc_txt.visible = true;
                this.newSkill_mc.skill_mc.skillEl_mc.name_txt.htmlText = param1;
                this.newSkill_mc.skill_mc.skillEl_mc.frame_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.name_txt.textWidth);
                if(this.newSkill_mc.skill_mc.mask_mc && this.newSkill_mc.skill_mc.mask_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.mask_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                if(this.newSkill_mc.skill_mc.flash_mc && this.newSkill_mc.skill_mc.flash_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.flash_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                if(this.newSkill_mc.skill_mc.frameMask_mc && this.newSkill_mc.skill_mc.frameMask_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.frameMask_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                this.newSkill_mc.skill_mc.skillEl_mc.desc_txt.htmlText = param2;
                this.newSkill_mc.skill_mc.iggy_si.visible = true;
                this.newSkill_mc.gotoAndPlay(1);
            }
            this.newSkill_mc.visible = true;
            this.newSkill_mc.alpha = 1;
            this.useCleanUpTimer(3000);
            ExternalInterface.call("PlaySound",param3);
        }
        
        public function showNewAbility(param1:String, param2:String) : *
        {
            if(!this.newSkill_mc)
            {
                return;
            }
            if(this.isController)
            {
                this.newSkill_mc.skill_mc.skillEl_mc.desc_txt.visible = false;
                this.newSkill_mc.skill_mc.skillEl_mc.name_txt.htmlText = param1;
                this.newSkill_mc.skill_mc.x = 227 - Math.round(this.newSkill_mc.skill_mc.skillEl_mc.frame_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.name_txt.textWidth) * 0.5);
                if(this.newSkill_mc.skill_mc.mask_mc && this.newSkill_mc.skill_mc.mask_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.mask_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                if(this.newSkill_mc.skill_mc.frameMask_mc && this.newSkill_mc.skill_mc.frameMask_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.frameMask_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                this.newSkill_mc.skill_mc.iggy_si.visible = true;
                this.newSkill_mc.alpha = 1;
                this.newSkill_mc.skill_mc.burstCircle_mc.visible = false;
                this.newSkill_mc.visible = true;
                this.newSkill_mc.gotoAndPlay(1);
                this.newSkill_mc.startSkillAnim();
            }
            else
            {
                this.newSkill_mc.skill_mc.skillEl_mc.desc_txt.visible = false;
                this.newSkill_mc.skill_mc.skillEl_mc.name_txt.htmlText = param1;
                this.newSkill_mc.skill_mc.skillEl_mc.frame_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.name_txt.textWidth);
                if(this.newSkill_mc.skill_mc.mask_mc && this.newSkill_mc.skill_mc.mask_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.mask_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                if(this.newSkill_mc.skill_mc.flash_mc && this.newSkill_mc.skill_mc.flash_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.flash_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                if(this.newSkill_mc.skill_mc.frameMask_mc && this.newSkill_mc.skill_mc.frameMask_mc.setBGW)
                {
                this.newSkill_mc.skill_mc.frameMask_mc.setBGW(this.newSkill_mc.skill_mc.skillEl_mc.width);
                }
                this.newSkill_mc.skill_mc.iggy_si.visible = true;
                this.newSkill_mc.visible = true;
                this.newSkill_mc.gotoAndPlay(1);
            }
            this.useCleanUpTimer(3000);
            ExternalInterface.call("PlaySound",param2);
        }
        
        public function setNotification(param1:String, param2:String, param3:Number = 2.0, param4:Boolean = false, param5:Number = -1) : *
        {
            this.showTime = param3;
            if(!param4)
            {
                this.not_mc.text_txt.htmlText = param1;
                this.not_mc.textHL_txt.htmlText = param1;
                this.not_mc.hlFadeIn();
                this.startNotificationTween(this.not_mc);
            }
            else
            {
                this.notCast_mc.alpha = 0;
                this.notCast_mc.visible = true;
                this.notCast_mc.setText(param1);
                this.notCast_mc.x = 960 - this.notCast_mc.width * 0.5;
                ExternalInterface.call("PlaySound",param2);
                this.startNotificationTween(this.notCast_mc);
            }
        }
        
        public function hideNotification(param1:Boolean = false) : *
        {
            if(!param1)
            {
                this.hideHPMC(this.not_mc);
            }
            else
            {
                this.hideHPMC(this.notCast_mc);
            }
        }
        
        public function startNotificationTween(param1:MovieClip) : *
        {
            if(param1)
            {
                param1.visible = true;
                param1.alpha = 0.3;
                param1.y = this.beginY;
                if(this.showTime != -1)
                {
                param1.timeline = new larTween(param1,"alpha",Cubic.easeOut,NaN,1,this.fadeTime,this.startHiding,param1);
                }
                else
                {
                param1.timeline = new larTween(param1,"alpha",Cubic.easeOut,NaN,1,this.fadeTime);
                }
                param1.timelineY = new larTween(param1,"y",Cubic.easeOut,NaN,this.endY,this.fadeTime);
                if(this.showTime != -1)
                {
                this.useCleanUpTimer((this.fadeTime * 2 + this.showTime) * 1000);
                }
            }
        }
        
        public function startHiding(param1:MovieClip) : *
        {
            if(this.showTime != -1)
            {
                if(param1)
                {
                param1.timeline = new larTween(param1,"alpha",Cubic.easeIn,NaN,0.3,this.fadeTime,this.hideHPMC,param1,this.showTime);
                param1.timelineY = new larTween(param1,"y",Cubic.easeIn,NaN,this.beginY,this.fadeTime,null,null,this.showTime);
                }
                else
                {
                this.hideHPMC(param1);
                }
            }
        }
        
        public function hideHPMC(param1:MovieClip) : *
        {
            if(param1)
            {
                param1.visible = false;
                if(param1 == this.not_mc)
                {
                this.not_mc.stopAnim();
                }
            }
            this.INTNotificationDone();
        }
        
        public function setRegionText(param1:String, param2:Number = 2.0) : *
        {
            if(this.regionBanner_mc.visible && this.regionBanner_mc.textStr == param1)
            {
                return;
            }
            this.regionBanner_mc.text_txt.htmlText = param1;
            this.regionBanner_mc.textStr = param1;
            this.regionBanner_mc.text_txt.y = 29 - Math.round(this.regionBanner_mc.text_txt.textHeight * 0.5);
            this.regionBanner_mc.visible = true;
            this.regionBanner_mc.alpha = 0.3;
            this.regionBanner_mc.y = this.beginRegionY;
            if(this.regionTween)
            {
                this.regionTween.stop();
            }
            if(this.regionTweenY)
            {
                this.regionTweenY.stop();
            }
            this.regionTween = new larTween(this.regionBanner_mc,"alpha",Quadratic.easeOut,NaN,1,this.fadeTime,this.startRegionHiding);
            this.regionTweenY = new larTween(this.regionBanner_mc,"y",Quadratic.easeOut,NaN,this.endRegionY,this.fadeTime);
            this.regionBanner_mc.showRegionTime = param2;
            this.useCleanUpTimer(this.fadeTime * 2000 + param2 * 1000);
        }
        
        public function startRegionHiding() : *
        {
            this.regionTween = new larTween(this.regionBanner_mc,"alpha",Quadratic.easeIn,NaN,0.2,this.regionFadeOutTime,this.hideRegionMC,null,this.regionBanner_mc.showRegionTime);
            this.regionTweenY = new larTween(this.regionBanner_mc,"y",Quadratic.easeIn,NaN,this.beginRegionY,this.regionFadeOutTime,null,null,this.regionBanner_mc.showRegionTime);
        }
        
        public function hideRegionMC() : *
        {
            this.regionBanner_mc.visible = false;
            this.INTNotificationDone();
        }
        
        public function setFightText(param1:String, param2:Number = 2.0) : *
        {
            if(this.fightTweenA)
            {
                this.fightTweenA.stop();
            }
            if(this.fightTweenB)
            {
                this.fightTweenB.stop();
            }
            if(this.fightTweenC)
            {
                this.fightTweenC.stop();
            }
            this.fightBanner_mc.text_txt.htmlText = param1.toUpperCase();
            this.fightBanner_mc.visible = true;
            this.fightBanner_mc.alpha = 0.2;
            this.fightBanner_mc.y = this.beginFightY;
            this.fightBanner_mc.scaleX = this.fightBanner_mc.scaleY = 1;
            var _loc3_:Number = 0.15;
            this.fightTweenA = new IggyTween(this.fightBanner_mc,"alpha",Quadratic.easeOut,NaN,1,_loc3_,true);
            this.fightTweenB = new IggyTween(this.fightBanner_mc,"scaleX",Quadratic.easeOut,1.5,1,_loc3_,true);
            this.fightTweenC = new IggyTween(this.fightBanner_mc,"scaleY",Quadratic.easeOut,1.5,1,_loc3_,true);
            this.fightTweenA.motionFinishCallback = this.startFightHiding;
            this.showFightTime = param2 * 1000;
        }
        
        public function startFightHiding() : *
        {
            this.fightDelayTimer.delay = this.showFightTime;
            this.fightDelayTimer.start();
        }
        
        public function fightTimerDone(param1:TimerEvent) : *
        {
            this.fightDelayTimer.stop();
            var _loc2_:Number = 0.13;
            this.fightTweenA = new IggyTween(this.fightBanner_mc,"alpha",Quadratic.easeIn,NaN,0,_loc2_,true);
            this.fightTweenB = new IggyTween(this.fightBanner_mc,"scaleX",Quadratic.easeOut,1,1.5,_loc2_,true);
            this.fightTweenC = new IggyTween(this.fightBanner_mc,"scaleY",Quadratic.easeOut,1,1.5,_loc2_,true);
            this.fightTweenA.motionFinishCallback = this.hideFightMC;
        }
        
        public function hideFightMC() : *
        {
            this.fightBanner_mc.visible = false;
        }
        
        public function showCastNot(param1:String, param2:Number = 2.5, param3:Number = 200) : *
        {
            // Edited Y position to use a public var and allow these to be turned off.
            if (!showCastNots)
            {
                ExternalInterface.call("notificationDone");
                return;
            }

            this.notCast_mc.setText(param1);
            this.notCast_mc.y = this.notCastY;
            if(!this.notCast_mc.visible)
            {
                this.notCast_mc.visible = true;
            }
            if(this.notCastTween)
            {
                this.notCastTween.stop();
            }
            this.notCastTween = new larTween(this.notCast_mc,"alpha",Cubic.easeOut,0,1,this.notCastFadeInTime,this.hideCastNot,param2);
            this.useCleanUpTimer((this.notCastFadeInTime + this.notCastFadeOutTime + param2) * 1000);
        }
        
        public function hidingCastNot() : *
        {
            this.notCast_mc.alpha = 0;
            this.notCast_mc.visible = false;
            this.INTNotificationDone();
        }
        
        public function INTNotificationDone() : *
        {
            ExternalInterface.call("notificationDone");
            if(this.deadlineTimer != null)
            {
                this.deadlineTimer.stop();
            }
        }
        
        public function hideCastNot(param1:Number) : *
        {
            this.notCastTween = new larTween(this.notCast_mc,"alpha",Cubic.easeIn,NaN,0,this.notCastFadeOutTime,this.hidingCastNot,null,param1);
        }
        
        function frame1() : *
        {
            this.events = new Array();
            this.layout = "fixed";
            this.deadlineTimer = null;
            this.newSkill_mc = null;
            this.fadeTime = 0.25;
            this.regionFadeOutTime = 0.25;
            this.showTime = 2;
            this.beginRegionY = 70;
            this.endRegionY = 110;
            this.beginFightY = 470;
        }
    }
}
