package ui_fla
{
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import flash.utils.Dictionary;
    import flash.events.Event;
    import flash.ui.GameInput;
    import flash.text.TextField;
    import flash.ui.Keyboard;
    import flash.events.KeyboardEvent;
    import flash.events.MouseEvent;
    import flash.system.System;
    import flash.system.Capabilities;
    import flash.net.URLRequest;
    import flash.net.URLLoader;
    
    public dynamic class MainTimeline extends MovieClip
    {
        public var capturedEvents:Dictionary;

        // public var stickHAxis:Number;
        // public var stickVAxis:Number;

        public var previousTextFieldLength:int = 1;
        
        public var keyboard_txt:TextField;

        public var handleSpecialKeys:Boolean = false;

        private var isCapturingMouseWheel:Boolean = false;

        public function MainTimeline()
        {
            super();
            this.capturedEvents = new Dictionary();
            this.addFrameScript(0,this.frame1);
        }

        public function captureEvent(ev:String) : *
        {
            this.capturedEvents[ev] = true;
            // trace("capturing " + ev);
        }

        public function removeEvent(ev:String) : *
        {
            this.capturedEvents[ev] = false;
        }

        public function focusTextField() : *
        {
            stage.focus = this.keyboard_txt;
        }

        private function onMouseWheel() : *
        {
            // Nothing.
        }

        public function captureMouseWheel(capture:Boolean) : *
        {
            if (capture != this.isCapturingMouseWheel)
            {
                if (capture)
                {
                    stage.addEventListener(MouseEvent.MOUSE_WHEEL,this.onMouseWheel);
                }
                else
                {
                    stage.removeEventListener(MouseEvent.MOUSE_WHEEL,this.onMouseWheel);
                }

                this.isCapturingMouseWheel = capture;
            }
        }

        // Throws IllegalOperationError.
        // public function testNet() : *
        // {
        //     var url:URLLoader = new URLLoader();
        //     var request:URLRequest = new URLRequest("https://www.pinewood.team/ee2buildplanner/Scripts/Ascension/ascension.json");

        //     url.addEventListener(Event.COMPLETE, this.onComplete);
        //     url.load(request);
        // }

        // Basically all of these report bogus/useless values.
        // public function reportCapabilities() : *
        // {
        //     trace(Capabilities.hasAudio);
        //     trace(Capabilities.hasIME); // Always false?
        //     trace(Capabilities.hasMP3);
        //     trace(Capabilities.isDebugger);
        //     trace(Capabilities.language);
        //     trace(Capabilities.manufacturer);
            
        //     trace(Capabilities.os); // "RAD Windows"
        //     trace(Capabilities.pixelAspectRatio);
        //     trace(Capabilities.playerType);
            
        //     trace(Capabilities.screenResolutionX); // Not the screen resolution
            
        //     trace(Capabilities.screenResolutionY); // Not the screen resolution
            
        //     trace(Capabilities.serverString);
            
        //     trace(Capabilities.version);
        // }

        public function unfocusTextField() : *
        {
            stage.focus = null;
        }

        public function onEventUp(param1:Number) : Boolean
        {
            return false;
        }

        public function onEventDown(ev:Number) : Boolean
        {
            var captured:Boolean = this.capturedEvents[this.events[ev]] == true;

            if (captured)
            {
                // trace("Captured!");
                ExternalInterface.call("pipInputCaptured", ev);
            }

            return captured;
        }

        public function onKeyUp(ev:KeyboardEvent) : *
        {
            // trace("up");
            ExternalInterface.call("pipKeyUp", ev.keyCode);
        }

        public function onKeyDown(ev:KeyboardEvent) : *
        {
            // trace("key:");
            // trace(ev.keyCode);
            ExternalInterface.call("pipKeyDown", ev.keyCode, ev.shiftKey, ev.ctrlKey, ev.altKey, ev.commandKey);

            if ((ev.ctrlKey || ev.altKey) && this.handleSpecialKeys)
            {
                this.gainFocus();
            }
        }

        private function inputHandler(ev:KeyboardEvent) : *
        {
            // trace("handling down:");
            // trace(ev.keyCode);

            // ExternalInterface.call("pipKeyboardTextFieldCharacterAdded", this.m[ev.keyCode]);
            
            // this.loseFocus();
        }

        private function inputHandlerUp(ev:KeyboardEvent) : *
        {
            // trace("handling up:");
            // trace(ev.keyCode);

            ExternalInterface.call("pipSpecialKeyUp", ev.keyCode);

            this.loseFocus();
        }

        // Does not work.
        // public function copyToClipboard(text:String) : *
        // {
        //     System.setClipboard(text);
        // }

        public function gainFocus() : *
        {
            this.keyboard_txt.addEventListener(KeyboardEvent.KEY_DOWN,this.inputHandler);
            ExternalInterface.call("inputFocus");
        }

        public function loseFocus() : *
        {
            this.keyboard_txt.removeEventListener(KeyboardEvent.KEY_DOWN, this.inputHandler);
            // this.keyboard_txt.removeEventListener(KeyboardEvent.KEY_UP, this.inputHandlerUp);
            ExternalInterface.call("inputFocusLost");
        }

        public function onTextFieldChange(ev:Event) : *
        {
            //trace("change");
            var length:int = this.keyboard_txt.htmlText.length;

            // we know backspace was pressed if the length of the textfield shrunk
            if (length < 1)
            {
                ExternalInterface.call("pipBackspacePressed");
            }
            else // otherwise a character was added
            {
                ExternalInterface.call("pipKeyboardTextFieldCharacterAdded", this.keyboard_txt.htmlText.charAt(length - 1));
            }

            this.keyboard_txt.htmlText = "a"; // reset textfield to 1 char
            this.keyboard_txt.setSelection(1, 1); // return caret to the end
        }

        // make sure that the selection caret is always at the end (so the arrow keys being pressed don't interfere with how we capture key events)
        public function onFrameEnter() : *
        {
            this.keyboard_txt.setSelection(1, 1);

            // Nice try.
            // if (ASnative(800, 2)(1)) {
            //     trace("test");
            // }
        }
        
        public function onEventInit() : *
        {
        }

        // private function onMouseClick(ev:MouseEvent) : *
        // {
        //     trace(ev.buttonDown);
        //     trace("ctrl:");
        //     trace(ev.ctrlKey);
        // }
        
        private function frame1() : *
        {
            this.uiScaling = 1;
            this.events = new Array("IE ToggleInGameMenu","IE UIAccept","IE UICancel","IE UIUp","IE UIDown","IE UIShowInfo","IE UITooltipUp","IE UITooltipDown","IE UILeft","IE UIRight","IE UIEndTurn","IE UIHotBarPrev","IE UIHotBarNext","IE UIBack","IE ControllerContextMenu","IE UITabPrev","IE UITabNext","IE UICreationTabPrev","IE UICreationTabNext","IE UIToggleEquipment","IE UIEditCharacter","IE UIStartGame","IE ContextMenu","IE UIShowTooltip","IE UIMessageBoxX","IE UIFilter","IE UICompareItems","IE UITakeAll","IE UIToggleMultiselection","IE Combine","IE UISelectSlot","IE UISelectSlot1","IE UISelectSlot2","IE UISelectSlot3","IE UISelectSlot4","IE UISelectSlot5","IE UISelectSlot6","IE UISelectSlot7","IE UISelectSlot8","IE UISelectSlot9","IE UISelectSlot0","IE UIDialogTextUp","IE UIDialogTextDown","IE ToggleDiplomacyPanel","IE ToggleInventory","IE UIToggleHelmet","IE UICreateProfile","IE UISend","IE UITradeBalance","IE UISelectSlot11","IE UISelectSlot12","IE UIToggleActions","IE UIMarkWares","IE Action1","IE GMSetHealth","IE UICreationEditClassPrev","IE UICreationEditClassNext","IE Ping","IE UIMapRemoveMarker","IE ToggleJournal","IE ToggleMap","IE UIModPrev","IE UIModNext","IE UIAddonUp","IE UIAddonDown","IE UIPaste","IE UICopy","IE UIMessageBoxB","IE UIMessageBoxA","IE UIMessageBoxY","IE UISetSlot","IE PrevObject","IE NextObject","IE PanelSelect","IE UISwitchLeft","IE UISwitchRight","IE UISelectChar","IE UISelectChar1","IE UISelectChar2","IE UISelectChar3","IE UISelectChar4","IE UIDelete","IE UIRefresh","IE ConnectivityMenu","IE UISwitchUp","IE UISwitchDown","IE FlashRightMouse","IE UIRemovePoints","IE UIAddPoints","IE UITradeSwitchWindow","IE CycleCharactersPrev","IE CycleCharactersNext","IE UIToggleTutorials","IE UIDeleteProfile","IE ToggleHomestead");
            this.layout = "fixed";
            this.anchorId = "pipInput";
            this.anchorPos = "center";
            this.anchorTPos = "center";
            this.anchorTarget = "screen";
            this.leftUI = false;
            this.stickHAxis = 0;
            this.stickVAxis = 0;

            this.m = new Array(256);

            // keyboard listeners
            this.keyboard_txt.htmlText = "a";
            this.keyboard_txt.addEventListener(KeyboardEvent.KEY_DOWN, this.onKeyDown);
            this.keyboard_txt.addEventListener("keyUp", this.onKeyUp);
            
            this.keyboard_txt.addEventListener(KeyboardEvent.KEY_UP,this.inputHandlerUp);

			this.keyboard_txt.addEventListener(Event.CHANGE, this.onTextFieldChange);
            addEventListener(Event.ENTER_FRAME, this.onFrameEnter);

            // stage.addEventListener(MouseEvent.MOUSE_MOVE, this.onMouseClick);
        }
    }
}
