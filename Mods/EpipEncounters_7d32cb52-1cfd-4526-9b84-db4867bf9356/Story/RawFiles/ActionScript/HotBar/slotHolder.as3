 
package hotBar_fla
{
    import LS_Classes.larTween;
    import LS_Classes.textEffect;
    import fl.motion.easing.Cubic;
    import flash.display.MovieClip;
    import flash.events.MouseEvent;
    import flash.external.ExternalInterface;
    import flash.geom.Point;
    import flash.geom.Rectangle;
    
    public dynamic class slotHolder_14 extends MovieClip
    {
        
        
        public var activeSkill_mc:MovieClip;
        
        public var iggy_slots:MovieClip;
        
        public var secondIggySlots:MovieClip;
        
        public var thirdIggySlots:MovieClip;
        
        public var fourthIggySlots:MovieClip;
        
        public var fifthIggySlots:MovieClip;
        
        public var sel_mc:MovieClip;
        
        public var slotContainer_mc:MovieClip;
        
        public var slot_array:Array;
        
        public var rowOrder_array:Array;
        
        public var tooltipSlot:Number;
        
        public var hasTooltip:Boolean;
        
        public var currentHLSlot:Number;
        
        public var activeSkillBarNr:Number;
        
        public var activeSkillSlotNr:Number;
        
        public var base:MovieClip;
        
        public var cellWidth:Number;
        
        public var cellHeight:Number;
        
        public var cellSpacing:Number;
        
        public var timeline:larTween;
        
        public var startDragDiff:Number;
        
        public var tutDragDiff:Number;
        
        public var startDragX:Number;
        
        public var startDragY:Number;
        
        public var downSlot:Number;
        
        public var rowHeight:Number;
        
        public var currentMouseY:Number;
        
        public function slotHolder_14()
        {
            super();
            addFrameScript(0,this.frame1);
        }

        public function setHighlightedSlot(index:Number) : *
        {
            this.clearCurrentHL();
            this.currentHLSlot = index;

            var slot:MovieClip = this.getSlot(this.currentHLSlot);

            if (slot)
            {
                slot.onMouseOver();

                this.showSlotMCTooltip(slot);

                if (slot.isEnabled && slot.inUse || this.base.isDragging)
                {
                    this.sel_mc.hl_mc.alpha = 0;
                    this.sel_mc.hl_mc.x = slot.x;
                    this.sel_mc.hl_mc.y = slot.y;
                    this.sel_mc.hl_mc.visible = true;
                    if (this.timeline)
                    {
                        this.timeline.stop();
                    }
                    this.timeline = new larTween(this.sel_mc.hl_mc,"alpha",Cubic.easeOut,NaN,0.3,0.2);
                }
            }
        }
        
        public function onCheckSlotsOver(param1:MouseEvent) : *
        {
            var _loc3_:MovieClip = null;
            var _loc2_:Number = this.getSlotOnXY(mouseX,mouseY);
            if(this.currentHLSlot != _loc2_)
            {
                this.clearCurrentHL();
                this.currentHLSlot = _loc2_;
                _loc3_ = this.getSlot(this.currentHLSlot);
                if(_loc3_)
                {
                _loc3_.onMouseOver();
                this.showSlotMCTooltip(_loc3_);
                if(_loc3_.isEnabled && _loc3_.inUse || this.base.isDragging)
                {
                    this.sel_mc.hl_mc.alpha = 0;
                    this.sel_mc.hl_mc.x = _loc3_.x;
                    this.sel_mc.hl_mc.y = _loc3_.y;
                    this.sel_mc.hl_mc.visible = true;
                    if(this.timeline)
                    {
                        this.timeline.stop();
                    }
                    this.timeline = new larTween(this.sel_mc.hl_mc,"alpha",Cubic.easeOut,NaN,0.3,0.2);
                }
                }
            }
        }
        
        public function startDragging(param1:MouseEvent) : *
        {
            if(!this.base.hotbar_mc.lockButton_mc.bIsLocked || this.base.inSkillPane)
            {
                if(this.startDragX + this.startDragDiff < stage.mouseX || this.startDragY + this.startDragDiff < stage.mouseY || this.startDragX - this.startDragDiff > stage.mouseX || this.startDragY - this.startDragDiff > stage.mouseY)
                {
                stage.removeEventListener(MouseEvent.MOUSE_MOVE,this.startDragging);
                ExternalInterface.call("startDragging",this.downSlot);
                this.downSlot = -1;
                }
            }
            else if(this.startDragX + this.tutDragDiff < stage.mouseX || this.startDragY + this.tutDragDiff < stage.mouseY || this.startDragX - this.tutDragDiff > stage.mouseX || this.startDragY - this.tutDragDiff > stage.mouseY)
            {
                stage.removeEventListener(MouseEvent.MOUSE_MOVE,this.startDragging);
                ExternalInterface.call("showLockTut");
            }
        }

        public function onSlotsRightClick(ev:MouseEvent) : *
        {
            // only pull up context menu if we're on a slot,
            // but not using any (we want to cancel using instead)
            if (this.currentHLSlot >= 0 && !this.isShowingActiveSkill())
            {
                ExternalInterface.call("pipSlotRightClicked", this.currentHLSlot);
            }
        }
        
        public function onSlotsOver(_loc1_:MouseEvent) : *
        {
            addEventListener(MouseEvent.ROLL_OUT,this.onSlotsOut);
            addEventListener(MouseEvent.MOUSE_DOWN,this.onSlotsDown);
            // addEventListener(MouseEvent.MOUSE_MOVE,this.onCheckSlotsOver);
            addEventListener(MouseEvent.MOUSE_UP,this.onSlotsUp);

            if (!this.isShowingActiveSkill())
            {
                addEventListener(MouseEvent.RIGHT_CLICK,this.onSlotsRightClick);
            }
        }

        public function isShowingActiveSkill() : *
        {
            return this.activeSkill_mc.visible;
        }
        
        public function onSlotsOut(param1:MouseEvent) : *
        {
            this.clearCurrentHL();
            this.clearSlotTooltip();
            this.currentHLSlot = -1;
        }
        
        public function onSlotsDown(param1:MouseEvent) : *
        {
            ExternalInterface.call("inputFocus");
            var _loc2_:MovieClip = this.getSlot(this.currentHLSlot);
            if(!this.base.isDragging && _loc2_ && _loc2_.inUse)
            {
                this.downSlot = this.currentHLSlot;
                this.startDragX = stage.mouseX;
                this.startDragY = stage.mouseY;
                stage.addEventListener(MouseEvent.MOUSE_MOVE,this.startDragging);
            }
        }
        
        public function onSlotsUp(param1:MouseEvent) : *
        {
            var _loc2_:MovieClip = null;
            ExternalInterface.call("inputFocusLost");
            if(this.base.isDragging)
            {
                if(this.currentHLSlot >= 0 && (!this.base.hotbar_mc.lockButton_mc.bIsLocked || this.base.inSkillPane || this.base.hotbar_mc.lockButton_mc.bIsLocked && !this.slot_array[this.currentHLSlot].inUse))
                {
                ExternalInterface.call("stopDragging",this.currentHLSlot);
                }
                else
                {
                ExternalInterface.call("cancelDragging");
                }
            }
            if(this.currentHLSlot == this.downSlot)
            {
                this.downSlot = -1;
                stage.removeEventListener(MouseEvent.MOUSE_MOVE,this.startDragging);
                _loc2_ = this.getSlot(this.currentHLSlot);
                if(_loc2_ && _loc2_.inUse)
                {
                    _loc2_.onClick(null);
                    removeEventListener(MouseEvent.RIGHT_CLICK,this.onSlotsRightClick);
                }
            }
            ExternalInterface.call("slotUpEnd");
        }
        
        public function updateSlots() : *
        {
            var _loc5_:Number = NaN;
            var _loc6_:Number = NaN;
            var _loc7_:String = null;
            var _loc8_:Boolean = false;
            var _loc9_:Number = NaN;
            var _loc10_:Number = NaN;
            var _loc11_:Boolean = false;
            var _loc12_:MovieClip = null;
            var _loc1_:MovieClip = root as MovieClip;
            var _loc2_:Array = _loc1_.slotUpdateList;
            var _loc3_:Array = new Array();
            var _loc4_:uint = 0;
            while(_loc4_ < _loc2_.length)
            {
                if(_loc2_[_loc4_] != undefined)
                {
                _loc5_ = Number(_loc2_[_loc4_++]);
                _loc6_ = Number(_loc2_[_loc4_++]);
                _loc7_ = String(_loc2_[_loc4_++]);
                _loc8_ = Boolean(_loc2_[_loc4_++]);
                _loc9_ = Number(_loc2_[_loc4_++]);
                _loc10_ = Number(_loc2_[_loc4_++]);
                _loc11_ = Boolean(_loc2_[_loc4_++]);
                this.setSlot(_loc5_,_loc7_,_loc8_,_loc9_,_loc10_,_loc6_);
                if(_loc12_ = _loc1_.hotbar_mc.sourceList.getAt(_loc5_))
                {
                    _loc12_.visible = _loc11_;
                }
                _loc3_.push(_loc5_);
                }
            }
            _loc1_.slotUpdateList = new Array();
            this.updateClearOldSlots();
        }
        
        public function updateSlotData() : *
        {
            var _loc3_:Number = NaN;
            var _loc4_:MovieClip = null;
            var _loc5_:Boolean = false;
            var _loc1_:Array = this.base.slotUpdateDataList;
            var _loc2_:uint = 0;
            for(; _loc2_ < _loc1_.length; _loc2_ += 3)
            {
                if(_loc1_[_loc2_] == undefined)
                {
                continue;
                }
                _loc3_ = Number(_loc1_[_loc2_]);
                _loc4_ = this.getSlot(_loc3_);
                _loc5_ = Boolean(_loc1_[_loc2_ + 2]);
                if(!_loc4_)
                {
                continue;
                }
                switch(Number(_loc1_[_loc2_ + 1]))
                {
                case 0:
                    _loc4_.isEnabled = _loc5_;
                    _loc4_.disable_mc.visible = !_loc4_.isEnabled;
                    break;
                case 1:
                    this.setSlotPreviewEnabledMC(_loc4_,_loc5_);
                    break;
                case 2:
                    this.setSlotCoolDownMC(_loc4_,Number(_loc1_[_loc2_ + 2]));
                    break;
                case 3:
                    this.setSlotAmountMC(_loc4_,Number(_loc1_[_loc2_ + 2]));
                    break;
                }
            }
            this.base.slotUpdateDataList = new Array();
        }
        
        public function setSlotPreviewEnabledMC(param1:MovieClip, param2:Boolean) : *
        {
            if(param1 != null)
            {
                param1.unavailable_mc.visible = !param2;
            }
        }
        
        public function setAllSlotsPreviewEnabled(param1:Boolean) : *
        {
            var _loc3_:MovieClip = null;
            var _loc2_:uint = 0;
            while(_loc2_ < this.slot_array.length)
            {
                _loc3_ = this.slot_array[_loc2_];
                if(_loc3_ != null)
                {
                _loc3_.unavailable_mc.visible = !param1;
                }
                _loc2_++;
            }
        }
        
        public function setSlotCoolDownMC(param1:MovieClip, param2:Number) : *
        {
            if(param1 != null)
            {
                param1.setCoolDown(param2);
            }
        }
        
        public function showActiveSkill(param1:Number) : *
        {
            var _loc2_:MovieClip = this.getSlot(param1);
            if(_loc2_)
            {
                this.activeSkill_mc.x = _loc2_.x + 25;
                this.activeSkill_mc.y = _loc2_.y + 25;
                this.activeSkill_mc.visible = true;
                this.activeSkill_mc.play();
                this.activeSkillBarNr = this.base.currentBar;
                this.activeSkillSlotNr = param1;
            }
            else
            {
                this.activeSkill_mc.visible = false;
                this.activeSkill_mc.stop();
                this.activeSkillBarNr = -1;
                this.activeSkillSlotNr = -1;
                
                addEventListener(MouseEvent.RIGHT_CLICK,this.onSlotsRightClick);
            }
        }
        
        public function setAllSlotsEnabled(param1:Boolean) : *
        {
            var _loc3_:MovieClip = null;
            var _loc2_:uint = 0;
            while(_loc2_ < this.slot_array.length)
            {
                _loc3_ = this.slot_array[_loc2_];
                if(_loc3_ != null)
                {
                _loc3_.isEnabled = param1;
                _loc3_.disable_mc.visible = !param1;
                }
                _loc2_++;
            }
        }
        
        public function setSlotEnabled(param1:Number, param2:Boolean) : *
        {
            var _loc3_:MovieClip = this.getSlot(param1);
            if(_loc3_ != null)
            {
                _loc3_.isEnabled = param2;
                _loc3_.disable_mc.visible = !param2;
            }
        }
        
        public function clearCurrentHL() : *
        {
            var _loc1_:MovieClip = null;
            if(this.currentHLSlot != -1)
            {
                _loc1_ = this.getSlot(this.currentHLSlot);
                if(_loc1_)
                {
                _loc1_.onMouseOut();
                this.timeline = new larTween(this.sel_mc.hl_mc,"alpha",Cubic.easeOut,NaN,0,0.1,this.hideHL);
                }
            }
        }
        
        public function hideHL() : *
        {
            this.sel_mc.hl_mc.visible = false;
        }
        
        public function clearAll() : *
        {
            var _loc1_:uint = 0;
            while(_loc1_ < this.slot_array.length)
            {
                this.clearSlotMC(this.slot_array[_loc1_]);
                _loc1_++;
            }
        }
        
        public function initSlot() : *
        {
            var _loc3_:MovieClip = null;
            var _loc1_:Array = textEffect.createStrokeFilter(1050888,1.4,1,1.8,3);
            var _loc2_:uint = 0;

            while(_loc2_ < 145)
            {
                _loc3_ = new Slot(_loc2_);
                _loc3_.oldCD = 0;
                _loc3_.refreshSlot_mc.visible = false;
                _loc3_.refreshSlot_mc.stop();
                _loc3_.name = "slot" + _loc2_;
                _loc3_.id = _loc2_;
                _loc3_.x = _loc2_ * (this.cellWidth + this.cellSpacing);
                _loc3_.y = 0;
                _loc3_.inUse = false;
                _loc3_.isEnabled = false;
                _loc3_.amount_mc.visible = false;
                _loc3_.disable_mc.visible = false;
                _loc3_.unavailable_mc.visible = false;
                _loc3_.cd_mc.rot = -90;
                _loc3_.cd_mc.cellSize = 50;
                _loc3_.cd_mc.visible = false;
                this.slot_array.push(_loc3_);
                this.slotContainer_mc.addChild(_loc3_);
                _loc3_.amount_mc.filters = _loc1_;
                if(_loc2_ > 27)
                {
                _loc3_.x = (_loc2_ - 28) * (this.cellWidth + this.cellSpacing);
                _loc3_.y = -this.cellWidth;
                }
                _loc2_++;
                if(_loc2_ == 27)
                {
                    this.setChildIndex(this.slotContainer_mc,this.numChildren - 1);
                    this.setChildIndex(this.activeSkill_mc,this.numChildren - 1);
                    this.setChildIndex(this.sel_mc,this.numChildren - 1);

                    this.iggy_slots.scrollRect = new Rectangle(0,0,1680,100);
                }
            }
            this.activeSkill_mc.visible = false;
        }
        
        public function updateClearOldSlots() : *
        {
            var _loc1_:MovieClip = root as MovieClip;
            var _loc2_:uint = 0;
            while(_loc2_ < this.slot_array.length)
            {
                if(this.slot_array[_loc2_].isUpdated)
                {
                this.slot_array[_loc2_].isUpdated = false;
                }
                else
                {
                this.clearSlotMC(this.slot_array[_loc2_]);
                // _loc1_.hotbar_mc.sourceList.getAt(_loc2_).visible = false;
                }
                _loc2_++;
            }
        }

        public function pipSetSlot(id:Number, tooltip:String, enabled:Boolean, inUse:Boolean, handle:Number, slotType:Number, amount:Number) : *
        {
            var slot:MovieClip = null;

            if(slot = this.getSlot(id))
            {
                slot.inUse = inUse;
                slot.tooltip = tooltip;
                slot.isEnabled = enabled;
                slot.disable_mc.visible = !enabled;
                slot.type = slotType;
                slot.handle = handle;

                if(this.tooltipSlot == id)
                {
                    this.showSlotMCTooltip(slot);
                }

                this.setSlotAmountMC(slot,amount);

                slot.isUpdated = true;
            }
        }
        
        public function setSlot(param1:Number, param2:String, param3:Boolean, param4:Number, param5:Number, param6:Number) : *
        {
            var _loc7_:MovieClip = null;
            if(_loc7_ = this.getSlot(param1))
            {
                _loc7_.inUse = true;
                _loc7_.tooltip = param2;
                _loc7_.isEnabled = param3;
                _loc7_.disable_mc.visible = !param3;
                _loc7_.isUpdated = true;
                _loc7_.type = param5;
                _loc7_.handle = param4;
                if(this.tooltipSlot == param1)
                {
                this.showSlotMCTooltip(_loc7_);
                }
                if(_loc7_.oldCD != 0)
                {
                _loc7_.oldCD = 0;
                _loc7_.setCoolDown(0);
                }
                this.setSlotAmountMC(_loc7_,param6);
            }
        }
        
        public function getSlot(param1:Number) : MovieClip
        {
            if(param1 >= 0 && param1 < this.slot_array.length)
            {
                return this.slot_array[param1];
            }
            return null;
        }
        
        public function getSlotOnXY(param1:Number, param2:Number) : Number
        {
            var _loc3_:int = int(param1 / (this.cellWidth + this.cellSpacing));
            this.currentMouseY = param2;
            if(param2 < 0)
            {
                _loc3_ += this.rowOrder_array[Math.ceil(-param2 / this.rowHeight)] * 29;
            }
            else
            {
                _loc3_ += this.rowOrder_array[0] * 29;
            }
            if(param1 > (this.cellWidth + this.cellSpacing) * _loc3_ + this.cellWidth)
            {
                _loc3_ = -1;
            }
            return _loc3_;
        }
        
        public function showSlotMCTooltip(param1:MovieClip) : *
        {
            var _loc2_:Point = null;
            if(param1 && param1.id != this.tooltipSlot) // PIP
            {
                _loc2_ = this.base.hotbar_mc.getGlobalPositionOfMC(param1);
                if(param1.type == 1 || param1.type == 4)
                {
                    ExternalInterface.call("showSkillTooltip",param1.handle,param1.tooltip,_loc2_.x - root.x,_loc2_.y - root.y,param1.width,param1.height);
                    this.hasTooltip = true;
                    this.tooltipSlot = this.currentHLSlot;
                }
                else if(param1.type == 2)
                {
                    ExternalInterface.call("showItemTooltip",param1.handle,_loc2_.x - root.x,_loc2_.y - root.y,param1.width,param1.height,-1,"none");
                    this.hasTooltip = true;
                    this.tooltipSlot = this.currentHLSlot;
                }
                else if(param1.tooltip != null && param1.tooltip != "")
                {
                    ExternalInterface.call("showTooltip",param1.tooltip);
                    this.hasTooltip = true;
                    this.tooltipSlot = this.currentHLSlot;
                }
                else
                {
                    this.clearSlotTooltip();
                }
            }
        }
        
        public function clearSlotTooltip() : *
        {
            if(this.hasTooltip)
            {
                ExternalInterface.call("hideTooltip");
                this.hasTooltip = false;
                this.tooltipSlot = -1;
            }
        }
        
        public function clearSlotMC(param1:MovieClip) : *
        {
            if(param1 != null)
            {
                if(this.tooltipSlot == param1.id)
                {
                this.clearSlotTooltip();
                }
                param1.refreshSlot_mc.visible = false;
                param1.refreshSlot_mc.stop();
                param1.inUse = false;
                param1.tooltip = "";
                param1.amount_mc.amount_txt.htmlText = "";
                param1.amount_mc.visible = false;
                param1.amount = 0;
                param1.isEnabled = false;
                if(param1.oldCD != 0)
                {
                param1.oldCD = 0;
                param1.setCoolDown(0);
                }
                param1.cd_mc.visible = false;
                param1.unavailable_mc.visible = false;
                param1.disable_mc.visible = false;
                param1.disable_mc.alpha = 1;
                param1.type = 0;
                param1.handle = 0;
                if(this.activeSkillBarNr == this.base.currentBar && this.activeSkillSlotNr == param1.id)
                {
                this.showActiveSkill(-1);
                }
            }
        }
        
        public function setSlotAmount(param1:Number, param2:Number) : *
        {
            var _loc3_:MovieClip = this.getSlot(param1);
            if(_loc3_ != null)
            {
                this.setSlotAmountMC(_loc3_,param2);
            }
        }
        
        public function setSlotAmountMC(param1:MovieClip, param2:Number) : *
        {
            if(param1 != null)
            {
                param1.amount = param2;
                if(param2 <= 1)
                {
                param1.amount_mc.amount_txt.htmlText = "";
                param1.amount_mc.visible = false;
                }
                else
                {
                param1.amount_mc.amount_txt.htmlText = param2;
                param1.amount_mc.visible = true;
                }
            }
        }
        
        function frame1() : *
        {
            this.slot_array = new Array();
            this.rowOrder_array = new Array();
            this.rowOrder_array[0] = 0;
            this.rowOrder_array[1] = 1;
            this.rowOrder_array[2] = 2;
            this.rowOrder_array[3] = 3;
            this.rowOrder_array[4] = 4;
            this.tooltipSlot = -1;
            this.hasTooltip = false;
            this.currentHLSlot = -1;
            this.activeSkillBarNr = -1;
            this.activeSkillSlotNr = -1;
            this.base = root as MovieClip;
            this.cellWidth = 50;
            this.cellHeight = 50;
            this.cellSpacing = 8;
            this.sel_mc.mouseEnabled = false;
            this.sel_mc.mouseChildren = false;
            this.startDragDiff = 10;
            this.tutDragDiff = 50;
            this.startDragX = 0;
            this.startDragY = 0;
            this.downSlot = -1;
            this.rowHeight = 60;
            this.currentMouseY = 0;
            addEventListener(MouseEvent.ROLL_OVER,this.onSlotsOver);
        }
    }
}
