package
{
    import LS_Classes.larTween;
    import fl.motion.easing.Linear;
    import fl.motion.easing.Sine;
    import flash.display.MovieClip;
    import flash.events.MouseEvent;
    import flash.external.ExternalInterface;
    import flash.geom.Point;
    import flash.geom.Rectangle;
    import flash.text.TextField;
    import flash.geom.ColorTransform;
    
    public dynamic class playerInfo extends MovieClip
    {
        
        
        public var abilityPoints_mc:MovieClip;
        
        public var armor_mc:armorBars;
        
        public var arrow_mc:MovieClip;
        
        public var attrPoints_mc:MovieClip;
        
        public var avatarCrown_mc:MovieClip;
        
        public var chain1_mc:MovieClip;
        
        public var chain2_mc:MovieClip;
        
        public var currentActionState_mc:MovieClip;
        
        public var dead_mc:MovieClip;
        
        public var dis_mc:MovieClip;
        
        public var eqState_mc:MovieClip;
        
        public var frame_mc:MovieClip;
        
        public var guiStatus_txt:TextField;
        
        public var hp_mc:HPBar;
        
        public var icon_mc:MovieClip;
        
        public var linkContainer_mc:MovieClip;
        
        public var lvlUp_mc:MovieClip;
        
        public var magicArmor_mc:armorBars;
        
        public var roll_mc:MovieClip;
        
        public var sourceHolder_mc:MovieClip;
        
        public var spacing_mc:MovieClip;
        
        public var statusHolder_mc:MovieClip;
        
        public var summonContainer_mc:MovieClip;
        
        public var talentPoints_mc:MovieClip;
        
        public const startDragDiff = 4;
        
        public var mousePosX:Number;
        
        public var mousePosY:Number;
        
        public var base:MovieClip;
        
        public var chainTweenTime:Number;
        
        public var draggingPlayer:Boolean;
        
        public var chainIsOut:Boolean;
        
        public var linkEnders:Array;
        
        public var enableMouseClicking:Boolean;
        
        public var chain1Func:larTween;
        
        public var chain2Func:larTween;
        
        public var hadDown:Boolean;
        
        public var startedChainDangle:Boolean;
        
        public const chainDangleYOut:Number = 140;
        
        public const chainDangleYIn:Number = 100;
        
        public const dangleTime:Number = 0.3;

        private var _inCombat:Boolean = false;
        private var _statusesHovered:Boolean = false;
        
        public function playerInfo()
        {
            super();
            addFrameScript(0,this.frame1);
        }
        
        public function onOut(param1:MouseEvent) : *
        {
            this.showHL(false);
            this.sourceHolder_mc.showHL(false);
            ExternalInterface.call("hideTooltip");
            ExternalInterface.call("onCharOut",this.characterHandle);
            this.hasTooltip = false;
            this.hadDown = false;
        }

        public function SetInCombat(inCombat:Boolean) : *
        {
            this._inCombat = inCombat;

            this.UpdateStatusOpacity(this._statusesHovered);
        }

        private function UpdateStatusOpacity(hovered:Boolean) : *
        {
            var alpha:Number = (root as MovieClip).STATUS_HOLDER_OPACITY;
            var color:ColorTransform = new ColorTransform(0.99, 0.99, 0.99, alpha, 0, 0, 0, 0);

            if (hovered || !this._inCombat || alpha > 0.99)
            {
                this.statusHolder_mc.transform.colorTransform = new ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);
            }
            else
            {
                this.statusHolder_mc.transform.colorTransform = color;
            }
        }
        
        public function disableMouseClicking() : *
        {
            this.frame_mc.removeEventListener(MouseEvent.MOUSE_UP,this.onIconUp,false);
            this.frame_mc.removeEventListener(MouseEvent.MOUSE_DOWN,this.onDown);

            // PIP
            this.frame_mc.removeEventListener(MouseEvent.RIGHT_CLICK,this.onRightClick);
        }
        
        public function onOver(param1:MouseEvent) : *
        {
            this.showHL(true);
            this.sourceHolder_mc.showHL(true);
            var _loc2_:Point = new Point(0,0);
            _loc2_ = this.frame_mc.localToGlobal(_loc2_);
            var _loc3_:Number = 61;
            ExternalInterface.call("showCharTooltip",this.characterHandle,_loc2_.x,_loc2_.y + _loc3_,this.frame_mc.width,this.frame_mc.height,"rightTop");
            ExternalInterface.call("onCharOver",this.characterHandle);
            this.hasTooltip = true;
            if(this.enableMouseClicking)
            {
                this.frame_mc.addEventListener(MouseEvent.MOUSE_UP,this.onIconUp,false);
                this.frame_mc.addEventListener(MouseEvent.MOUSE_DOWN,this.onDown);

                // PIP
                this.frame_mc.addEventListener(MouseEvent.RIGHT_CLICK,this.onRightClick);
            }
        }
        
        public function hideArrow() : *
        {
            this.arrow_mc.visible = false;
        }
        
        public function showHL(param1:Boolean) : *
        {
            var _loc3_:* = undefined;
            var _loc2_:Boolean = false;
            if(this.base.isDragging)
            {
                _loc2_ = true;
            }
            this.frame_mc.hl_mc.visible = param1;
            this.frame_mc.bg_mc.visible = !param1;
            if(this.linkEnders.length > 0)
            {
                for each(_loc3_ in this.linkEnders)
                {
                _loc3_.hl_mc.visible = param1;
                _loc3_.bg_mc.visible = !param1;
                }
            }
            if(!this.base.isDragging && this.arrow_mc.visible)
            {
                _loc2_ = true;
                param1 = false;
            }
            if(_loc2_)
            {
                this.fadeArrow(param1);
            }
            this.sourceHolder_mc.showHL(param1);
        }
        
        public function fadeArrow(param1:Boolean) : *
        {
            var _loc2_:Number = !!param1 ? Number(1) : Number(0);
            var _loc3_:Function = null;
            if(param1)
            {
                this.arrow_mc.visible = true;
            }
            else
            {
                _loc3_ = this.hideArrow;
            }
            var _loc4_:larTween = new larTween(this.arrow_mc,"alpha",Linear.easeNone,this.arrow_mc.alpha,_loc2_,0.01,_loc3_);
        }
        
        // lol accidentally overwrote this. Too bad it doesn't work anymore.
        public function onRightClick(param1:MouseEvent) : *
        {
            ExternalInterface.call("openCharInventory",this.characterHandle);
        }
        
        public function onDown(param1:MouseEvent) : *
        {
            this.frame_mc.addEventListener(MouseEvent.MOUSE_UP,this.onIconUp,false);
            this.hadDown = true;
            if(this.controlled && this.base.allowDragging && !this.base.isDragging)
            {
                addEventListener(MouseEvent.MOUSE_MOVE,this.dragging);
                this.mousePosX = stage.mouseX;
                this.mousePosY = stage.mouseY;
            }
        }
        
        public function dragging(param1:MouseEvent) : *
        {
            if(this.mousePosX + this.startDragDiff < stage.mouseX || this.mousePosX - this.startDragDiff > stage.mouseX || this.mousePosY + this.startDragDiff < stage.mouseY || this.mousePosY - this.startDragDiff > stage.mouseY)
            {
                this.base.startDragging(this.id);
                removeEventListener(MouseEvent.MOUSE_MOVE,this.dragging);
            }
        }

        public function onRightClick(param1:MouseEvent) : *
        {
            ExternalInterface.call("pipRequestContextMenu", "playerInfoPlayerPortrait", stage.mouseX, stage.mouseY, this.characterHandle);
        }
        
        public function onIconUp(param1:MouseEvent) : *
        {
            removeEventListener(MouseEvent.MOUSE_MOVE,this.dragging);
            this.frame_mc.removeEventListener(MouseEvent.MOUSE_UP,this.onIconUp,false);
            if((root as MovieClip).isDragging)
            {
                ExternalInterface.call("stopDragging",this.characterHandle);
            }
            else if(!this.isBeingDragged && !this.select && this.hadDown)
            {
                this.hadDown = false;
                ExternalInterface.call("PlaySound","UI_Game_Sel");
                ExternalInterface.call("charSel",this.characterHandle);
                this.base.addLinkers();
            }
            this.fadeArrow(false);
        }
        
        public function onDoubleClick(param1:MouseEvent) : *
        {
            ExternalInterface.call("centerCamOnCharacter",this.characterHandle);
            this.base.addLinkers();
        }
        
        public function setHPBar(param1:Number, param2:Boolean) : *
        {
            this.hp_mc.setBar(param1,param2);
            if(param1 > 0 && this.dead_mc.visible)
            {
                this.dead_mc.visible = false;
            }
            else if(param1 <= 0 && !this.dead_mc.visible)
            {
                this.dead_mc.visible = true;
            }
        }
        
        public function setHPColour(param1:uint) : *
        {
            this.hp_mc.setBarColour(param1);
        }
        
        public function setSourcePoints(param1:Number, param2:Number) : *
        {
            if(param1 < 0)
            {
                param1 = 0;
            }
            if(param2 < 0)
            {
                param2 = 0;
            }
            this.sourceHolder_mc.maxSourcePoints = param2;
            this.sourceHolder_mc.activateSourcePoints(param1);
            this.alterSpacing();
        }
        
        public function stopChainTweens() : *
        {
            if(this.chain1Func)
            {
                this.chain1Func.stop();
                this.chain1Func = null;
            }
            if(this.chain2Func)
            {
                this.chain2Func.stop();
                this.chain2Func = null;
            }
        }
        
        public function rollOutChain() : *
        {
            if(!this.chainIsOut)
            {
                this.stopChainTweens();
                this.chain1Func = new larTween(this.chain1_mc,"y",Sine.easeOut,this.chain1_mc.y,this.chainYOut,this.chainTweenTime);
                this.chain2Func = new larTween(this.chain2_mc,"y",Sine.easeOut,this.chain2_mc.y,this.chainYOut,this.chainTweenTime);
                this.chainIsOut = true;
            }
        }
        
        public function rollUpChain() : *
        {
            if(this.chainIsOut)
            {
                this.stopChainTweens();
                this.chain1Func = new larTween(this.chain1_mc,"y",Sine.easeOut,this.chain1_mc.y,this.chainYIn,this.chainTweenTime);
                this.chain2Func = new larTween(this.chain2_mc,"y",Sine.easeOut,this.chain2_mc.y,this.chainYIn,this.chainTweenTime);
                this.chainIsOut = false;
            }
        }
        
        public function stopDangleChain() : *
        {
            if(this.chainIsOut)
            {
                this.chainIsOut = !this.chainIsOut;
                this.rollOutChain();
            }
            else
            {
                this.chainIsOut = !this.chainIsOut;
                this.rollUpChain();
            }
            this.startedChainDangle = false;
        }
        
        public function startDangleChain() : *
        {
            this.startedChainDangle = true;
            this.showSpace();
            this.startDangleChainDown();
        }
        
        public function startDangleChainDown() : *
        {
            this.stopChainTweens();
            this.chain1Func = new larTween(this.chain1_mc,"y",Sine.easeIn,this.chain1_mc.y,this.chainDangleYOut,this.dangleTime,this.startDangleChainUp);
            this.chain2Func = new larTween(this.chain2_mc,"y",Sine.easeIn,this.chain2_mc.y,this.chainDangleYOut,this.dangleTime);
        }
        
        public function startDangleChainUp() : *
        {
            this.stopChainTweens();
            this.chain1Func = new larTween(this.chain1_mc,"y",Sine.easeOut,this.chain1_mc.y,this.chainDangleYIn,this.dangleTime,this.startDangleChainDown);
            this.chain2Func = new larTween(this.chain2_mc,"y",Sine.easeOut,this.chain2_mc.y,this.chainDangleYIn,this.dangleTime);
        }
        
        public function showLongChain() : *
        {
            this.showSpace();
            this.chain1_mc.scrollRect = new Rectangle(0,0,18,210);
            this.chain2_mc.scrollRect = new Rectangle(0,0,18,210);
        }
        
        public function alterSpacing(param1:Number = 1) : *
        {
            var _loc2_:Number = (139 + this.sourceHolder_mc.getHeight() - 18) * param1;
            if(this.spacing_mc.height != _loc2_)
            {
                this.spacing_mc.height = _loc2_;
            }
            this.linkContainer_mc.y = this.spacing_mc.height - 6;
        }
        
        public function showSpace() : *
        {
            this.spacing_mc.height = 300;
        }
        
        public function resetAddSpaceAnim() : *
        {
            if(this.startedChainDangle)
            {
                this.stopDangleChain();
            }
            this.chain1_mc.scrollRect = new Rectangle(0,0,18,60);
            this.chain2_mc.scrollRect = new Rectangle(0,0,18,60);
        }
        
        public function clearLinkContainer() : *
        {
            while(this.linkContainer_mc.numChildren > 0)
            {
                this.linkContainer_mc.removeChildAt(0);
            }
            this.linkEnders = new Array();
        }
        
        public function clearLinkPieces() : *
        {
            var _loc1_:* = undefined;
            while(this.linkContainer_mc.numChildren > 0)
            {
                this.linkContainer_mc.removeChildAt(0);
            }
            for each(_loc1_ in this.linkEnders)
            {
                this.linkContainer_mc.addChild(_loc1_);
            }
        }
        
        public function setLinkEndersActive(param1:Boolean) : *
        {
            var _loc2_:* = undefined;
            if(this.linkEnders.length > 0)
            {
                for each(_loc2_ in this.linkEnders)
                {
                _loc2_.hl_mc.gotoAndStop(!!param1 ? 2 : 1);
                _loc2_.bg_mc.gotoAndStop(!!param1 ? 2 : 1);
                }
            }
        }
        
        public function setSourceHolderActive(param1:Boolean) : *
        {
            this.sourceHolder_mc.setSourceHolderActive(param1);
        }
        
        public function setLeft(param1:Boolean) : *
        {
            if(param1)
            {
                this.currentActionState_mc.x = -7;
                this.statusHolder_mc.x = 100;
                this.summonContainer_mc.x = 100;
            }
            else
            {
                this.currentActionState_mc.x = 81;
                this.statusHolder_mc.x = -26;
                this.summonContainer_mc.x = -53;
            }
        }

        private function onStatusesMouseOver(ev:MouseEvent) : *
        {
            this._statusesHovered = true;

            this.UpdateStatusOpacity(this._statusesHovered);
        }

        private function onStatusesMouseOut(ev:MouseEvent) : *
        {
            this._statusesHovered = false;

            this.UpdateStatusOpacity(this._statusesHovered);
        }
        
        function frame1() : *
        {
            this.mousePosX = 0;
            this.mousePosY = 0;
            this.draggingPlayer = true;
            this.linkEnders = new Array();
            this.frame_mc.mouseChildren = false;
            this.frame_mc.mouseEnabled = true;
            this.icon_mc.mouseChildren = false;
            this.icon_mc.mouseEnabled = false;
            this.frame_mc.doubleClickEnabled = true; // now that's something I haven't seen before!
            this.attrPoints_mc.mouseEnabled = false;
            this.abilityPoints_mc.mouseEnabled = false;
            this.talentPoints_mc.mouseEnabled = false;
            this.lvlUp_mc.mouseEnabled = false;
            this.attrPoints_mc.mouseChildren = false;
            this.abilityPoints_mc.mouseChildren = false;
            this.talentPoints_mc.mouseChildren = false;
            this.arrow_mc.mouseChildren = false;
            this.arrow_mc.mouseEnabled = false;
            this.lvlUp_mc.mouseChildren = false;
            this.lvlUp_mc.mouseEnabled = false;
            this.armor_mc.mouseChildren = false;
            this.armor_mc.mouseEnabled = false;
            this.lvlUp_mc.visible = false;
            this.currentActionState_mc.mouseChildren = false;
            this.currentActionState_mc.mouseEnabled = false;
            this.frame_mc.addEventListener(MouseEvent.ROLL_OVER,this.onOver);
            this.frame_mc.addEventListener(MouseEvent.ROLL_OUT,this.onOut);
            this.frame_mc.addEventListener(MouseEvent.DOUBLE_CLICK,this.onDoubleClick,false,0,true);
            this.frame_mc.addEventListener("rightClick",this.onRightClick);
            this.enableMouseClicking = true;
            this.hadDown = false;
            this.startedChainDangle = false;
            this.statusHolder_mc.scrollRect = new Rectangle(0,0,1920,500);

            this.statusHolder_mc.addEventListener(MouseEvent.ROLL_OVER, this.onStatusesMouseOver);
            this.statusHolder_mc.addEventListener(MouseEvent.ROLL_OUT, this.onStatusesMouseOut)

            // PIP - B/H displays.
            // There is only one type of BH element, that is placed twice within the PlayerInfo clip. We need to toggle one of the backgrounds off for each.
            this.battered_mc.visible = false;
            this.battered_mc.harried_background.visible = false;
            this.harried_mc.visible = false;
            this.harried_mc.battered_background.visible = false;

            this.battered_mc.mouseEnabled = false;
            this.harried_mc.mouseEnabled = false;
        }
    }
}
