package overhead_fla
{
    import LS_Classes.horizontalList;
    import LS_Classes.larTween;
    import LS_Classes.textEffect;
    import fl.motion.Color;
    import fl.motion.easing.Linear;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFormat;
    
    public dynamic class MainTimeline extends MovieClip
    {
        
        
        public var charHolder_mc:MovieClip;
        
        public var events:Array;
        
        public var layout:String;
        
        public var overhead_array:Array;
        
        public var addOH_array:Array;
        
        public var selectionInfo_array:Array;
        
        public var status_array:Array;
        
        public var hpBarToUpdate_array:Array;
        
        public var hp_array:Array;
        
        public var OHXtraOffset:Number;
        
        public var APString:String;
        
        public var NAPString:String;
        
        public var characterHolderCache:Array;
        
        public var maxCharacterHolderCache:uint;
        
        public const tEffQuality:uint = 3;
        
        public const tEffQualityDam:uint = 4.0;
        
        public const tEffStr:uint = 1.0;
        
        public const tEffStrW:uint = 2.0;
        
        public const tEffStrWDam:uint = 2.0;
        
        public const tweenTime:Number = 0.3;
        
        public const ohTweenBubbleTime:Number = 0.12;
        
        public const ohTweenMoveUpTime:Number = 0.4;
        
        public const ohTweenInTime:Number = 0.52;
        
        public var CH_array:Array;
        
        public var overheadSize:Number;

        public const defaultDamageOverheadSize:Number = 24;

        public var damageOverheadSize:Number = 24;

        public var overheadStatusDurationMultiplier:Number = 1;
        
        public var anchorPlayerId:Number;
        
        public const OHOffset:Number = 8;
        
        public function MainTimeline()
        {
            super();
            addFrameScript(0,this.frame1);
        }
        
        public function setOverheadSize(param1:String) : *
        {
            this.overheadSize = Number(param1);
        }
        
        public function onEventUp(param1:Number) : *
        {
            var _loc2_:Number = NaN;
            var _loc3_:MovieClip = null;
            switch(this.events[param1])
            {
                case "IE PrevObject":
                _loc2_ = 0;
                while(_loc2_ < this.overhead_array.length)
                {
                    _loc3_ = this.overhead_array[_loc2_];
                    if(_loc3_ && _loc3_.sInfo && _loc3_.sInfo.visible)
                    {
                        _loc3_.sInfo.cycle_mc.lb_mc.setHL(false);
                    }
                    _loc2_++;
                }
                break;
                case "IE NextObject":
                _loc2_ = 0;
                while(_loc2_ < this.overhead_array.length)
                {
                    _loc3_ = this.overhead_array[_loc2_];
                    if(_loc3_ && _loc3_.sInfo && _loc3_.sInfo.visible)
                    {
                        _loc3_.sInfo.cycle_mc.rb_mc.setHL(false);
                    }
                    _loc2_++;
                }
            }
            return false;
        }
        
        public function onEventDown(param1:Number) : *
        {
            var _loc2_:Number = NaN;
            var _loc3_:MovieClip = null;
            switch(this.events[param1])
            {
                case "IE PrevObject":
                _loc2_ = 0;
                while(_loc2_ < this.overhead_array.length)
                {
                    _loc3_ = this.overhead_array[_loc2_];
                    if(_loc3_ && _loc3_.sInfo && _loc3_.sInfo.visible)
                    {
                        _loc3_.sInfo.cycle_mc.lb_mc.setHL(true);
                    }
                    _loc2_++;
                }
                break;
                case "IE NextObject":
                _loc2_ = 0;
                while(_loc2_ < this.overhead_array.length)
                {
                    _loc3_ = this.overhead_array[_loc2_];
                    if(_loc3_ && _loc3_.sInfo && _loc3_.sInfo.visible)
                    {
                        _loc3_.sInfo.cycle_mc.rb_mc.setHL(true);
                    }
                    _loc2_++;
                }
            }
            return false;
        }
        
        public function onEventResize() : *
        {
        }
        
        public function onEventInit() : *
        {
            this.hp_array = new Array();
            this.maxCharacterHolderCache = 10;
            this.characterHolderCache = new Array(this.maxCharacterHolderCache);
            var _loc1_:uint = 0;
            while(_loc1_ < this.maxCharacterHolderCache)
            {
                this.characterHolderCache[_loc1_] = this.INTnewCharacterHolder();
                _loc1_++;
            }
            this.overheadSize = 4;
        }
        
        public function setAnchor(param1:Number, param2:* = true) : *
        {
            this.anchorPlayerId = param1;
            ExternalInterface.call("registerAnchorId","overhead_" + param1);
            ExternalInterface.call("setAnchor","topleft","splitscreen","topleft");
        }
        
        public function reorderTexts(param1:MovieClip) : *
        {
            var _loc2_:Number = NaN;
            var _loc3_:int = 0;
            if(param1.oh_array.length > 0)
            {
                _loc2_ = this.getOHOffset(param1);
                _loc3_ = param1.oh_array.length - 1;
                while(_loc3_ >= 0)
                {
                if(param1.oh_array[_loc3_].tweenToY != _loc2_)
                {
                    if(param1.oh_array[_loc3_].tween)
                    {
                        param1.oh_array[_loc3_].tween.stop();
                    }
                    param1.oh_array[_loc3_].tween = new larTween(param1.oh_array[_loc3_],"y",Linear.easeNone,param1.oh_array[_loc3_].y,-_loc2_,this.tweenTime);
                    param1.oh_array[_loc3_].tweenToY = _loc2_;
                }
                _loc2_ += param1.oh_array[_loc3_].textHolder_mc.text_txt.height + this.OHOffset;
                _loc3_--;
                }
            }
        }
        
        public function reorderAllTexts(param1:MovieClip) : *
        {
            var _loc2_:Number = NaN;
            var _loc3_:int = 0;
            if(param1.oh_array.length > 0)
            {
                _loc2_ = this.getOHOffset(param1);
                _loc3_ = param1.oh_array.length - 1;
                while(_loc3_ >= 0)
                {
                if(param1.oh_array[_loc3_].tweenToY != _loc2_)
                {
                    if(param1.oh_array[_loc3_].tween)
                    {
                        param1.oh_array[_loc3_].tween.stop();
                    }
                    param1.oh_array[_loc3_].tween = new larTween(param1.oh_array[_loc3_],"y",Linear.easeNone,param1.oh_array[_loc3_].y,-_loc2_,this.tweenTime);
                    param1.oh_array[_loc3_].tweenToY = _loc2_;
                }
                _loc2_ += param1.oh_array[_loc3_].textHolder_mc.text_txt.height + this.OHOffset;
                _loc3_--;
                }
            }
        }
        
        public function addOverhead(param1:Number, param2:String, param3:Number) : *
        {
            var _loc5_:MovieClip = null;
            var _loc6_:TextFormat = null;
            var _loc4_:MovieClip;
            if(_loc4_ = this.getCharHolder(param1,true))
            {
                (_loc5_ = new Overhead()).base = root as MovieClip;
                _loc5_.myColour = 1050888;
                _loc5_.updateTextEffect();
                _loc5_.textHolder_mc.text_txt.autoSize = TextFieldAutoSize.LEFT;
                (_loc6_ = _loc5_.textHolder_mc.text_txt.defaultTextFormat).size = this.overheadSize;
                _loc5_.textHolder_mc.text_txt.defaultTextFormat = _loc6_;
                _loc5_.textHolder_mc.text_txt.condenseWhite = true;
                _loc5_.textHolder_mc.text_txt.htmlText = param2;
                _loc5_.id = ++_loc4_.ohCount;
                _loc5_.alpha = 0.95;
                _loc5_.timer = param3;
                _loc5_.Holder_mc = _loc4_;
                _loc5_.tweenToY = 0;
                _loc5_.textHolder_mc.text_txt.x = -Math.round(_loc5_.textHolder_mc.text_txt.textWidth * 0.5);
                _loc5_.textHolder_mc.text_txt.y = -Math.round(_loc5_.textHolder_mc.text_txt.textHeight);
                _loc5_.textHolder_mc.scaleX = _loc5_.textHolder_mc.scaleY = 0.8;
                _loc4_.ohH_mc.addChild(_loc5_);
                _loc5_.startAnim();
                _loc4_.oh_array.push(_loc5_);
                this.reorderAllTexts(_loc4_);
            }
        }
        
        public function addOverheadDamage(param1:Number, param2:String) : *
        {
            var _loc4_:MovieClip = null;
            var _loc3_:MovieClip = this.getCharHolder(param1,true);

            // param2 = "<font size='" + this.damageOverheadSize.toString() + "'>" + param2 + "</font>"

            if(_loc3_)
            {
                (_loc4_ = new OverheadDamage()).base = root as MovieClip;
                _loc4_.myColour = 1050888;
                // _loc4_.textHolder_mc.text_txt.defaultTextFormat.size = this.damageOverheadSize; // PIP
                _loc4_.updateTextEffect();
                _loc4_.textHolder_mc.text_txt.autoSize = TextFieldAutoSize.CENTER;
                _loc4_.textHolder_mc.text_txt.condenseWhite = true;
                _loc4_.textHolder_mc.text_txt.htmlText = param2;
                _loc4_.id = ++_loc3_.ohDCount;
                _loc4_.alpha = 0.95;
                _loc4_.Holder_mc = _loc3_;
                _loc4_.tweenToY = 0;
                _loc4_.textHolder_mc.text_txt.y = -Math.round(_loc4_.textHolder_mc.text_txt.textHeight);
                _loc4_.textHolder_mc.scaleX = _loc4_.textHolder_mc.scaleY = 0.8;
                _loc3_.ohDHolder_mc.addChild(_loc4_);
                _loc3_.ohD_array.push(_loc4_);
                _loc4_.startAnimation(_loc3_.lastDamDir);
                _loc3_.lastDamDir = (_loc3_.lastDamDir + 1) % 9;
            }
        }
        
        public function addADialog(param1:Number, param2:String, param3:Number) : *
        {
            var _loc4_:MovieClip;
            if(_loc4_ = this.getCharHolder(param1,true,true))
            {
                _loc4_.text_mc.text_txt.htmlText = param2;
                _loc4_.text_mc.text_txt.y = -Math.round(_loc4_.text_mc.text_txt.textHeight) - 4;
                _loc4_.text_mc.text_txt.x = -Math.round(_loc4_.text_mc.text_txt.width * 0.5);
                _loc4_.text_mc.alpha = 1;
                _loc4_.AD = param2;
                _loc4_.text_mc.visible = true;
                _loc4_.text_mc.text_txt.visible = true;
                _loc4_.updateTextEffect();
                this.repositionHolders(_loc4_);
                _loc4_.startDialogTimer(param3);
            }
        }
        
        public function repositionHolders(param1:MovieClip) : *
        {
            var _loc2_:Number = 0;
            if(param1.text_mc.visible)
            {
                _loc2_ += param1.text_mc.text_txt.y;
            }
            param1.ohSHolder_mc.y = _loc2_;
            if(param1.sInfo && param1.sInfo.visible)
            {
                param1.ohDHolder_mc.y = param1.ohH_mc.y = _loc2_ - 54;
            }
            else
            {
                param1.ohDHolder_mc.y = param1.ohH_mc.y = _loc2_;
            }
        }
        
        public function setAPString(param1:String, param2:String) : *
        {
            this.APString = param1;
            this.NAPString = param2;
        }
        
        public function addOverheadSelectionInfo(param1:Number, param2:String, param3:Boolean, param4:uint, param5:Number, param6:Number, param7:Number, param8:int, param9:int, param10:Number, param11:String, param12:String, param13:String, param14:String, param15:Boolean, param16:Boolean, param17:String, param18:String, param19:Boolean, param20:Number, param21:Boolean) : *
        {
            var _loc23_:MovieClip = null;
            var _loc24_:Number = NaN;
            var _loc25_:Number = NaN;
            var _loc26_:Array = null;
            var _loc27_:horizontalList = null;
            var _loc28_:Boolean = false;
            var _loc22_:Boolean = false;
            if(!isNaN(param20))
            {
                if(_loc23_ = this.getCharHolder(param1,param21))
                {
                if(!_loc23_.sInfo || _loc23_.sInfo.visible == false || param21)
                {
                    if(!_loc23_.sInfo)
                    {
                        _loc23_.sInfo = new HPBar();
                        _loc23_.sInfo.frame_mc.gotoAndStop(1);
                        _loc23_.ohSHolder_mc.addChild(_loc23_.sInfo);
                        _loc24_ = 2;
                        _loc25_ = 20;
                        _loc26_ = textEffect.createStrokeFilter(1050888,this.tEffStrW,1,this.tEffStr,this.tEffQuality);
                        _loc23_.sInfo.actionTitle_mc.holder_mc.filters = _loc26_;
                        _loc23_.sInfo.texts_mc.filters = _loc26_;
                        _loc23_.sInfo.name_mc.filters = _loc26_;
                        _loc23_.sInfo.infoIcons_mc.texts_mc.filters = _loc26_;
                        _loc23_.sInfo.infoIcons_mc.cth_mc.visible = false;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.hp_mc.visible = false;
                        _loc23_.sInfo.infoIcons_mc.ap_mc.visible = false;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.visible = false;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.visible = false;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.icon_mc.gotoAndStop(1);
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.icon_mc.gotoAndStop(2);
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.filters = _loc26_;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.filters = _loc26_;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.hp_mc.filters = _loc26_;
                        _loc23_.sInfo.name_mc.name_txt.autoSize = TextFieldAutoSize.CENTER;
                        _loc23_.sInfo.infoIcons_mc.texts_mc.cth_txt.autoSize = TextFieldAutoSize.LEFT;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.hp_mc.hp_txt.autoSize = TextFieldAutoSize.LEFT;
                        _loc23_.sInfo.infoIcons_mc.texts_mc.ap_txt.autoSize = TextFieldAutoSize.LEFT;
                        _loc23_.sInfo.infoIcons_mc.texts_mc.apT_txt.autoSize = TextFieldAutoSize.LEFT;
                        _loc23_.sInfo.texts_mc.apNAP_txt.autoSize = TextFieldAutoSize.CENTER;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.armor_txt.autoSize = TextFieldAutoSize.LEFT;
                        _loc23_.sInfo.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.armor_txt.autoSize = TextFieldAutoSize.LEFT;
                        _loc23_.sInfo.magicBar_mc.setBarColour(1879766);
                        _loc23_.sInfo.physBar_mc.setBarColour(13355979);
                        _loc23_.sInfo.cycle_mc.lb_mc.setHintIcon(31);
                        _loc23_.sInfo.cycle_mc.rb_mc.setHintIcon(32);
                        if(param5 >= 0 && param11 != "")
                        {
                            _loc23_.sInfo.level_mc.visible = true;
                        }
                        else
                        {
                            _loc23_.sInfo.level_mc.visible = false;
                        }
                        _loc23_.sInfo.hBarContainer_mc.oldPerc = 0;
                        _loc23_.sInfo.statusInfo_mc.visible = false;
                        _loc27_ = new horizontalList();
                        _loc23_.sInfo.statusList = _loc27_;
                        _loc27_.EL_SPACING = 2;
                        _loc27_.m_customElementHeight = 40;
                        _loc27_.m_customElementWidth = 40;
                        _loc23_.sInfo.statusInfo_mc.statusHolder_mc.addChild(_loc27_);
                        _loc23_.sInfo.texts_mc.actionInfo_txt.autoSize = TextFieldAutoSize.CENTER;
                        _loc23_.sInfo.texts_mc.actionInfo_txt.wordWrap = false;
                        _loc22_ = true;
                    }
                    else
                    {
                        _loc23_.sInfo.visible = true;
                    }
                    _loc23_.sInfo.id = param1;
                    _loc23_.sInfo.name_mc.name_txt.htmlText = param2;
                    _loc23_.sInfo.level_mc.level_txt.htmlText = param11;
                    _loc23_.sInfo.isPersistent = param10 == -1;
                    this.reorderAllTexts(_loc23_);
                    this.repositionHolders(_loc23_);
                }
                else if(param20 != 0 && param10 != -2)
                {
                    _loc23_.sInfo.alpha = 1;
                    _loc23_.cancelSelectionInfoTimer();
                }
                if(_loc23_.sInfo && _loc23_.sInfo.visible)
                {
                    _loc28_ = true;
                    if(param20 == 0)
                    {
                        _loc28_ = false;
                    }
                    else
                    {
                        _loc23_.sInfo.infoIcons_mc.texts_mc.ap_txt.htmlText = param14;
                        _loc23_.sInfo.infoIcons_mc.texts_mc.apT_txt.htmlText = this.APString;
                        if(!param15)
                        {
                            _loc23_.sInfo.infoIcons_mc.texts_mc.ap_txt.textColor = 13434880;
                            _loc23_.sInfo.infoIcons_mc.texts_mc.apT_txt.textColor = 13434880;
                            _loc23_.sInfo.texts_mc.apNAP_txt.textColor = 13442847;
                            _loc23_.sInfo.texts_mc.apNAP_txt.htmlText = this.NAPString;
                            _loc23_.sInfo.texts_mc.apNAP_txt.width = _loc23_.sInfo.texts_mc.apNAP_txt.textWidth + 10;
                            _loc23_.sInfo.texts_mc.apNAP_txt.visible = true;
                        }
                        else
                        {
                            _loc23_.sInfo.infoIcons_mc.texts_mc.ap_txt.textColor = 16777215;
                            _loc23_.sInfo.infoIcons_mc.texts_mc.apT_txt.textColor = 16777215;
                            _loc23_.sInfo.texts_mc.apNAP_txt.visible = false;
                        }
                        _loc23_.sInfo.infoIcons_mc.ap_mc.visible = Boolean(param14 != "");
                        if(_loc23_.sInfo.infoIcons_mc.ap_mc.visible && _loc23_.sInfo.stage)
                        {
                            _loc23_.sInfo.infoIcons_mc.ap_mc.startAnim();
                        }
                        else
                        {
                            _loc23_.sInfo.infoIcons_mc.ap_mc.stopTweens();
                        }
                        _loc23_.sInfo.infoIcons_mc.ap_mc.setRed(!param15);
                        _loc23_.sInfo.infoIcons_mc.texts_mc.cth_txt.htmlText = param18;
                        _loc23_.sInfo.infoIcons_mc.cth_mc.visible = Boolean(param18 != "");
                    }
                    this.setHPBars(_loc23_.sInfo,1,param5,param17,false,_loc28_);
                    _loc23_.sInfo.hBarContainer_mc.setBarColour(param4);
                    _loc23_.sInfo.Holder_mc = _loc23_;
                    this.setHPBars(_loc23_.sInfo,2,param6,param8 >= 0 ? String(param8) : "",false,_loc28_);
                    this.setHPBars(_loc23_.sInfo,3,param7,param9 >= 0 ? String(param9) : "",false,_loc28_);
                    _loc23_.sInfo.cycle_mc.visible = false;
                    if(param13.length == 0)
                    {
                        _loc23_.sInfo.texts_mc.actionInfo_txt.visible = false;
                    }
                    if(!param19)
                    {
                        this.setAction(_loc23_.sInfo,param12,param13,param14);
                        if(_loc23_.sInfo)
                        {
                            _loc23_.sInfo.actionTitle_mc.icon_mc.x = 0.5 * -_loc23_.sInfo.actionTitle_mc.icon_mc.icon_mc.width;
                            _loc23_.sInfo.actionTitle_mc.holder_mc.action_txt.x = 0.5 * -_loc23_.sInfo.actionTitle_mc.holder_mc.width;
                            _loc23_.sInfo.actionTitle_mc.holder_mc.action_txt.y = _loc23_.sInfo.actionTitle_mc.icon_mc.height;
                            _loc23_.sInfo.cycle_mc.visible = param16;
                        }
                    }
                    if(param10 != -2)
                    {
                        if(param20 != 0 && param10 == -1)
                        {
                            _loc23_.sInfo.timer = -1;
                            _loc23_.sInfo.isPersistent = true;
                            _loc23_.sInfo.alpha = 1;
                            _loc23_.addPlayerOwnerID(param20);
                        }
                        else if(!_loc23_.hasOwners())
                        {
                            _loc23_.sInfo.timer = param10;
                            _loc23_.fadeOutOverheadSelectionInfo(param10);
                            _loc23_.sInfo.isPersistent = false;
                        }
                    }
                    this.checkInfoIcons(_loc23_.sInfo);
                    this.setCharInfoPositioning(_loc23_.sInfo);
                }
                }
            }
        }
        
        public function clearOverheadSelectionInfo(param1:Number, param2:Number, param3:Boolean) : *
        {
            var _loc4_:MovieClip;
            if(_loc4_ = this.getCharHolder(param1))
            {
                _loc4_.removeOverheadSelectionInfo(param2,false);
            }
        }
        
        public function clearAllOverheadSelectionInfos(param1:Number) : *
        {
            var _loc3_:MovieClip = null;
            var _loc2_:uint = 0;
            while(_loc2_ < this.overhead_array.length)
            {
                _loc3_ = this.overhead_array[_loc2_];
                if(_loc3_)
                {
                _loc3_.removeOverheadSelectionInfo(param1,false);
                }
                _loc2_++;
            }
        }
        
        public function updateOHs() : *
        {
            var _loc3_:Number = NaN;
            var _loc4_:Number = NaN;
            var _loc5_:String = null;
            var _loc6_:Number = NaN;
            var _loc7_:Number = NaN;
            var _loc8_:String = null;
            var _loc9_:Boolean = false;
            var _loc10_:uint = 0;
            var _loc11_:Number = NaN;
            var _loc12_:Number = NaN;
            var _loc13_:Number = NaN;
            var _loc14_:int = 0;
            var _loc15_:int = 0;
            var _loc16_:Number = NaN;
            var _loc17_:String = null;
            var _loc18_:String = null;
            var _loc19_:String = null;
            var _loc20_:String = null;
            var _loc21_:Boolean = false;
            var _loc22_:Boolean = false;
            var _loc23_:String = null;
            var _loc24_:String = null;
            var _loc25_:Boolean = false;
            var _loc26_:Number = NaN;
            var _loc27_:Boolean = false;
            var _loc28_:Number = NaN;
            var _loc29_:int = 0;
            var _loc30_:Number = NaN;
            var _loc31_:String = null;
            var _loc32_:MovieClip = null;
            var _loc1_:uint = 0;
            while(_loc1_ < this.addOH_array.length)
            {
                _loc3_ = Number(this.addOH_array[_loc1_++]);
                _loc4_ = Number(this.addOH_array[_loc1_++]);
                _loc5_ = String(this.addOH_array[_loc1_++]);
                _loc6_ = Number(this.addOH_array[_loc1_++]);
                switch(_loc3_)
                {
                case 0:
                    // these already have abuilt-in size setting; no need to defer
                    this.addOverhead(_loc4_,_loc5_,_loc6_ * this.overheadStatusDurationMultiplier);
                    break;
                case 1:
                    // Only defer to lua if the size is changed from default. Saves some performance, a bit?
                    if (this.damageOverheadSize != this.defaultDamageOverheadSize)
                    {
                        ExternalInterface.call("pipOverheadAttempt", _loc4_, _loc5_);
                    }
                    else
                    {
                        this.addOverheadDamage(_loc4_,_loc5_);
                    }
                    break;
                case 2:
                    if (this.overheadSize != 19)
                    {
                        ExternalInterface.call("pipOverheadDialogAttempt", _loc4_, _loc5_, _loc6_);
                    }
                    else
                    {
                        this.addADialog(_loc4_,_loc5_,_loc6_);
                    }
                    break;
                case 3:
                    this.getCharHolder(_loc4_,_loc6_ == 1 ? true : false);
                    break;
                }
            }
            var _loc2_:uint = 0;
            while(_loc2_ < this.selectionInfo_array.length)
            {
                _loc7_ = this.selectionInfo_array[_loc2_++];
                _loc8_ = this.selectionInfo_array[_loc2_++];
                _loc9_ = this.selectionInfo_array[_loc2_++];
                _loc10_ = this.selectionInfo_array[_loc2_++];
                _loc11_ = this.selectionInfo_array[_loc2_++];
                _loc12_ = this.selectionInfo_array[_loc2_++];
                _loc13_ = this.selectionInfo_array[_loc2_++];
                _loc14_ = this.selectionInfo_array[_loc2_++];
                _loc15_ = this.selectionInfo_array[_loc2_++];
                _loc16_ = this.selectionInfo_array[_loc2_++];
                _loc17_ = this.selectionInfo_array[_loc2_++];
                _loc18_ = this.selectionInfo_array[_loc2_++];
                _loc19_ = this.selectionInfo_array[_loc2_++];
                _loc20_ = this.selectionInfo_array[_loc2_++];
                _loc21_ = this.selectionInfo_array[_loc2_++];
                _loc22_ = this.selectionInfo_array[_loc2_++];
                _loc23_ = this.selectionInfo_array[_loc2_++];
                _loc24_ = this.selectionInfo_array[_loc2_++];
                _loc25_ = this.selectionInfo_array[_loc2_++];
                _loc26_ = this.selectionInfo_array[_loc2_++];
                _loc27_ = this.selectionInfo_array[_loc2_++];
                this.addOverheadSelectionInfo(_loc7_,_loc8_,_loc9_,_loc10_,_loc11_,_loc12_,_loc13_,_loc14_,_loc15_,_loc16_,_loc17_,_loc18_,_loc19_,_loc20_,_loc21_,_loc22_,_loc23_,_loc24_,_loc25_,_loc26_,_loc27_);
            }
            if(this.hp_array.length > 0)
            {
                _loc1_ = 0;
                while(_loc1_ < this.hp_array.length)
                {
                _loc28_ = this.hp_array[_loc1_++];
                _loc29_ = this.hp_array[_loc1_++];
                _loc30_ = this.hp_array[_loc1_++];
                _loc31_ = this.hp_array[_loc1_++];
                if((_loc32_ = this.getCharHolder(_loc28_,false)) && _loc32_.sInfo && _loc32_.sInfo.visible)
                {
                    this.setHPBars(_loc32_.sInfo,_loc29_,_loc30_,_loc31_,true,false);
                    this.checkInfoIcons(_loc32_.sInfo);
                    this.setCharInfoPositioning(_loc32_.sInfo);
                }
                }
                this.hp_array = new Array();
            }
            this.addOH_array = new Array();
            this.selectionInfo_array = new Array();
        }
        
        public function cleanUpAllStatusses() : *
        {
            var _loc1_:uint = 0;
            while(_loc1_ < this.overhead_array.length)
            {
                if(this.overhead_array[_loc1_].sInfo != null)
                {
                this.overhead_array[_loc1_].sInfo.statusList.clearElements();
                this.overhead_array[_loc1_].sInfo.statusInfo_mc.visible = false;
                }
                _loc1_++;
            }
        }
        
        public function updateStatusses(param1:Boolean) : *
        {
            var _loc3_:Number = NaN;
            var _loc4_:Number = NaN;
            var _loc5_:Number = NaN;
            var _loc6_:Number = NaN;
            var _loc7_:Number = NaN;
            var _loc8_:String = null;
            var _loc9_:MovieClip = null;
            var _loc10_:MovieClip = null;
            this.hpBarToUpdate_array = new Array();
            var _loc2_:uint = 0;
            while(_loc2_ < this.status_array.length)
            {
                if(this.status_array[_loc2_] != undefined)
                {
                _loc3_ = Number(this.status_array[_loc2_]);
                _loc4_ = Number(this.status_array[_loc2_ + 1]);
                _loc5_ = Number(this.status_array[_loc2_ + 2]);
                _loc6_ = Number(this.status_array[_loc2_ + 3]);
                _loc7_ = Number(this.status_array[_loc2_ + 4]);
                _loc8_ = String(this.status_array[_loc2_ + 5]);
                if(_loc9_ = this.getCharHolder(_loc3_,false))
                {
                    if(_loc10_ = _loc9_.sInfo)
                    {
                        this.setStatus(param1,_loc10_,_loc4_,_loc5_,_loc6_,_loc7_);
                    }
                }
                }
                _loc2_ += 6;
            }
            this.status_array = new Array();
            _loc2_ = 0;
            while(_loc2_ < this.overhead_array.length)
            {
                if(this.overhead_array[_loc2_].sInfo != null && this.overhead_array[_loc2_].sInfo.statusList.size != 0)
                {
                this.cleanupStatuses(this.overhead_array[_loc2_].sInfo);
                }
                if(this.overhead_array[_loc2_])
                {
                this.reorderAllTexts(this.overhead_array[_loc2_]);
                }
                _loc2_++;
            }
        }
        
        public function setStatus(param1:Boolean, param2:MovieClip, param3:Number, param4:Number, param5:Number, param6:Number) : *
        {
            var _loc8_:String = null;
            var _loc7_:MovieClip = null;
            if(param2)
            {
                if((_loc7_ = param2.statusList.getElementByNumber("id",param3)) == null)
                {
                if(!param1)
                {
                    return;
                }
                (_loc7_ = new Status()).id = param3;
                _loc7_.texts_mc.filters = textEffect.createStrokeFilter(1050888,this.tEffStrW,1,this.tEffStr,this.tEffQuality);
                param2.statusList.addElement(_loc7_);
                }
                param2.statusInfo_mc.visible = true;
                if(param4 != -1 && _loc7_.iconId != param4)
                {
                _loc7_.iconId = param4;
                _loc8_ = "s" + String(param4);
                this.setIggyImage(_loc7_,_loc8_);
                _loc7_.icon_mc.height = _loc7_.icon_mc.width = 32;
                }
                _loc7_.setCoolDown(param6);
                if(param5 <= 0)
                {
                _loc7_.texts_mc.text_txt.htmlText = "";
                }
                else
                {
                _loc7_.texts_mc.text_txt.htmlText = Math.ceil(param5);
                _loc7_.texts_mc.text_txt.width = _loc7_.texts_mc.text_txt.textWidth + 10;
                }
                _loc7_.alive = true;
            }
        }
        
        public function cleanupStatuses(param1:MovieClip) : *
        {
            var _loc3_:MovieClip = null;
            var _loc4_:Number = NaN;
            var _loc2_:uint = 0;
            while(_loc2_ < param1.statusList.length)
            {
                _loc3_ = param1.statusList.content_array[_loc2_];
                if(_loc3_.alive)
                {
                _loc3_.alive = false;
                }
                else
                {
                param1.statusList.removeElement(_loc2_,false);
                _loc2_--;
                }
                _loc2_++;
            }
            if(param1.statusList.length > 0)
            {
                param1.statusList.positionElements();
                _loc4_ = param1.statusList.getElement(0).statusRoundBG_mc.width;
                param1.statusInfo_mc.statusHolder_mc.x = -Math.round(_loc4_ * param1.statusList.visibleLength * 0.5);
            }
            else
            {
                param1.statusInfo_mc.visible = false;
            }
        }
        
        public function setIggyImage(param1:MovieClip, param2:String) : *
        {
            var _loc3_:MovieClip = null;
            if(!param1.texture || param1.texture != param2)
            {
                this.removeChildrenOf(param1.icon_mc);
                _loc3_ = new IggyIcon();
                _loc3_.name = "iggy_" + param2;
                param1.icon_mc.addChild(_loc3_);
                param1.texture = param2;
            }
        }
        
        public function removeChildrenOf(param1:MovieClip) : void
        {
            var _loc2_:int = 0;
            if(param1.numChildren != 0)
            {
                _loc2_ = param1.numChildren;
                while(_loc2_ > 0)
                {
                _loc2_--;
                param1.removeChildAt(_loc2_);
                }
            }
        }
        
        public function getCharHolderIndex(param1:*) : Number
        {
            var _loc2_:uint = 0;
            while(_loc2_ < this.overhead_array.length)
            {
                if(this.overhead_array[_loc2_].charID == param1)
                {
                return _loc2_;
                }
                _loc2_++;
            }
            return -1;
        }
        
        public function getCharHolder(param1:Number, param2:Boolean = false, param3:Boolean = false) : MovieClip
        {
            var _loc4_:uint = 0;
            while(_loc4_ < this.overhead_array.length)
            {
                if(this.overhead_array[_loc4_].charID == param1 && !this.overhead_array[_loc4_].killMe)
                {
                if(this.overhead_array[_loc4_].timeline && param3)
                {
                    this.overhead_array[_loc4_].timeline.onComplete = null;
                    if(this.overhead_array[_loc4_].stopTween != null)
                    {
                        this.overhead_array[_loc4_].stopTween();
                    }
                    this.overhead_array[_loc4_].timeline = null;
                    this.overhead_array[_loc4_].dialogFading = false;
                }
                this.overhead_array[_loc4_].killMeAD = false;
                this.overhead_array[_loc4_].killRequest = false;
                return this.overhead_array[_loc4_];
                }
                _loc4_++;
            }
            if(param2)
            {
                return this.newCharacterHolder(param1);
            }
            return null;
        }
        
        public function INTnewCharacterHolder() : MovieClip
        {
            var _loc1_:MovieClip = new CharHolder();
            _loc1_.base = root as MovieClip;
            _loc1_.text_mc.text_txt.autoSize = TextFieldAutoSize.CENTER;
            _loc1_.myColour = 1050888;
            _loc1_.updateTextEffect();
            _loc1_.timeline = null;
            _loc1_.text_mc.visible = false;
            _loc1_.killMe = false;
            _loc1_.killMeAD = false;
            _loc1_.killRequest = false;
            _loc1_.ohCount = 0;
            _loc1_.ohDCount = 0;
            _loc1_.charID = 0;
            _loc1_.ohHolder_mc = null;
            _loc1_.oh_array = new Array();
            _loc1_.ohD_array = new Array();
            _loc1_.playerOwner_array = new Array();
            _loc1_.AD = "";
            _loc1_.sInfo = null;
            _loc1_.lastDamDir = Math.round(Math.random() * 8);
            return _loc1_;
        }
        
        public function newCharacterHolder(param1:Number) : MovieClip
        {
            var _loc2_:MovieClip = null;
            if(this.characterHolderCache.length > 0)
            {
                _loc2_ = this.characterHolderCache.pop() as CharHolder;
            }
            else
            {
                _loc2_ = this.INTnewCharacterHolder();
            }
            _loc2_.charID = param1;
            this.charHolder_mc.addChild(_loc2_);
            this.overhead_array.push(_loc2_);
            return _loc2_;
        }
        
        public function clearAD(param1:Number) : *
        {
            var _loc2_:MovieClip = this.getCharHolder(param1);
            this.INTclearAD(_loc2_);
        }
        
        public function INTclearAD(param1:MovieClip) : *
        {
            if(param1)
            {
                param1.INTClearAD();
            }
        }
        
        public function getOHOffset(param1:MovieClip) : Number
        {
            var _loc2_:Number = 0;
            if(param1.sInfo != null && !param1.sInfo.visible)
            {
                _loc2_ += this.OHXtraOffset;
            }
            if(param1.sInfo && param1.sInfo.visible && param1.sInfo.statusList && param1.sInfo.statusList.size != 0)
            {
                _loc2_ += 32;
            }
            return _loc2_;
        }
        
        public function clearObsoleteOHTs() : *
        {
            var _loc3_:MovieClip = null;
            var _loc1_:uint = 0;
            var _loc2_:Array = this.overhead_array;
            this.overhead_array = new Array();
            _loc1_ = 0;
            while(_loc1_ < this.CH_array.length)
            {
                _loc3_ = this.getCharHolderFromArrayINT(_loc2_,this.CH_array[_loc1_]);
                if(_loc3_)
                {
                this.overhead_array.push(_loc3_);
                }
                else if(this.CH_array[_loc1_] != null)
                {
                this.newCharacterHolder(this.CH_array[_loc1_]);
                }
                _loc1_++;
            }
            _loc1_ = 0;
            while(_loc1_ < _loc2_.length)
            {
                this.removeCharHolderInt(_loc2_[_loc1_]);
                _loc1_++;
            }
            this.CH_array = new Array();
        }
        
        public function findInArray(param1:Number, param2:Array) : int
        {
            var _loc3_:uint = 0;
            while(_loc3_ < param2.length)
            {
                if(param2[_loc3_] == param1)
                {
                return _loc3_;
                }
                _loc3_++;
            }
            return -1;
        }
        
        public function removeCharHolderInt(param1:MovieClip) : *
        {
            if(param1.timeline)
            {
                param1.timeline.onComplete = null;
            }
            param1.onDestroy();
            this.charHolder_mc.removeChild(param1);
            this.tryToPutBackInCache(param1);
        }
        
        public function tryToPutBackInCache(param1:MovieClip) : *
        {
            if(this.characterHolderCache.length < this.maxCharacterHolderCache)
            {
                param1.killMe = false;
                param1.killMeAD = false;
                param1.killRequest = false;
                param1.charID = 0;
                param1.INTClearAD();
                if(param1.ohCount > 0)
                {
                this.removeChildrenOf(param1.ohH_mc);
                param1.oh_array = new Array();
                }
                if(param1.ohDCount > 0)
                {
                this.removeChildrenOf(param1.ohDHolder_mc);
                param1.ohD_array = new Array();
                }
                param1.ohCount = 0;
                param1.ohDCount = 0;
                if(param1.sInfo)
                {
                param1.sInfo.visible = false;
                }
                this.characterHolderCache.push(param1);
            }
        }
        
        public function getCharHolderFromArrayINT(param1:Array, param2:Number) : MovieClip
        {
            var _loc3_:uint = 0;
            while(_loc3_ < param1.length)
            {
                if(param1[_loc3_].charID == param2 && !param1[_loc3_].killMe)
                {
                return param1.splice(_loc3_,1)[0];
                }
                _loc3_++;
            }
            return null;
        }
        
        public function findOverlaps(param1:MovieClip) : Number
        {
            var _loc4_:Number = NaN;
            var _loc5_:Number = NaN;
            var _loc6_:Number = NaN;
            var _loc7_:Number = NaN;
            var _loc8_:Number = NaN;
            var _loc9_:Number = NaN;
            var _loc10_:Number = NaN;
            var _loc11_:Number = NaN;
            var _loc2_:Number = 0;
            var _loc3_:uint = 0;
            while(_loc3_ < this.overhead_array.length)
            {
                if(!(param1 == this.overhead_array[_loc3_] || !param1.text_mc.visible || !this.overhead_array[_loc3_].text_mc.visible))
                {
                _loc4_ = param1.x + param1.text_mc.x;
                _loc5_ = this.overhead_array[_loc3_].x + this.overhead_array[_loc3_].text_mc.x;
                _loc6_ = this.overhead_array[_loc3_].text_mc.text_txt.textWidth;
                _loc7_ = param1.text_txt.textWidth;
                _loc8_ = param1.y + param1.text_mc.y;
                _loc9_ = this.overhead_array[_loc3_].y + this.overhead_array[_loc3_].text_mc.y;
                _loc10_ = this.overhead_array[_loc3_].text_mc.text_txt.textHeight;
                _loc11_ = param1.text_mc.text_txt.textHeight;
                if(_loc4_ >= _loc5_ && _loc4_ <= _loc5_ + _loc6_ && _loc8_ >= _loc9_ && _loc8_ <= _loc9_ + _loc10_ || _loc5_ >= _loc4_ && _loc5_ <= _loc4_ + _loc7_ && _loc9_ >= _loc8_ && _loc9_ <= _loc8_ + _loc11_)
                {
                    _loc2_++;
                }
                }
                _loc3_++;
            }
            return _loc2_;
        }
        
        public function clearAll() : *
        {
            var _loc1_:uint = 0;
            while(_loc1_ < this.overhead_array.length)
            {
                this.overhead_array[_loc1_].onDestroy();
                this.tryToPutBackInCache(this.overhead_array[_loc1_]);
                this.charHolder_mc.removeChild(this.overhead_array[_loc1_]);
                _loc1_++;
            }
            this.overhead_array = new Array();
        }
        
        public function cleanupDeleteRequests() : *
        {
            var _loc1_:uint = 0;
            while(_loc1_ < this.overhead_array.length)
            {
                if(this.overhead_array[_loc1_].killRequest)
                {
                ExternalInterface.call("removingOHT",this.overhead_array[_loc1_].charID);
                }
                _loc1_++;
            }
        }
        
        public function fadeOutObsoleteDialogs() : *
        {
        }
        
        public function checkCharHolderMC(param1:MovieClip) : *
        {
            if(param1)
            {
                if(param1.AD == "" && !param1.dialogFading)
                {
                    param1.text_mc.text_txt.htmlText = "";
                    param1.text_mc.text_txt.y = 0;
                    param1.text_mc.visible = false;
                    this.repositionHolders(param1);
                }
                if(param1.oh_array.length == 0 && param1.ohD_array.length == 0 && (param1.sInfo == null || !param1.sInfo.visible) && param1.playerOwner_array.length == 0 && !param1.dialogFading && param1.AD == "")
                {
                    param1.killRequest = true;
                    ExternalInterface.call("removingOHT",param1.charID);
                }
                // this.repositionHolders(param1); // PIP
            }
        }
        
        public function getOHTPos(param1:MovieClip) : Number
        {
            var _loc2_:uint = 0;
            while(_loc2_ < this.overhead_array.length)
            {
                if(this.overhead_array[_loc2_] == param1)
                {
                return _loc2_;
                }
                _loc2_++;
            }
            return -1;
        }
        
        public function setAction(param1:MovieClip, param2:String, param3:String, param4:String) : *
        {
            if(param2 != "")
            {
                param1.actionTitle_mc.visible = true;
                param1.actionTitle_mc.icon_mc.setHintIcon(2);
                param1.texts_mc.actionInfo_txt.y = param1.actionTitle_mc.y + param1.actionTitle_mc.height;
            }
            else
            {
                param1.actionTitle_mc.visible = false;
                param1.texts_mc.actionInfo_txt.y = param1.actionTitle_mc.y;
            }
            if(param1.actionTitle != param2)
            {
                param1.actionTitle = param2;
                param1.actionTitle_mc.holder_mc.action_txt.htmlText = param2;
                param1.actionTitle_mc.holder_mc.action_txt.width = param1.actionTitle_mc.holder_mc.action_txt.textWidth + 10;
                param1.actionTitle_mc.holder_mc.action_txt.height = param1.actionTitle_mc.holder_mc.action_txt.textHeight + 10;
                param1.actionTitle_mc.holder_mc.action_txt.x = 0.5 * -param1.actionTitle_mc.holder_mc.width;
            }
            if(param3 != "")
            {
                param1.texts_mc.actionInfo_txt.htmlText = param3;
                param1.texts_mc.actionInfo_txt.visible = true;
            }
            else
            {
                param1.texts_mc.actionInfo_txt.visible = false;
            }
            if(param1.actionInfo != param3)
            {
                param1.actionInfo = param3;
                param1.texts_mc.actionInfo_txt.htmlText = param3;
            }
        }
        
        public function checkInfoIcons(param1:MovieClip) : *
        {
            var _loc2_:int = 0;
            var _loc3_:Number = NaN;
            var _loc4_:Number = NaN;
            var _loc5_:int = 0;
            if(!param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.visible && !param1.infoIcons_mc.ap_mc.visible && !param1.infoIcons_mc.cth_mc.visible)
            {
                param1.infoIcons_mc.visible = false;
            }
            else
            {
                _loc2_ = Math.round(188 / 2);
                _loc3_ = 20;
                _loc4_ = 2;
                _loc5_ = 0;
                param1.infoIcons_mc.texts_mc.cth_txt.x = param1.infoIcons_mc.cth_mc.x + param1.infoIcons_mc.cth_mc.width + _loc4_;
                if(param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.visible)
                {
                param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.x = 0;
                }
                if(param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.visible)
                {
                param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.x = !!param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.visible ? param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.width : 0;
                }
                if(param1.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.visible)
                {
                if(param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.visible)
                {
                    param1.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.x = param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.x + param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.width;
                }
                else if(param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.visible)
                {
                    param1.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.x = param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.x + param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.width;
                }
                else
                {
                    param1.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.x = 0;
                }
                }
                else
                {
                param1.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.x = 0;
                }
                param1.infoIcons_mc.healthArmorHolder_mc.x = (188 - param1.infoIcons_mc.healthArmorHolder_mc.width) / 2;
                if(param1.infoIcons_mc.ap_mc.visible)
                {
                param1.infoIcons_mc.ap_mc.x = 120;
                param1.infoIcons_mc.texts_mc.ap_txt.x = param1.infoIcons_mc.ap_mc.x + param1.infoIcons_mc.ap_mc.width + _loc4_;
                param1.infoIcons_mc.texts_mc.apT_txt.x = param1.infoIcons_mc.texts_mc.ap_txt.x + param1.infoIcons_mc.texts_mc.ap_txt.textWidth + 2;
                param1.infoIcons_mc.texts_mc.apT_txt.visible = true;
                }
                else
                {
                param1.infoIcons_mc.texts_mc.apT_txt.visible = false;
                }
                param1.infoIcons_mc.visible = true;
                param1.infoIcons_mc.x = -Math.round(188 * 0.5);
            }
        }
        
        public function setHPBars(param1:MovieClip, param2:int, param3:Number, param4:String, param5:Boolean = false, param6:Boolean = true) : *
        {
            var _loc7_:* = false;
            var _loc8_:* = false;
            var _loc9_:Number = NaN;
            var _loc10_:Number = NaN;
            if(param3 > 1)
            {
                param3 = 1;
            }
            switch(param2)
            {
                case 1:
                param1.hBarContainer_mc.setBar(param3,param5);
                if(param1.infoIcons_mc)
                {
                    if(param6)
                    {
                        param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.hp_txt.htmlText = param4;
                        _loc7_ = param4 != "";
                        param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.visible = _loc7_;
                    }
                }
                param1.frame_mc.visible = param1.hBarContainer_mc.visible = Boolean(param3 >= 0);
                break;
                case 2:
                if(param3 != -1)
                {
                    param1.physBar_mc.visible = true;
                    param1.physBar_mc.setBar(param3,param5);
                    _loc8_ = param4 != "";
                    param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.visible = _loc8_;
                    if(_loc8_)
                    {
                        param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.armor_txt.htmlText = String(param4);
                    }
                }
                else
                {
                    param1.physBar_mc.visible = false;
                    param1.infoIcons_mc.healthArmorHolder_mc.physArmor_mc.visible = false;
                    param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.x = 0;
                }
                break;
                case 3:
                if(param3 != -1)
                {
                    param1.magicBar_mc.visible = true;
                    param1.magicBar_mc.setBar(param3,param5);
                    _loc8_ = param4 != "";
                    param1.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.visible = _loc8_;
                    if(_loc8_)
                    {
                        param1.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.armor_txt.htmlText = String(param4);
                    }
                }
                else
                {
                    param1.magicBar_mc.visible = false;
                    param1.infoIcons_mc.healthArmorHolder_mc.magicArmor_mc.visible = false;
                }
            }
            if(param2 != 1)
            {
                _loc9_ = -113;
                _loc10_ = 0;
                if(param1.physBar_mc.visible && param1.magicBar_mc.visible)
                {
                param1.physBar_mc.scaleX = 0.5;
                param1.physBar_mc.x = _loc9_;
                param1.magicBar_mc.scaleX = 0.5;
                param1.magicBar_mc.x = _loc10_;
                param1.frame_mc.gotoAndStop(4);
                }
                else if(param1.physBar_mc.visible)
                {
                param1.physBar_mc.scaleX = 1;
                param1.physBar_mc.x = _loc9_;
                param1.frame_mc.gotoAndStop(2);
                }
                else if(param1.magicBar_mc.visible)
                {
                param1.magicBar_mc.scaleX = 1;
                param1.magicBar_mc.x = _loc9_;
                param1.frame_mc.gotoAndStop(3);
                }
                else
                {
                param1.frame_mc.gotoAndStop(1);
                }
            }
        }
        
        public function setCharInfoPositioning(param1:MovieClip) : *
        {
            if(param1.infoIcons_mc)
            {
                switch(param1.frame_mc.currentFrame)
                {
                case 1:
                    param1.infoIcons_mc.healthArmorHolder_mc.y = 6;
                    param1.name_mc.y = !!param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.visible ? param1.infoIcons_mc.y - param1.name_mc.height : (!!param1.infoIcons_mc.visible ? param1.infoIcons_mc.y - param1.name_mc.height / 4 : param1.actionTitle_mc.y - param1.name_mc.height);
                    break;
                case 2:
                case 3:
                case 4:
                    param1.infoIcons_mc.healthArmorHolder_mc.y = -2;
                    param1.name_mc.y = !!param1.infoIcons_mc.healthArmorHolder_mc.hp_mc.visible ? param1.infoIcons_mc.y - param1.name_mc.height : (!!param1.infoIcons_mc.visible ? param1.infoIcons_mc.y - param1.name_mc.height / 2 : param1.actionTitle_mc.y - param1.name_mc.height);
                }
            }
            param1.statusInfo_mc.y = param1.name_mc.y - param1.name_mc.height;
            param1.cycle_mc.y = param1.name_mc.y + 0.5 * param1.name_mc.name_txt.textHeight - 0.5 * param1.cycle_mc.lb_mc.icon_mc.height;
            var _loc2_:uint = 10;
            param1.cycle_mc.lb_mc.x = param1.name_mc.x - 0.5 * param1.name_mc.name_txt.textWidth - param1.cycle_mc.x - param1.cycle_mc.lb_mc.icon_mc.width - _loc2_;
            param1.cycle_mc.rb_mc.x = param1.name_mc.x + 0.5 * param1.name_mc.name_txt.textWidth - param1.cycle_mc.x + _loc2_;
        }
        
        public function changeColour(param1:Color, param2:Number) : Color
        {
            param1.blueOffset += param2;
            param1.redOffset += param2;
            param1.greenOffset += param2;
            if(param1.blueOffset > 255)
            {
                param1.blueOffset = 255;
            }
            if(param1.greenOffset > 255)
            {
                param1.greenOffset = 255;
            }
            if(param1.redOffset > 255)
            {
                param1.redOffset = 255;
            }
            return param1;
        }
        
        function frame1() : *
        {
            this.events = new Array("IE PrevObject","IE NextObject");
            this.layout = "fillVFit";
            this.overhead_array = new Array();
            this.addOH_array = new Array();
            this.selectionInfo_array = new Array();
            this.status_array = new Array();
            this.hpBarToUpdate_array = new Array();
            this.OHXtraOffset = 80;
            this.APString = "";
            this.NAPString = "";
            this.CH_array = new Array();
            this.anchorPlayerId = 0;
        }
    }
}
