 
package hotBar_fla
{
    import LS_Classes.horizontalList;
    import LS_Classes.textEffect;
    import flash.display.DisplayObject;
    import flash.display.MovieClip;
    import flash.events.MouseEvent;
    import flash.external.ExternalInterface;
    import flash.geom.Point;
    import flash.text.TextFormat;
    
    public dynamic class bottombar_1 extends MovieClip
    {
       
      
        public var actionsButton_mc:actionsButton;
        
        public var basebarFrame_mc:MovieClip;
        
        public var basebar_mc:MovieClip;
        
        public var btnContainer_mc:MovieClip;
        
        public var chatBtn_mc:MovieClip;
        
        public var clickThrough_mc:MovieClip;
        
        public var cycleHotBar_mc:MovieClip;
        
        public var expBar_mc:MovieClip;
        
        public var hotkeys_mc:MovieClip;
        
        public var iconBg_mc:MovieClip;
        
        public var iggy_ci:MovieClip;
        
        public var lockButton_mc:MovieClip;
        
        public var portraitHitBox_mc:MovieClip;
        
        public var slotholder_mc:MovieClip;
        
        public var sourceHolder_mc:MovieClip;
        
        public var root_mc:MovieClip;
        
        public const logBtnPosX:uint = 1876;
        
        public const chatBtnPosY:int = 0;
        
        public const originalStageWidth:uint = 1948;
        
        public var defaultHPColour:Number;
        
        public var hotbarButtons:horizontalList;
        
        public var isSkillBarShown:Boolean;
        
        public var skillBar:Array;
        
        public var sneakSlotUpdateList:Array;
        
        public var characterHandle:Number;
        
        public var maxHotBarIndex:uint;
        
        public var sourceList:horizontalList;
        
        public var plusBtn_mc:MovieClip;
        
        public var minusBtn_mc:MovieClip;
        
        public const cToAlpha:Number = 0.65;

        public var drawerBtn_mc:MovieClip;

        public var hotkeys_pip_mc:MovieClip;
        
        public function bottombar_1()
        {
            super();
            addFrameScript(0,this.frame1);
        }
        
        public function onPortraitOut(param1:MouseEvent) : *
        {
            ExternalInterface.call("hideTooltip");
        }
        
        public function onPortraitOver(param1:MouseEvent) : *
        {
            var _loc2_:Point = new Point(this.portraitHitBox_mc.x,this.portraitHitBox_mc.y);
            _loc2_ = localToGlobal(_loc2_);
            ExternalInterface.call("showCharTooltip",this.characterHandle,_loc2_.x - root.x,_loc2_.y - root.y,this.portraitHitBox_mc.width,this.portraitHitBox_mc.height,"right");
        }
        
        public function onActionsOver() : *
        {
            this.showBtnTooltip(this.actionsButton_mc);
        }
        
        public function onActionsOut() : *
        {
            ExternalInterface.call("hideTooltip");
        }
        
        public function onInit() : *
        {
            var indicator:MovieClip = null;
            this.characterHandle = 0;
            this.portraitHitBox_mc.addEventListener(MouseEvent.ROLL_OUT,this.onPortraitOut);
            this.portraitHitBox_mc.addEventListener(MouseEvent.ROLL_OVER,this.onPortraitOver);
            this.clickThrough_mc.mouseEnabled = true;
            ExternalInterface.call("registerAnchorId","bottomBar");
            ExternalInterface.call("setAnchor","bottom","screen","bottom");
            this.basebar_mc.mouseEnabled = false;
            this.basebar_mc.mouseChildren = false;
            this.hotkeys_mc.mouseEnabled = false;
            this.hotkeys_mc.mouseChildren = false;
            this.sourceHolder_mc.mouseEnabled = false;
            this.sourceHolder_mc.mouseChildren = false;
            this.basebarFrame_mc.mouseEnabled = false;
            this.basebarFrame_mc.mouseChildren = false;
            this.actionsButton_mc.initialize("",function():*
            {
                (root as MovieClip).toggleActionSkillHolder();
            });
            this.setExp(0);
            this.hotkeys_mc.filters = textEffect.createStrokeFilter(0,1.2,0.8,1,3);
            this.slotholder_mc.initSlot();
            this.lockButton_mc.setLocked(true);
            this.sourceList = new horizontalList();
            this.sourceList.EL_SPACING = 0;
            this.sourceHolder_mc.addChild(this.sourceList);
            this.sourceList.canPositionInvisibleElements = true;
            var i:uint = 0;
            while(i < 145)
            {
                indicator = new sourceIndicator();
                indicator.visible = false;
                this.sourceList.addElement(indicator,false);
                i++;
            }
            this.sourceList.positionElements();
            this.cycleHotBar_mc.onInit();
            this.lockButton_mc.toAlpha = this.cToAlpha;
            this.actionsButton_mc.onOverFunc = this.onActionsOver;
            this.actionsButton_mc.onOutFunc = this.onActionsOut;
        }
        
        public function setButton(param1:Number, param2:String, param3:String) : *
        {
            var _loc4_:MovieClip = null;
            if(param1 == 6)
            {
                this.setActionButtonText(param2);
                this.actionsButton_mc.tooltip = param3;
            }
            else
            {
                _loc4_ = null;
                if(param1 > this.hotbarButtons.length - 1)
                {
                (_loc4_ = new hotBarButton()).icon_bg = new MovieClip();
                _loc4_.icon_bg.alpha = _loc4_.toAlpha = this.cToAlpha;
                _loc4_.disable_mc.visible = false;
                _loc4_.id = param1;
                this.hotbarButtons.addElement(_loc4_,true);
                _loc4_.setImage(param1);
                _loc4_.active_mc.visible = false;
                _loc4_.bg_mc.visible = true;
                }
                if(!_loc4_)
                {
                _loc4_ = this.hotbarButtons.getAt(param1);
                }
                _loc4_.setText(param2);
                _loc4_.tooltip = param3;
            }
        }
        
        public function setActionButtonText(param1:String) : *
        {
            var _loc2_:Number = 26;
            var _loc3_:TextFormat = this.actionsButton_mc.text_txt.defaultTextFormat;
            if(param1.length > 1)
            {
                _loc3_.size = 12;
                this.actionsButton_mc.text_txt.y = this.actionsButton_mc.textY = _loc2_ + 6;
            }
            else
            {
                _loc3_.size = 18;
                this.actionsButton_mc.text_txt.y = this.actionsButton_mc.textY = _loc2_;
            }
            this.actionsButton_mc.text_txt.defaultTextFormat = _loc3_;
            this.actionsButton_mc.text_txt.text = param1.toUpperCase();
        }
        
        public function setChatBtnVisible(param1:Boolean) : *
        {
            this.chatBtn_mc.visible = param1;
        }
        
        public function showSkillBar(param1:Boolean) : *
        {
            var _loc2_:* = undefined;
            this.isSkillBarShown = param1;
            for each(_loc2_ in this.skillBar)
            {
                _loc2_.visible = param1;
            }
            if(param1)
            {
                this.chatBtn_mc.y = this.chatBtnPosY;
            }
            else
            {
                this.chatBtn_mc.y = this.basebar_mc.height;
            }
        }
        
        public function setAllText(param1:Array) : *
        {
            var _loc3_:uint = 0;
            var _loc2_:Number = this.hotkeys_mc.textArray.length;
            if(param1.length <= _loc2_)
            {
                while(_loc3_ < _loc2_)
                {
                this.hotkeys_mc.setText(_loc3_,param1[_loc3_]);
                _loc3_++;
                }
            }
            else
            {
                ExternalInterface.call("UIAssert","text array is bigger then the number of textfields.");
            }
        }
        
        public function setButtonActive(param1:Number, param2:Boolean) : *
        {
            if(param1 >= 0 && param1 < this.hotbarButtons.length)
            {
                this.hotbarButtons.getAt(param1).setButtonActive(param2);
            }
        }
        
        public function showBtnTooltip(param1:MovieClip, param2:String = "") : *
        {
            var _loc3_:Point = new Point(0,0);
            _loc3_ = param1.localToGlobal(_loc3_);
            if(param2 == "" && param1.tooltip != null)
            {
                param2 = param1.tooltip;
            }
            if(param2 != "")
            {
                ExternalInterface.call("showTooltip",param2,_loc3_.x - root.x,_loc3_.y - root.y,param1.width,param1.height,"top");
            }
        }
        
        public function setExp(param1:Number, param2:Boolean = false) : *
        {
            if(param1 > 1)
            {
                param1 = 1;
            }
            if(param1 < 0)
            {
                param1 = 0;
            }
            if(param2)
            {
                this.expBar_mc.addExpAnimated(param1);
            }
            else
            {
                this.expBar_mc.setExp(param1);
            }
        }
        
        public function setSlotAmount(param1:Number, param2:Number) : *
        {
            this.slotholder_mc.setSlotAmount(param1,param2);
        }
        
        public function setSlotCost(param1:Number, param2:Number) : *
        {
            this.slotholder_mc.setSlotCost(param1,param2);
        }
        
        public function setSlotPreviewEnabled(param1:Number, param2:Boolean) : *
        {
            this.slotholder_mc.setSlotPreviewEnabled(param1,param2);
        }
        
        public function setAllSlotsPreviewEnabled(param1:Boolean) : *
        {
            this.slotholder_mc.setAllSlotsPreviewEnabled(param1);
        }
        
        public function setSlotEnabled(param1:Number, param2:Boolean) : *
        {
            this.slotholder_mc.setSlotEnabled(param1,param2);
        }
        
        public function setAllSlotsEnabled(param1:Boolean) : *
        {
            this.slotholder_mc.setAllSlotsEnabled(param1);
            this.setAllSlotsPreviewEnabled(true);
        }
        
        public function setSlotImage(param1:Number, param2:String) : *
        {
            this.slotholder_mc.setSlotImage(param1,param2);
        }
        
        public function setSlot(param1:Number, param2:Number, param3:Number, param4:String = "", param5:Boolean = true) : *
        {
            this.slotholder_mc.setSlot(param1,param2,param3,param4,param5);
        }
        
        public function setSlotCoolDown(param1:Number, param2:Number) : *
        {
            this.slotholder_mc.setSlotCoolDown(param1,param2);
        }
        
        public function getGlobalPositionOfMC(param1:MovieClip) : Point
        {
            var _loc2_:Point = new Point(param1.x,param1.y);
            var _loc3_:DisplayObject = param1.parent;
            while(_loc3_ && (_loc3_ != root || _loc3_ != stage))
            {
                _loc2_.x += _loc3_.x;
                _loc2_.y += _loc3_.y;
                _loc3_ = _loc3_.parent;
            }
            return _loc2_;
        }
        
        public function onPlusBtn() : *
        {
            ExternalInterface.call("pipAddHotbar");
        }
        
        public function onMinusBtn() : *
        {
            ExternalInterface.call("pipRemoveHotbar");
        }

        public function onDrawerBtn() : *
        {
            this.hotkeys_pip_mc.toggleDrawer(!this.hotkeys_pip_mc.drawer_mc.visible);
        }
        
        function frame1() : *
        {
            this.root_mc = root as MovieClip;
            this.defaultHPColour = 12713984;
            this.hotbarButtons = new horizontalList();
            this.btnContainer_mc.addChild(this.hotbarButtons);
            this.hotbarButtons.EL_SPACING = -2;
            this.isSkillBarShown = true;
            this.skillBar = new Array(this.hotkeys_mc,this.lockButton_mc,this.btnContainer_mc,this.expBar_mc,this.basebar_mc,this.slotholder_mc,this.sourceHolder_mc,this.actionsButton_mc,this.iggy_ci,this.iconBg_mc,this.basebarFrame_mc,this.cycleHotBar_mc,this.portraitHitBox_mc,this.clickThrough_mc);
            this.sneakSlotUpdateList = new Array();
            this.maxHotBarIndex = 0;
            this.plusBtn_mc.initialize("",this.onPlusBtn);
            this.minusBtn_mc.initialize("",this.onMinusBtn);

            this.drawerBtn_mc.initialize("", this.onDrawerBtn);
        }
    }
}
