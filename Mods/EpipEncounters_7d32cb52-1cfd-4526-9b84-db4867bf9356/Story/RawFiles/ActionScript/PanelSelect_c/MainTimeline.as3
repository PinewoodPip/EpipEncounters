package panelSelect_c_fla
{
    import LS_Classes.radialMenu;
    import com.flashdynamix.motion.TweensyTimelineZero;
    import com.flashdynamix.motion.TweensyZero;
    import fl.motion.easing.Linear;
    import flash.display.MovieClip;
    import flash.events.Event;
    import flash.external.ExternalInterface;
    import flash.text.TextFieldAutoSize;
    
    public dynamic class MainTimeline extends MovieClip
    {
        
        
        public var buttonHolder_mc:MovieClip;
        
        public var radialHolder_mc:MovieClip;
        
        public var events:Array;
        
        public var openCloseTL:TweensyTimelineZero;
        
        public var stickHAxis:Number;
        
        public var stickVAxis:Number;
        
        public const degToRad:Number = 0.017453292519943295;
        
        public const radToDeg:Number = 57.29577951308232;
        
        public var layout:String;
        
        public var list:radialMenu;
        
        public const openTime:Number = 0.1;
        
        public const closeTime:Number = 0.1;
        
        public const closeScale:Number = 0.9;
        
        public const closeAlpha:Number = 0.2;
        
        public var isClosing:Boolean;
        
        public var panelArray:Array;
        
        public var panelStateArray:Array;
        
        public function MainTimeline()
        {
            super();
            addFrameScript(0,this.frame1);
        }
        
        public function onFrame(param1:Event) : *
        {
            var _loc2_:Number = NaN;
            if(this.stickHAxis != 0 || this.stickVAxis != 0)
            {
                _loc2_ = Math.atan2(this.stickVAxis,this.stickHAxis);
                this.list.selectDirectionRad(_loc2_);
                this.radialHolder_mc.indic_mc.gotoAndStop(2);
                this.radialHolder_mc.indic_mc.rotation = _loc2_ * this.radToDeg;
            }
            else
            {
                this.radialHolder_mc.indic_mc.gotoAndStop(1);
            }
        }
        
        public function onEventInit() : *
        {
            this.list.isOpen = true;
            this.buttonHolder_mc.buttonHint_mc.centerButtons = true;
            this.buttonHolder_mc.buttonHint_mc.containerMaxWidth = 900;
            this.radialHolder_mc.scaleX = this.radialHolder_mc.scaleY = this.closeScale;
            this.radialHolder_mc.alpha = this.closeAlpha;
            this.buttonHolder_mc.alpha = this.closeAlpha;
        }
        
        public function onEventResize() : *
        {
        }
        
        public function setAnchor(param1:Number, param2:* = true) : *
        {
            ExternalInterface.call("registerAnchorId","panelSelect_c" + param1);
            ExternalInterface.call("setAnchor","center","splitscreen","center");
        }
        
        public function onEventDown(param1:Number) : *
        {
            var _loc2_:Boolean = false;
            var _loc3_:String = this.events[param1];
            switch(this.events[param1])
            {
                case "IE PanelSelect":
                this.openMenu();
                _loc2_ = true;
                break;
                case "IE UICancel":
                _loc2_ = true;
            }
            return _loc2_;
        }
        
        public function onEventUp(param1:Number) : *
        {
            var _loc2_:Boolean = false;
            var _loc3_:String = this.events[param1];
            switch(this.events[param1])
            {
                case "IE PanelSelect":
                this.closeMenu(true);
                _loc2_ = true;
                break;
                case "IE UICancel":
                this.list.selectMC(null);
                this.closeMenu();
                _loc2_ = true;
            }
            return _loc2_;
        }
        
        public function selectPanel(param1:Number) : *
        {
            var _loc2_:MovieClip = this.list.getElementByNumber("id",param1);
            if(_loc2_ != null)
            {
                this.list.selectMC(_loc2_,true);
            }
        }

        public function clearPanels() : *
        {
            this.list.clearElements();
        }
        
        public function addPanel(param1:Number, param2:String) : *
        {
            var _loc3_:MovieClip = this.list.getElementByNumber("id",param1);
            if(_loc3_ == null)
            {
                _loc3_ = new Panel();
                _loc3_.selectable = true;
                _loc3_.bg_mc.gotoAndStop(2);
                _loc3_.radRot = 0;
                _loc3_.id = param1;
                this.list.addElement(_loc3_,false);
                _loc3_.info_mc.icon_mc.gotoAndStop(_loc3_.id + 1);
                _loc3_.info_mc.text_txt.autoSize = TextFieldAutoSize.CENTER;
            }
            if(_loc3_)
            {
                _loc3_.updated = true;
                _loc3_.info_mc.text_txt.htmlText = param2;
                _loc3_.bg_mc.fonkel_mc.visible = false;
            }
        }
        
        public function removeChildrenOf(param1:MovieClip) : void
        {
            var _loc2_:int = 0;
            if(param1.numChildren != 0)
            {
                _loc2_ = param1.numChildren;
                while(_loc2_ > 0)
                {
                _loc2_--;
                param1.removeChildAt(_loc2_);
                }
            }
        }
        
        public function openMenu() : *
        {
            ExternalInterface.call("pipMenuOpening");
            ExternalInterface.call("PlaySound","UI_Panel_Select_R");
            this.list.selectMC(null);
            this.isClosing = false;
            this.openCloseTL = TweensyZero.to(this.radialHolder_mc,{
                "scaleX":1,
                "scaleY":1,
                "alpha":1
            },this.openTime,Linear.easeNone);
            this.openCloseTL.onComplete = this.onOpened;
            TweensyZero.to(this.buttonHolder_mc,{"alpha":1},this.openTime,Linear.easeNone);
        }
        
        public function onOpened() : *
        {
            if(this.openCloseTL)
            {
                this.openCloseTL.onComplete = null;
            }
            this.openCloseTL = null;
        }
        
        public function onClosed() : *
        {
            this.isClosing = false;
            if(this.openCloseTL)
            {
                this.openCloseTL.onComplete = null;
            }
            this.openCloseTL = null;
            ExternalInterface.call("hideUI");
        }
        
        public function closeMenu(param1:Boolean = false) : *
        {
            var _loc2_:MovieClip = null;
            if(!this.isClosing)
            {
                ExternalInterface.call("closing");
                this.isClosing = true;
                if(param1)
                {
                _loc2_ = this.list.getCurrentMovieClip();
                if(_loc2_ && _loc2_.selectable)
                {
                    ExternalInterface.call("openPanel",_loc2_.id);
                }
                }
                this.openCloseTL = TweensyZero.to(this.radialHolder_mc,{
                "scaleX":this.closeScale,
                "scaleY":this.closeScale,
                "alpha":this.closeAlpha
                },this.closeTime,Linear.easeNone);
                this.openCloseTL.onComplete = this.onClosed;
                TweensyZero.to(this.buttonHolder_mc,{"alpha":this.closeAlpha},this.openTime,Linear.easeNone);
            }
        }
        
        public function addBtnHint(param1:Number, param2:Number, param3:String) : *
        {
            this.buttonHolder_mc.buttonHint_mc.addBtnHint(param1,param3,param2);
        }
        
        public function clearBtnHints() : *
        {
            this.buttonHolder_mc.buttonHint_mc.clearBtnHints();
        }
        
        public function updatePanels() : *
        {
            var _loc2_:Number = NaN;
            var _loc3_:String = null;
            var _loc4_:MovieClip = null;
            var _loc1_:Number = 0;
            _loc1_ = 0;
            while(_loc1_ < this.panelArray.length)
            {
                _loc2_ = this.panelArray[_loc1_];
                _loc3_ = this.panelArray[_loc1_ + 1];
                this.addPanel(_loc2_,_loc3_);
                _loc1_ = _loc1_ + 2;
            }
            _loc1_ = 0;
            while(_loc1_ < this.list.length)
            {
                if(_loc4_ = this.list.getAt(_loc1_))
                {
                if(_loc4_.updated)
                {
                    _loc4_.updated = false;
                    _loc1_++;
                }
                else
                {
                    this.list.removeElement(_loc1_,false);
                }
                }
            }
            this.list.positionElements();
        }
        
        public function updatePanelStates() : *
        {
            var _loc2_:Number = NaN;
            var _loc3_:Boolean = false;
            var _loc1_:* = 0;
            while(_loc1_ < this.panelStateArray.length)
            {
                _loc2_ = this.panelStateArray[_loc1_];
                _loc3_ = this.panelStateArray[_loc1_ + 1];
                this.setPanelEnabled(_loc2_,_loc3_);
                _loc1_ = _loc1_ + 2;
            }
        }
        
        public function setPanelEnabled(param1:Number, param2:Boolean) : *
        {
            var _loc3_:MovieClip = this.list.getElementByNumber("id",param1);
            if(_loc3_ != null)
            {
                _loc3_.setEnabled(param2);
            }
        }
        
        public function showPanelFlash(param1:Number, param2:Boolean) : *
        {
            var _loc3_:MovieClip = this.list.getElementByNumber("id",param1);
            if(_loc3_ != null)
            {
                _loc3_.showFlash(param2);
            }
        }
        
        public function clearParty() : *
        {
            this.list.clearElements();
        }
        
        function frame1() : *
        {
            this.events = new Array("IE UICancel","IE PanelSelect");
            this.openCloseTL = null;
            this.stickHAxis = 0;
            this.stickVAxis = 0;
            this.layout = "fixed";
            this.list = new radialMenu();
            this.radialHolder_mc.listHolder_mc.addChild(this.list);
            this.list.radius = 250;
            this.list.m_closedRadius = this.list.radius;
            this.list.TweenOpenDuration = 0.1;
            this.list.AnimatePos = false;
            addEventListener(Event.ENTER_FRAME,this.onFrame);
            this.isClosing = false;
            this.panelArray = new Array();
            this.panelStateArray = new Array();
        }
    }
}
