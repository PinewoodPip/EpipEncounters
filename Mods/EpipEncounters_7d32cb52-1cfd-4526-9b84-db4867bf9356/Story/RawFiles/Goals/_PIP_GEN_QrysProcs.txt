Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION

PROC PROC_PIP_GrantTreasure((CHARACTERGUID)_Char, (STRING)_Treasure)
AND
QRY_AMER_GEN_GetHelperObjectAtPosition(1.0, 1.0, 1.0)
AND
DB_AMER_GEN_OUTPUT_Item(_Helper)
AND
CharacterGetLevel(_Char, _Level)
THEN
GenerateTreasure(_Helper, _Treasure, _Level, _Char);
MoveAllItemsTo(_Helper, _Char);

// IF ItemMoved(_item)
// THEN
// PROC_AMER_GEN_ItemStatusText(_item, "tt");

// lmao
// PROC PROC_AMER_GEN_CharacterCombatLogText_Param_StrIntIntInt((CHARACTERGUID)_Char, (STRING)_Text, (STRING)_TextParam, (INTEGER)_IntParam, (INTEGER)_IntParamB, (INTEGER)_IntParamC)
// THEN
// PROC_AMER_Hook_SetParam_String(_Text, _TextParam);
// PROC_AMER_Hook_SetParam_Int(_IntParam, _IntParamB);
// PROC_AMER_Hook_SetParam_Int(_IntParamC);
// PROC_AMER_Hook_StoryEvent(_Char, "AMER_GEN_CharacterCombatLogText_Param_StrIntIntInt");

// when this query is called, first clear the previous output
// QRY QRY_DERPYBUTACTUALLYITSWRITTENBYPIP_GetPoisonBottleHeal((CHARACTERGUID)_Char)
// AND
// DB_AMER_GEN_OUTPUT_Real(_Value)
// THEN
// NOT DB_AMER_GEN_OUTPUT_Real(_Value);

// QRY QRY_DERPYBUTACTUALLYITSWRITTENBYPIP_GetPoisonBottleHeal((CHARACTERGUID)_Char)
// THEN
// DB_AMER_GEN_OUTPUT_Real(0.3); // base value

// // if char has the talent, double the base value
// QRY QRY_DERPYBUTACTUALLYITSWRITTENBYPIP_GetPoisonBottleHeal((CHARACTERGUID)_Char)
// AND
// CharacterHasTalent(_Char, "FiveStarRestaurant", 1)
// AND
// DB_AMER_GEN_OUTPUT_Real(_Value)
// AND
// RealProduct(_Value, 2.0, _ValueWithTalent)
// THEN
// NOT DB_AMER_GEN_OUTPUT_Real(_Value);
// DB_AMER_GEN_OUTPUT_Real(_ValueWithTalent);

// IF
// CharacterUsedItem((CHARACTERGUID)_Char,_Item)
// AND
// CharacterHasTalent(_Char, "FiveStarRestaurant", _HasTalent)
// AND
// GetTemplate(_Item, _Template)
// AND
// DB_Derpy_PoisonPotions(_Template)
// AND
// GetVarFloat(_Char, "AMER_GEN_MaximumVitality", _MaxVit)
// AND
// IntegerSum(1, _HasTalent, _EffectMultiplier) // GIGABRAIN SOLUTION!!!
// AND
// Real(_EffectMultiplier, _EffectMultiplierReal)
// AND
// RealProduct(_MaxVit, 0.30, _DamageBase)
// AND
// RealProduct(_DamageBase, _EffectMultiplierReal, _Damage)
// AND
// Integer(_Damage, _DamageInt)
// THEN
// PROC_AMER_GEN_ApplyDamage(_Char, _DamageInt, "Poison", _Char, 0);

// PROC PROC_AMER_KeywordStat_Celestial_Fire((CHARACTERGUID)_Char, (CHARACTERGUID)_Target, (STRING)_RequestID)
// AND
// DB_AMER_Ascension_SpecialLogic(_Char, "Ascension_Celestial_MUTA_MagicShell", _)
// AND
// CharacterHasTalent(_Target, "Zombie", _IsUndead)
// AND
// QRY_DERPY_Celestial_MUTA_RegenPoisoned_GetStatus(_Target, _IsUndead)
// AND
// DB_AMER_GEN_OUTPUT_String(_Status)
// THEN
// ApplyStatus(_Target, _Status, 12.0, 0, _Char);

// QRY QRY_DERPY_Celestial_MUTA_RegenPoisoned_GetStatus((CHARACTERGUID)_Target, (INTEGER)_IsUndead)
// AND
// DB_AMER_GEN_OUTPUT_String(_Status)
// THEN
// NOT DB_AMER_GEN_OUTPUT_String(_Status);

// QRY QRY_DERPY_Celestial_MUTA_RegenPoisoned_GetStatus((CHARACTERGUID)_Target, 1)
// THEN
// DB_AMER_GEN_OUTPUT_String("POISONED");

// QRY QRY_DERPY_Celestial_MUTA_RegenPoisoned_GetStatus((CHARACTERGUID)_Target, 0)
// THEN
// DB_AMER_GEN_OUTPUT_String("REGENERATION");

QRY QRY_PIP_StatusText((STRING)_Text)
AND
CharacterGetHostCharacter(_Char)
AND
QRY_PIP_StatusText(_Char, _Text)
THEN
DB_NOOP();

QRY QRY_PIP_StatusText((CHARACTERGUID)_Char, (STRING)_Text)
THEN
CharacterStatusText(_Char, _Text);

// count the rounds that a character has lasted in combat.
PROC PROC_AMER_Combat_TurnStarted(_Character, 0)
AND
DB_PIP_CharacterCombatRound(_Character, _Round)
AND
IntegerSum(_Round, 1, _NewRound)
THEN
NOT DB_PIP_CharacterCombatRound(_Character, _Round);
DB_PIP_CharacterCombatRound(_Character, _NewRound);

PROC PROC_AMER_Combat_TurnStarted(_Character, 0)
AND
NOT DB_PIP_CharacterCombatRound(_Character, _)
THEN
DB_PIP_CharacterCombatRound(_Character, 1);

IF ObjectLeftCombat((CHARACTERGUID)_Char, _)
AND
DB_PIP_CharacterCombatRound(_Char, _Round)
THEN
NOT DB_PIP_CharacterCombatRound(_Char, _Round);


EXITSECTION

ENDEXITSECTION
ParentTargetEdge "EEModWrapper"