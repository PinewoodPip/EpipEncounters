Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION

PROC PROC_PIP_GrantTreasure((CHARACTERGUID)_Char, (STRING)_Treasure)
AND
QRY_AMER_GEN_GetHelperObjectAtPosition(1.0, 1.0, 1.0)
AND
DB_AMER_GEN_OUTPUT_Item(_Helper)
AND
CharacterGetLevel(_Char, _Level)
THEN
GenerateTreasure(_Helper, _Treasure, _Level, _Char);
MoveAllItemsTo(_Helper, _Char);

QRY QRY_PIP_StatusText((STRING)_Text)
AND
CharacterGetHostCharacter(_Char)
AND
QRY_PIP_StatusText(_Char, _Text)
THEN
DB_NOOP();

QRY QRY_PIP_StatusText((CHARACTERGUID)_Char, (STRING)_Text)
THEN
CharacterStatusText(_Char, _Text);

// count the rounds that a character has lasted in combat.
PROC PROC_AMER_Combat_TurnStarted(_Character, 0)
AND
DB_PIP_CharacterCombatRound(_Character, _Round)
AND
IntegerSum(_Round, 1, _NewRound)
THEN
NOT DB_PIP_CharacterCombatRound(_Character, _Round);
DB_PIP_CharacterCombatRound(_Character, _NewRound);

PROC PROC_AMER_Combat_TurnStarted(_Character, 0)
AND
NOT DB_PIP_CharacterCombatRound(_Character, _)
THEN
DB_PIP_CharacterCombatRound(_Character, 1);

IF ObjectLeftCombat((CHARACTERGUID)_Char, _)
AND
DB_PIP_CharacterCombatRound(_Char, _Round)
THEN
NOT DB_PIP_CharacterCombatRound(_Char, _Round);

PROC PROC_PIP_ReEquipItem((CHARACTERGUID)_Char, (ITEMGUID)_Item) // separate PROC so it can be reused in the future
THEN
PROC_AMER_TempStat_FlexStat_Add(_Char, "Attribute", "Strength", 10.0, 200, "");
PROC_AMER_TempStat_FlexStat_Add(_Char, "Attribute", "Intelligence", 10.0, 200, "");
PROC_AMER_TempStat_FlexStat_Add(_Char, "Attribute", "Finesse", 10.0, 200, "");
PROC_AMER_TempStat_FlexStat_Add(_Char, "Attribute", "Memory", 10.0, 200, "");
CharacterUnequipItem(_Char, _Item);
DB_PIP_ItemBeingReEquipped(_Char, _Item);
ProcObjectTimer(_Char, "PIP_ReEquipItem", 50); // everything in this engine is powered by timers

PROC ProcObjectTimerFinished((CHARACTERGUID)_Char, "PIP_ReEquipItem")
AND
DB_PIP_ItemBeingReEquipped(_Char, _Item)
THEN
CharacterEquipItem(_Char, _Item);
NOT DB_PIP_ItemBeingReEquipped(_Char, _Item);


EXITSECTION

ENDEXITSECTION
ParentTargetEdge "EEModWrapper"