Version 1
SubGoalCombiner SGC_AND
INITSECTION
//=============================================//
//              A R T I F A C T S              //
//                                             //
//   Written by Matteo "Ameranth" T. (2018)    //
//=============================================//
//Scripting for "Artifact" unique items and their rune counterparts.


//Prefix of script to activate/deactivate automatically when an artifact power is equipped.
//Ex. if "Artifact_MyArtifact" is equipped, the script "AMER_GLO_Artifact_MyArtifact" is activated/deactivated.
//If we also add the prefix "MyMod_" then *additionally* the script "MyMod_Artifact_MyArtifact" is activated/deactivated.
DB_AMER_Artifacts_ScriptPrefix("AMER_GLO_");

//REGION Artifact and Artifact-Rune declarations.
//DB_AMER_Artifacts(_Root, _ExpectedSlot, _ArtifactID);
//DB_AMER_Artifacts_EquippedStatusMod_FlexStat(_ArtifactID, _SourceType, _TargetStatus, _StatType, _Stat, _Amount, _SelfBool);
//DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat(_ArtifactID, _SourceType, _TargetStatus, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Amount, _SelfBool);
//DB_AMER_Artifacts_EquippedStatusMod_AddStatus(_ArtifactID, _SourceType, _TargetStatus, _AddedStatus, _Duration, _ForceStatus, _SelfBool);
//DB_AMER_Artifacts_EquippedStatusMod_AddHealing(_ArtifactID, _SourceType, _TargetStatus, _HealBase, _HealType, _HealScaling, _StatType, _Stat, _TriageBool, _SelfBool);
//DB_AMER_Artifacts_EquippedStatusMod_SpreadingStatus(_ArtifactID, _SourceType, _TargetStatus, _Radius, _Conditions, _SourceFX, _TargetFX, _BeamFX, _SelfBool);
//
//_ExpectedSlot is one of: "Helmet", "Amulet", "Breast", "Belt", "Gloves", "Leggings", "Boots", "Weapon", "Shield", "Ring".
//_SourceType is one of "Both", "Base", or "Rune". This is to denote whether the bonus defined is intended for the equippable Artifact item, its Rune-variant, or both.


DB_AMER_Artifacts("AMER_UNI_Absence_Leather_f2d18e71-1385-4c05-a274-d18026fa2b29", "AMER_UNI_Absence_Rune_afc31b2e-7949-4835-b688-d26f2046100e", "Boots", "Artifact_Absence");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Absence", "Both", "SneakRefund", "", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_Abyss_Platemail_51ba6c46-8e3d-4365-9272-bdd1f43c988a", "AMER_UNI_Abyss_Rune_686a3e17-d592-4bde-86c9-a43a76a9cf35", "Breast", "Artifact_Abyss");

DB_AMER_Artifacts("AMER_UNI_Adamant_Shield_9949e5e6-ec79-40a3-8a7b-008155822346", "AMER_UNI_Adamant_Rune_1c5aba55-57d7-4f51-b792-475f9b5397c9", "Shield", "Artifact_Adamant");
DB_AMER_Artifacts_EquippedStatusMod_AddStatus("Artifact_Adamant", "Both", "AMER_WARD", "AMER_ADAMANT", 6.0, 0, 1);
//DB_AMER_Artifacts_DeltamodOnIdentify("Artifact_Adamant", "AMER_UNI_Adamant_9949e5e6-ec79-40a3-8a7b-008155822346", "Boost_Shield_Artifact_Adamant");

DB_AMER_Artifacts("AMER_UNI_AmaranthineBulwark_Shield_8544e38f-b611-4632-96ea-4b2e6ca68064", "AMER_UNI_AmaranthineBulwark_Rune_e956400b-0adf-4379-8f2b-ac2e7332a62a", "Shield", "Artifact_AmaranthineBulwark");
DB_AMER_Artifacts_EquippedStatusMod_FlexStat("Artifact_AmaranthineBulwark", "Both", "AMER_WARD", "Stat", "PHYSICALRESISTANCE", 12.0, 1);
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_FlexStat("Artifact_AmaranthineBulwark", "Both", "Embodiment", "Inertia", "AMER_WARD", "Stat", "PHYSICALRESISTANCE", "Artifact_AmaranthineBulwark", 0, 1.0);
//DB_AMER_Artifacts_DeltamodOnIdentify("Artifact_AmaranthineBulwark", "AMER_UNI_AmaranthineBulwark_8544e38f-b611-4632-96ea-4b2e6ca68064", "Boost_Shield_Artifact_AmaranthineBulwark");

DB_AMER_Artifacts("AMER_UNI_AngelsEgg_b7511c4a-2e74-4fe7-a6d8-6af4aa366a23", "AMER_UNI_AngelsEgg_Rune_e7b2f2bf-a295-44c6-a6f7-ed5bafe4a477", "Amulet", "Artifact_AngelsEgg");
DB_AMER_Reaction_ConditionTemplate("Artifact_AngelsEgg", "CanSee");

DB_AMER_Artifacts("AMER_UNI_AntediluvianCarapace_Platemail_42559c79-82af-48b1-8b0c-16ccf6f5fc90", "AMER_UNI_AntediluvianCarapace_Rune_46e28b0f-b5ad-445a-8340-ebd78f5765d3", "Breast", "Artifact_AntediluvianCarapace");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_AntediluvianCarapace", "Both", "MaxRes", "ELERES_NOPSN", "Artifact_AntediluvianCarapace", "", 2.0);
DB_AMER_Artifacts_EquippedScalingStat_ExtendedStat("Artifact_AntediluvianCarapace", "Both", "Ability", "Perseverance", "MaxRes", "ELERES_NOPSN", "Artifact_AntediluvianCarapace", "", 0.5);

DB_AMER_Artifacts("AMER_UNI_ApothecarysGuile_Leather_70ce1774-ba67-4e76-a1cc-5f67c803f1bd", "AMER_UNI_ApothecarysGuile_Rune_b6a5af70-a439-4af6-a3d6-e99df73b97d4", "Gloves", "Artifact_ApothecarysGuile");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_ApothecarysGuile", "Both", "Status_AddDuration", "POISONED", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_Arcturus_129a3b30-c934-49fb-ba9f-76d8d9bf815e", "AMER_UNI_Arcturus_Rune_0fdf74c2-d66a-4940-b58c-ca740f30af0c", "Amulet", "Artifact_Arcturus");
DB_AMER_Artifacts_EquippedStatusMod_FlexStat("Artifact_Arcturus", "Both", "AMER_WARD", "Stat", "PHYSICALRESISTANCE", 5.0, 0);
DB_AMER_Artifacts_EquippedStatusMod_FlexStat("Artifact_Arcturus", "Both", "AMER_WARD", "Stat", "PIERCINGRESISTANCE", 5.0, 0);
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Arcturus", "Both", "KeywordLogic_Flag", "Ward", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_Austerity_9fceb5ad-e02d-4eb4-8098-cdf795d51adf", "AMER_UNI_Austerity_Rune_3b401786-032d-4e66-9352-100322c8e6fd", "Ring", "Artifact_Austerity");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Austerity", "Both", "ToggleStatus", "AMER_AUSTERITY", "", "", -1.0);
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Austerity", "Both", "DegenDamage", "MaximumVitality", "Water", "", 0.25);

DB_AMER_Artifacts("AMER_UNI_BlackglassBrand_Sword_1H_6b8aefdb-13f5-4cf3-8ea2-d9e0760b3eea", "AMER_UNI_BlackglassBrand_Rune_3355fb9f-2bd6-4d89-9e05-d4aa64a81b84", "Weapon", "Artifact_BlackglassBrand");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_BlackglassBrand", "Both", "FreeReactionCharge", "AMER_Centurion", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_Bloodforge_Platemail_48f6c263-6234-41a3-a3de-170f82df0abf", "AMER_UNI_Bloodforge_Rune_2bb5039f-9ad3-432a-8449-32ab5a5dd759", "Breast", "Artifact_Bloodforge");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Bloodforge", "Both", "Regen_MagicArmor", "", "", "", 25.0);
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Bloodforge", "Both", "Regen_PhysicalArmor", "", "", "", 25.0);
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Bloodforge", "Both", "DegenDamage", "MaximumVitality", "Piercing", "", 0.15);

DB_AMER_Artifacts("AMER_UNI_BountyHunter_Leather_d4dafdc1-3ec0-44ed-ba20-b5e33aac1c01", "AMER_UNI_BountyHunter_Rune_172bacef-0d72-4a5d-941a-c2bcf2069b97", "Breast", "Artifact_BountyHunter");

DB_AMER_Artifacts("AMER_UNI_TheButchersDisciple_Axe_1H_daf7209a-0915-42d4-9925-5f18e0a4407a", "AMER_UNI_TheButchersDisciple_Rune_e292b87c-25f0-42f8-ba48-3e2cc9f751de", "Weapon", "Artifact_ButchersDisciple");

DB_AMER_Artifacts("AMER_UNI_TheButchersWill_Leather_717fa35a-ae08-47a1-bd80-3fa3a784ad4b", "AMER_UNI_TheButchersWill_Rune_d8b48a12-8669-42e1-858e-24ce073a3801", "Gloves", "Artifact_ButchersWill");

DB_AMER_Artifacts("AMER_UNI_TheCannibal_Staff_98fce942-7931-4041-81bb-7bd848a45eb8", "AMER_UNI_TheCannibal_Rune_d4bc3ff0-9b19-48e2-bbd1-91a90345c653", "Weapon", "Artifact_Cannibal");

DB_AMER_Artifacts("AMER_UNI_Carnality_35eef736-fc2c-40d7-be95-80bda21a00a6", "AMER_UNI_Carnality_Rune_32b919ae-eb51-4c9e-b95d-caf5bd0afbe7", "Ring", "Artifact_Carnality");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Carnality", "Both", "ToggleStatus", "AMER_CARNALITY", "", "", -1.0);
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Carnality", "Both", "DegenDamage", "MaximumVitality", "Piercing", "", 0.15);

DB_AMER_Artifacts("AMER_UNI_Cataclysm_Dagger_ddf6fe71-ebbf-4876-9b20-bba2e3c53d81", "AMER_UNI_Cataclysm_Rune_08e6b9df-93a6-4415-a53b-31cc4bfe0755", "Weapon", "Artifact_Cataclysm");

DB_AMER_Artifacts("AMER_UNI_Charity_Robes_308ca2bc-a602-475f-8e2f-ecbbfcbc39db", "AMER_UNI_Charity_Rune_b85e93cd-0e4e-4924-91e9-18a294df89cb", "Gloves", "Artifact_Charity");

DB_AMER_Artifacts("AMER_UNI_TheChthonian_Axe_2H_ab669c08-fcf6-4751-9a86-64af7dd2863b", "AMER_UNI_TheChthonian_Rune_86d70ff3-94ef-4cc0-b49e-f6a29e1da756", "Weapon", "Artifact_Chthonian");

DB_AMER_Artifacts("AMER_UNI_Consecration_Platemail_b14f13be-bdbc-4268-bf8a-ea4eb5dd4b58", "AMER_UNI_Consecration_Rune_fdbc6ad0-62f5-404e-afac-c20cd7944eb9", "Boots", "Artifact_Consecration");

DB_AMER_Artifacts("AMER_UNI_Convergence_Crossbow_89cc3edd-af46-4432-ab21-b25034b08e3c", "AMER_UNI_Convergence_Rune_33ed7f25-c707-4dec-b8fc-1fac3ca8c79d", "Weapon", "Artifact_Convergence");

DB_AMER_Artifacts("AMER_UNI_CoruscatingSilks_Robes_1e7c7a0f-541f-4b01-9beb-2313e133a159", "AMER_UNI_CoruscatingSilks_Rune_4491045f-e8b3-42b8-8209-1c91177922e5", "Breast", "Artifact_CorruscatingSilks");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_CorruscatingSilks", "Both", "ArmorDamageConversion", "Physical", "Air", "", 0.3);

DB_AMER_Artifacts("AMER_UNI_TheCrucible_Mace_2H_a5b39108-850b-426f-bc85-40cfc4cd95f2", "AMER_UNI_TheCrucible_Rune_c03c3c84-5f29-49a9-82b3-0547a08a733d", "Weapon", "Artifact_Crucible");

DB_AMER_Artifacts("AMER_UNI_Deck_94902e34-3693-460c-a7a4-81f27cfc5ec7", "AMER_UNI_Deck_Rune_eb9f9170-bf4d-40e6-a2f1-1ff499e4f8c5", "Amulet", "Artifact_Deck");
DB_AMER_Artifacts_EquippedFlexStat("Artifact_Deck", "Both", "Spell", "Target_AMER_Artifact_Deck", 1.0);

DB_AMER_Artifacts("AMER_UNI_Desperation_Leather_8e94d381-c195-4bad-942e-7f52df58d6c8", "AMER_UNI_Desperation_Rune_74a03339-ef71-46cb-9ae5-91763bef326c", "Boots", "Artifact_Desperation");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Desperation", "Both", "ToggleStatus", "AMER_DESPERATION", "", "", -1.0);

DB_AMER_Artifacts("AMER_UNI_Dread_52e6d2a2-9699-4c36-8bc7-9059a22f1624", "AMER_UNI_Dread_Rune_23ec2353-2a75-4e05-8de6-2abe839225c1", "Ring", "Artifact_Dread");
//DB_AMER_Artifacts_EquippedScalingStat_StatusMod_FlexStat("Artifact_Dread", "Both", "Attribute", "Strength", "AMER_DREAD", "Stat", "Lifesteal", "Artifact_Dread", 0.0, 1.0);

DB_AMER_Artifacts("AMER_UNI_DrogsLuck_c1e3e38a-de97-466e-bdc2-f916e7622e57", "AMER_UNI_DrogsLuck_Rune_a942773d-a9b2-4883-8d83-9325676ad294", "Amulet", "Artifact_DrogsLuck");
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_DrogsLuck", "Both", "AMER_SCORCHED", "PercAttributeIncrease", "Intelligence", "", "", 15.0, 1);
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_DrogsLuck", "Both", "AMER_SCORCHED", "PercAttributeIncrease", "Wits", "", "", 15.0, 1);
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_ExtendedStat("Artifact_DrogsLuck", "Both", "Ability", "Luck", "AMER_SCORCHED", "PercAttributeIncrease", "Intelligence", "", "", "DrogsLuck", 1, 4.0);
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_ExtendedStat("Artifact_DrogsLuck", "Both", "Ability", "FireSpecialist", "AMER_SCORCHED", "PercAttributeIncrease", "Intelligence", "", "", "DrogsLuck", 1, 2.0);
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_ExtendedStat("Artifact_DrogsLuck", "Both", "Ability", "Luck", "AMER_SCORCHED", "PercAttributeIncrease", "Wits", "", "", "DrogsLuck", 1, 4.0);
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_ExtendedStat("Artifact_DrogsLuck", "Both", "Ability", "FireSpecialist", "AMER_SCORCHED", "PercAttributeIncrease", "Wits", "", "", "DrogsLuck", 1, 2.0);

DB_AMER_Artifacts("AMER_UNI_Dominion_Platemail_dc75d6e0-c900-443d-ab42-8b0904f1d626", "AMER_UNI_Dominion_Rune_1640501a-2067-4e39-b3ed-a7c6e23a4ea3", "Gloves", "Artifact_Dominion");

DB_AMER_Artifacts("AMER_UNI_Eclipse_Staff_13660086-f745-48d1-9d3a-c1560372f426", "AMER_UNI_Eclipse_Rune_a40d49d4-b0cb-4a01-aac8-0deda6267f09", "Weapon", "Artifact_Eclipse");
DB_AMER_Reaction_ConditionTemplate("Artifact_Eclipse", "CanSee");

DB_AMER_Artifacts("AMER_UNI_EmpyreanVestments_Robes_6826cfad-fc09-40ec-827e-3b26dabdc804", "AMER_UNI_EmpyreanVestments_Rune_8ff8098d-43d0-4a46-9997-a046e8d92d5e", "Breast", "Artifact_EmpyreanVestments");

DB_AMER_Artifacts("AMER_UNI_EtherTide_Robes_a27989b8-9d1f-4bf1-b2b6-877820cbf595", "AMER_UNI_EtherTide_Rune_139a3219-f127-489b-9d17-f3ae40cfbd87", "Gloves", "Artifact_EtherTide");

DB_AMER_Artifacts("AMER_UNI_Exaltation_8ce4fe8a-41cb-479a-b1ab-c2305bd3f840", "AMER_UNI_Exaltation_Rune_cefc217c-7f79-44a4-ad57-bd10587f8297", "Ring", "Artifact_Exaltation");

DB_AMER_Artifacts("AMER_UNI_Expedition_Bow_0e3e575b-2a18-45ac-a6e6-670248e80650", "AMER_UNI_Expedition_Rune_dffb73c3-8a00-4ce6-a73a-c549ac075f07", "Weapon", "Artifact_Expedition");

DB_AMER_Artifacts("AMER_UNI_EyeOfTheStorm_05822cb2-cd54-46fb-9218-4a2c1fcd09db", "AMER_UNI_EyeOfTheStorm_Rune_4d7e68eb-472f-4cee-bbfe-99c2f0bf9b88", "Ring", "Artifact_EyeOfTheStorm");
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_ExtendedStat("Artifact_EyeOfTheStorm", "Both", "Ability", "Aerotheurge", "AMER_EYEOFTHESTORM", "PercAttributeIncrease", "Finesse", "", "", "Artifact_EyeOfTheStorm", 1, 2.5);
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_EyeOfTheStorm", "Both", "AMER_EYEOFTHESTORM", "PercAttributeIncrease", "Finesse", "", "", 25.0, 1);

DB_AMER_Artifacts("AMER_UNI_FaceOfTheFallen_Shield_c3201b00-ed7e-4321-93a1-386e1ec1508b", "AMER_UNI_FaceOfTheFallen_Rune_6e6743f6-52b1-4c9b-bc39-8733e8850e2b", "Shield", "Artifact_FaceOfTheFallen");
//DB_AMER_Artifacts_DeltamodOnIdentify("Artifact_FaceOfTheFallen", "AMER_UNI_FaceOfTheFallen_c3201b00-ed7e-4321-93a1-386e1ec1508b", "Boost_Shield_Artifact_FaceOfTheFallen");
DB_AMER_Artifacts_EquippedFlexStat("Artifact_FaceOfTheFallen", "Both", "Spell", "Target_AMER_Artifact_FaceOfTheFallen", 1.0);

DB_AMER_Artifacts("AMER_UNI_Famine_Axe_2H_0cbdd629-416e-4305-b22e-e3288963f4b6", "AMER_UNI_Famine_Rune_e8f8d868-f208-4c72-9b73-aad0d4f7e09f", "Weapon", "Artifact_Famine");

DB_AMER_Artifacts("AMER_UNI_Fecundity_9a31f366-784d-416d-9f7d-d5f052135e1c", "AMER_UNI_Fecundity_Rune_1376a748-664a-4520-ab09-7299d7b15390", "Ring", "Artifact_Fecundity");

DB_AMER_Artifacts("AMER_UNI_FistOfDecay_Robes_c0391cd2-9012-452b-8b59-2104be881804", "AMER_UNI_FistOfDecay_Rune_88d3fab0-ed36-4c20-b050-b82956200dc8", "Gloves", "Artifact_FistOfDecay");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_FistOfDecay", "Both", "BlockEquipSlot", "Shield", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_Ghostflame_6ad56825-75af-4248-af1c-43200ec25caf", "AMER_UNI_Ghostflame_Rune_4ccf4271-0eb0-406e-b917-82b84dd87cc2", "Amulet", "Artifact_Ghostflame");

DB_AMER_Artifacts("AMER_UNI_GiantsSkull_Platemail_1db0b5be-fa13-4c93-ae53-0552f67e1075", "AMER_UNI_GiantsSkull_Rune_013e49de-43d4-4d4b-bce3-88864a2dc53d", "Helmet", "Artifact_GiantsSkull");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_GiantsSkull", "Both", "ArmorDamageConversion", "Physical", "Earth", "", 0.2);

DB_AMER_Artifacts("AMER_UNI_Glacier_Mace_2H_39f36e1b-e3c6-41a7-bb36-6ac9091121e6", "AMER_UNI_Glacier_Rune_aef6fcde-08bb-482f-8ff5-a5d13b7db22f", "Weapon", "Artifact_Glacier");
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Glacier", "Both", "AMER_BRITTLE_1", "Artifact_Glacier_Damage", "", "", "", 0.05, 0);
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Glacier", "Both", "AMER_BRITTLE_2", "Artifact_Glacier_Damage", "", "", "", 0.05, 0);
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Glacier", "Both", "AMER_BRITTLE_3", "Artifact_Glacier_Damage", "", "", "", 0.05, 0);

DB_AMER_Artifacts("AMER_UNI_Gluttony_Spear_684ae15d-cd97-4d94-bb5a-3136a57bcc82", "AMER_UNI_Gluttony_Rune_9daf82cc-db67-4918-8142-12051ec78993", "Weapon", "Artifact_Gluttony");

DB_AMER_Artifacts("AMER_UNI_Godspeed_Leather_57faf828-ca32-44db-a450-88bdfd3a2e19", "AMER_UNI_Godspeed_Rune_371bce5d-2d54-400a-974d-e4f30e092b9b", "Boots", "Artifact_Godspeed");

DB_AMER_Artifacts("AMER_UNI_Goldforge_Mace_2H_40cce3a4-dd7f-4992-a0d9-3b0a27246a4d", "AMER_UNI_Goldforge_Rune_8bc09d16-75c7-4e5a-830d-fab9acfa1a11", "Weapon", "Artifact_Goldforge");
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Goldforge", "Both", "AMER_PROSPERITY", "VolatileArmor_Physical", "300", "Earth", "AMER_RS3_FX_VolatileArmor", 30.0, 1);
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Goldforge", "Both", "AMER_PROSPERITY", "VolatileArmor_Magic", "300", "Fire", "", 30.0, 1);

DB_AMER_Artifacts("AMER_UNI_Golem_Axe_2H_fa4b9d59-e1d8-46e8-9883-ae08cb618983", "AMER_UNI_Golem_Rune_6677124c-4604-43cb-952d-23efc50e56a2", "Weapon", "Artifact_Golem");

DB_AMER_Artifacts("AMER_UNI_GramSwordOfGrief_Sword_2H_5e44d043-b9d1-466b-a7a2-997b928dcc5e", "AMER_UNI_GramSwordOfGrief_Rune_b943d928-be9d-4e9c-94f0-a624924dd110", "Weapon", "Artifact_GramSwordOfGrief");

DB_AMER_Artifacts("AMER_UNI_Hibernaculum_Bow_affbe035-7553-4151-a013-0fb12142c54b", "AMER_UNI_Hibernaculum_Rune_0b6d1bf4-c3b5-4291-b790-c39a351b6be0", "Weapon", "Artifact_Hibernaculum");

DB_AMER_Artifacts("AMER_UNI_Impetus_Spear_fff1dafe-0988-446a-947f-04d0fa179207", "AMER_UNI_Impetus_Rune_8505698b-d328-40d0-8ebe-9112ae585e36", "Weapon", "Artifact_Impetus");

DB_AMER_Artifacts("AMER_UNI_InfernalContract_Shield_96afb247-fe97-4b48-b1c9-d6cfb1671570", "AMER_UNI_InfernalContract_Rune_0a48df34-0e22-4e81-9196-96f6b06b93ab", "Shield", "Artifact_InfernalContract");
//DB_AMER_Artifacts_DeltamodOnIdentify("Artifact_InfernalContract", "AMER_UNI_InfernalContract_96afb247-fe97-4b48-b1c9-d6cfb1671570", "Boost_Shield_Artifact_InfernalContract");

DB_AMER_Artifacts("AMER_UNI_IronMaiden_Platemail_bf18ca16-f822-48e7-8c65-022dd125b928", "AMER_UNI_IronMaiden_Rune_ee3702f2-b3e2-4a2f-ac61-e8c227c5c1d1", "Helmet", "Artifact_IronMaiden");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_IronMaiden", "Both", "ArmorDamageConversion", "Magic", "Physical", "", 0.15);

DB_AMER_Artifacts("AMER_UNI_TheJaguar_Leather_5bd63bb6-707f-45dd-b6a6-d587a8babd3c", "AMER_UNI_TheJaguar_Rune_106b7b9b-ab97-490c-bbbb-74d292d042fc", "Breast", "Artifact_Jaguar");
DB_AMER_Artifacts_EquippedStatusMod_FlexStat("Artifact_Jaguar", "Both", "SNEAKING", "Stat", "MOVEMENT", 200.0, 1);
DB_AMER_Artifacts_EquippedStatusMod_FlexStat("Artifact_Jaguar", "Both", "SNEAKING", "Stat", "APMAXIMUM", 2.0, 1);
//DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Jaguar", "Both", "BLEEDING", "RemoteImpact_OnStatus", "AMER_STATUSTICK_BLEEDING", "Projectile_AMER_SCRIPT_StatusDamage_Bleeding", "", 1.0, 0);
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Jaguar", "Both", "BLEEDING", "CustomDoTTick", "RemoteImpact", "Projectile_AMER_SCRIPT_StatusDamage_Bleeding", "CustomDoTTick_Bleeding", 1.0, 0);

DB_AMER_Artifacts("AMER_UNI_Judgement_Sword_2H_43b7cfe8-3a5a-48a5-9b39-7f27229ba36b", "AMER_UNI_Judgement_Rune_a6974e3c-7341-4368-8d37-2fee8e20dd3f", "Weapon", "Artifact_Judgement");

DB_AMER_Artifacts("AMER_UNI_Kudzu_Robes_cc36a70b-4260-489f-9196-4572ce20ae47", "AMER_UNI_Kudzu_Rune_99f328fc-409a-42af-82e5-3913d6910045", "Boots", "Artifact_Kudzu");
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Kudzu", "Both", "POISONED", "ToggleStatus", "AMER_KUDZU", "", "", -1.0, 1);

DB_AMER_Artifacts("AMER_UNI_LambentBlade_Sword_1H_0a182fe3-639f-4bfc-99f3-b8e863139f50", "AMER_UNI_LambentBlade_Rune_5aa5bcdd-6fb4-461a-93ad-2e988df31f8f", "Weapon", "Artifact_LambentBlade");

DB_AMER_Artifacts("AMER_UNI_Leper_Dagger_62bd59bc-b662-4d13-9b97-9f121edd01ca", "AMER_UNI_Leper_Rune_d3913dfe-85ff-436f-8880-61e739c02412", "Weapon", "Artifact_Leper");
DB_AMER_Runes_EffectOnEquip_Special("AMER_UNI_Leper_Rune_d3913dfe-85ff-436f-8880-61e739c02412", "Weapon", "TalentRune", "Stench");

DB_AMER_Artifacts("AMER_UNI_Leviathan_Mace_2H_2b0eb17a-b644-47fb-b65a-85ca8e727cfb", "AMER_UNI_Leviathan_Rune_c22f2e5b-881a-459a-b552-bcf09f249539", "Weapon", "Artifact_Leviathan");
DB_AMER_Artifacts_EquippedStatusMod_FlexStat("Artifact_Leviathan", "Both", "WET", "Stat", "MOVEMENT", 50.0, 1);

DB_AMER_Artifacts("AMER_UNI_Lightspire_Spear_ed3b3d6f-25c2-48e3-b053-7d14034348ea", "AMER_UNI_Lightspire_Rune_6fbef305-b6a5-47f4-8ffb-a84b490b4ca4", "Weapon", "Artifact_Lightspire");

DB_AMER_Artifacts("AMER_UNI_TheLocustCrown_Robes_f75b90f0-b2f9-4a19-aca2-1fe9458fbe9d", "AMER_UNI_TheLocustCrown_Rune_45fff2b1-4a44-4d30-af4f-78ba63f6f2a8", "Helmet", "Artifact_LocustCrown");

DB_AMER_Artifacts("AMER_UNI_Malice_Robes_8425ffd0-5236-4dee-bd98-ceb9fd4d12d0", "AMER_UNI_Malice_Rune_7b6a9205-4495-416a-96a0-2fde849d4f34", "Breast", "Artifact_Malice");

DB_AMER_Artifacts("AMER_UNI_MalleusMaleficarum_Mace_1H_61684e0f-7d5b-4c86-8df8-c9d0afc4e7ae", "AMER_UNI_MalleusMaleficarum_Rune_e85b626d-513c-4ed5-b36a-284c67add9d7", "Weapon", "Artifact_MalleusMaleficarum");

DB_AMER_Artifacts("AMER_UNI_Mirage_Dagger_0d2dbc57-d91f-4e10-bc2c-932686b92dc0", "AMER_UNI_Mirage_Rune_b282cb8f-ded5-4509-894b-753f8081cdb9", "Weapon", "Artifact_Mirage");

DB_AMER_Artifacts("AMER_UNI_Misery_Robes_4ff8d1bf-fa0b-4f44-9854-43147ed4cae4", "AMER_UNI_Misery_Rune_42ae2948-9b58-4ac3-a1b5-1b8b0cba12d0", "Helmet", "Artifact_Misery");
DB_AMER_Artifacts_EquippedStatusMod_AddStatus("Artifact_Misery", "Both", "POISONED", "AMER_DECAYING_1", 6.0, 0, 1);

DB_AMER_Artifacts("AMER_UNI_Momentum_Crossbow_834fff08-cd43-4e24-8610-1a6d6a7f4705", "AMER_UNI_Momentum_Rune_d163d762-d41d-4d7a-808d-da4f4e255348", "Weapon", "Artifact_Momentum");

DB_AMER_Artifacts("AMER_UNI_Mountain_Platemail_76820f36-7915-4bac-8b2b-9fc654f452f9", "AMER_UNI_Mountain_Rune_ece3ca0e-0e69-41ad-8219-d1bcff2ab5bd", "Breast", "Artifact_Mountain");
DB_AMER_Artifacts_EquippedScalingStat_ExtendedStat("Artifact_Mountain", "Both", "Attribute", "Strength", "Artifact_MountainThreshold", "", "", "", 1.5);

DB_AMER_Artifacts("AMER_UNI_NecromancersRaiment_Robes_e96386e8-db7f-4267-aa92-6caff9ae2f7b", "AMER_UNI_NecromancersRaiment_Rune_705f612a-9109-41ca-88c4-60c24be802b0", "Breast", "Artifact_NecromancersRaiment");

DB_AMER_Artifacts("AMER_UNI_Nemesis_Leather_0339fe72-2c9c-404f-9499-7083985dfaac", "AMER_UNI_Nemesis_Rune_9d0e48c4-fa53-484c-8ee9-616094ed18ca", "Breast", "Artifact_Nemesis");
DB_AMER_Artifacts_EquippedScalingStat_ExtendedStat("Artifact_Nemesis", "Both", "Embodiment", "Force", "Artifact_Nemesis_ViolentStrikeChance", "", "", "", 0.035);

DB_AMER_Artifacts("AMER_UNI_Nightmare_Spear_5a551e28-f20a-427f-98f3-3ab3e7e6e76b", "AMER_UNI_Nightmare_Rune_e9314437-7664-4b33-8e4d-2fb65b4f3fc4", "Weapon", "Artifact_Nightmare");

DB_AMER_Artifacts("AMER_UNI_Nihility_Platemail_ae72ebc1-446a-4808-980f-bb06997929f0", "AMER_UNI_Nihility_Rune_05e6365b-39f9-438b-899b-235de8b9e7e1", "Breast", "Artifact_Nihility");
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Nihility", "Both", "AMER_WEAKENED_3", "InstantEffect", "ActivateVitalityVoid", "", "", 1.0, 2);
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Nihility", "Both", "AMER_DECAYING_3", "InstantEffect", "ActivateVitalityVoid", "", "", 1.0, 2);
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_Nihility", "Both", "AMER_TERRIFIED_3", "InstantEffect", "ActivateVitalityVoid", "", "", 1.0, 2);

DB_AMER_Artifacts("AMER_UNI_Obelisk_Staff_f123abbe-84ef-4f7b-a599-72825e41ae96", "AMER_UNI_Obelisk_Rune_5f58d8f6-ba3b-42d1-bece-4667b3397046", "Weapon", "Artifact_Obelisk");

DB_AMER_Artifacts("AMER_UNI_Occam_Dagger_4c5b5543-ca6e-407e-9278-66c8e27be0a4", "AMER_UNI_Occam_Rune_8483d917-dccd-45a5-b318-210adf8220f2", "Weapon", "Artifact_Occam");

DB_AMER_Artifacts("AMER_UNI_Onslaught_Platemail_285a972f-b30c-4424-9867-b527c8b8c47d", "AMER_UNI_Onslaught_Rune_c3809b72-7533-4bfa-9a84-7bcdf369df95", "Boots", "Artifact_Onslaught");

DB_AMER_Artifacts("AMER_UNI_Ouroboros_Leather_e2d1edf3-4a1c-4a7b-9ab5-12cad07db2ee", "AMER_UNI_Ouroboros_Rune_328a74b5-a426-4b8d-a648-dd3c48abfffb", "Breast", "Artifact_Ouroboros");

DB_AMER_Artifacts("AMER_UNI_Paragon_Robes_ddbd0267-2770-43d0-b5cf-f5a2f935ae9c", "AMER_UNI_Paragon_Rune_f9acc87d-c30c-4071-8748-6efe0ae5f33a", "Helmet", "Artifact_Paragon");

DB_AMER_Artifacts("AMER_UNI_Pariah_Wand_6951c90b-fbeb-447b-bf6e-f4422696c2c1", "AMER_UNI_Pariah_Rune_00a98dce-78d0-4c60-a7ad-56fc3697cfc4", "Weapon", "Artifact_Pariah");
//DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Pariah", "Both", "Benevolence_AddRadius", "", "", "", 2.0); //Depreciated stat.

DB_AMER_Artifacts("AMER_UNI_Pestilence_Spear_788d8c42-d4f2-4da0-8293-1074453ad8e6", "AMER_UNI_Pestilence_Rune_c1af093a-7489-46b3-bbc2-011637abaad4", "Weapon", "Artifact_Pestilence");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Pestilence", "Both", "Shoot_OnStatus", "POISONED", "Projectile_AMER_SCRIPT_Artifact_Pestilence", "Explosion", 1.0);

DB_AMER_Artifacts("AMER_UNI_PrismaticBarrier_Shield_ac8122a2-9900-4b14-87da-bc1c5e3a9300", "AMER_UNI_PrismaticBarrier_Rune_d43243f6-2336-49cf-9360-8c4b169de09f", "Shield", "Artifact_PrismaticBarrier");
//DB_AMER_Artifacts_EquippedScalingStat_FlexStat("Artifact_PrismaticBarrier", "Both", "Ability", "Perseverance", "Stat_SpecialCase", "EleResistance", 3.0);
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_FlexStat("Artifact_PrismaticBarrier", "Both", "Ability", "Perseverance", "AMER_PROSPERITY", "Stat_SpecialCase", "EleResistance", "Artifact_PrismaticBarrier", 0, 3.0);
//DB_AMER_Artifacts_DeltamodOnIdentify("Artifact_PrismaticBarrier", "AMER_UNI_PrismaticBarrier_ac8122a2-9900-4b14-87da-bc1c5e3a9300", "Boost_Shield_Artifact_PrismaticBarrier");

DB_AMER_Artifacts("AMER_UNI_Prophecy_94a7c392-b364-4d4d-a7e2-89e0374269ae", "AMER_UNI_Prophecy_Rune_94a62842-121e-4b2d-a080-8400fe195dac", "Ring", "Artifact_Prophecy");

DB_AMER_Artifacts("AMER_UNI_Pyre_Platemail_0d32f7a0-0a08-43a6-83ce-0fb31b2d4fb4", "AMER_UNI_Pyre_Rune_f6fb7fe6-a08a-40cd-9309-c9b62db9f52d", "Gloves", "Artifact_Pyre");

DB_AMER_Artifacts("AMER_UNI_Rapture_Wand_5410e049-81a6-49cb-b4cb-61dd35123be4", "AMER_UNI_Rapture_Rune_64fe7208-a2d3-45e8-ace5-cfd85177438b", "Weapon", "Artifact_Rapture");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Rapture", "Both", "KeywordLogic_Flag", "Purity", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_RedOrison_Leather_48f6188d-6e85-4526-a8bb-58eb1fd3c7ef", "AMER_UNI_RedOrison_Rune_6673424d-88ae-4323-84a9-186739ff13d8", "Gloves", "Artifact_RedOrison");

DB_AMER_Artifacts("AMER_UNI_RodOfAbeyance_Wand_dccb9e34-1c3c-4faa-99e6-1e7fdceded1d", "AMER_UNI_RodOfAbeyance_Rune_fc2de115-7044-4424-8eea-6b26895e0dd5", "Weapon", "Artifact_RodOfAbeyance");

DB_AMER_Artifacts("AMER_UNI_RodOfCommand_Wand_9a3a2a71-787f-442c-a7c0-d8e5d5d4253b", "AMER_UNI_RodOfCommand_Rune_68723eaa-c70d-4b1c-bf0f-715cdc00280e", "Weapon", "Artifact_RodOfCommand");

DB_AMER_Artifacts("AMER_UNI_RodOfConviction_Wand_707a1cfa-2b4f-4855-beb4-49136bccf117", "AMER_UNI_RodOfConviction_Rune_4f2c3afb-6b44-43ba-bea7-dabda13230e8", "Weapon", "Artifact_RodOfConviction");
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat("Artifact_RodOfConviction", "Both", "AMER_RODOFCONV", "VolatileArmor_Physical", "300", "Physical", "AMER_RS3_FX_VolatileArmor", 50.0, 1);

DB_AMER_Artifacts("AMER_UNI_Salamander_Platemail_b08e0423-a41f-4275-ad20-5844cd8b2431", "AMER_UNI_Salamander_Rune_609f79c7-8bb4-4eb9-a599-0014f92e5fb6", "Boots", "Artifact_Salamander");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Salamander", "Both", "ArmorDamageConversion", "Physical", "Fire", "", 0.2);

DB_AMER_Artifacts("AMER_UNI_SanguineHarvest_Wand_6cfa99c4-85d2-450b-9f44-aa56f1997921", "AMER_UNI_SanguineHarvest_Rune_e41172c1-4bbf-4125-886e-b28a0d5a05aa", "Weapon", "Artifact_SanguineHarvest");

DB_AMER_Artifacts("AMER_UNI_TheSavage_Staff_389ca9d6-17b6-4f17-aa4e-036efc1521b9", "AMER_UNI_TheSavage_Rune_093da89a-cbfb-40c2-a5bb-03f5ab9e8f4e", "Weapon", "Artifact_Savage");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Savage", "Both", "BasicAttackHitStatus", "Artifact_Savage", "", "", 1500.0);
DB_AMER_Artifacts_EquippedFlexStat("Artifact_Savage", "Both", "Ability", "AirSpecialist", -1.0);
DB_AMER_Artifacts_EquippedFlexStat("Artifact_Savage", "Both", "Ability", "EarthSpecialist", -1.0);
DB_AMER_Artifacts_EquippedFlexStat("Artifact_Savage", "Both", "Ability", "WaterSpecialist", -1.0);
DB_AMER_Artifacts_EquippedFlexStat("Artifact_Savage", "Both", "Ability", "FireSpecialist", -1.0);
DB_AMER_Artifacts_EquippedFlexStat("Artifact_Savage", "Both", "Ability", "Necromancy", -1.0);
DB_AMER_Artifacts_EquippedFlexStat("Artifact_Savage", "Both", "Ability", "Summoning", -1.0);

DB_AMER_Artifacts("AMER_UNI_Seraph_db8f2b31-e409-415c-89c5-d42c91a0f04f", "AMER_UNI_Seraph_Rune_29328bd4-e510-42c6-a6a8-86de1d4b6e29", "Amulet", "Artifact_Seraph");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Seraph", "Both", "FreeReactionCharge", "AMER_Celestial", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_Serenity_Robes_cc3d0fcc-45c1-48ad-9095-3090ebf64e20", "AMER_UNI_Serenity_Rune_a12da803-0fcc-4c03-a194-a29680101725", "Helmet", "Artifact_Serenity");

DB_AMER_Artifacts("AMER_UNI_Silkclimb_Robes_74feda94-2651-4cdc-8cde-26885f41a31c", "AMER_UNI_Silkclimb_Rune_2444e1a5-fffc-43cb-ac1f-d3208011b9e3", "Boots", "Artifact_Silkclimb");

DB_AMER_Artifacts("AMER_UNI_Smother_Leather_5419e1f2-c51b-45ac-96cb-767c56f8a33a", "AMER_UNI_Smother_Rune_5ab6d0f8-1e0b-4996-98a4-cf865b05540f", "Helmet", "Artifact_Smother");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Smother", "Both", "SneakRefund", "", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_Thirst_Dagger_d381f754-9bbb-4418-a9ee-69ae699b00cf", "AMER_UNI_Thirst_Rune_5197b90b-2443-4d84-b8ca-ecabf33170bb", "Weapon", "Artifact_Thirst");

DB_AMER_Artifacts("AMER_UNI_ThornHalo_Platemail_90484ec1-abd2-47a1-abb6-1fe300bc5baa", "AMER_UNI_ThornHalo_Rune_55cbe2a0-bba4-4a59-aef5-b9d697bf4f80", "Helmet", "Artifact_ThornHalo");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_ThornHalo", "Both", "ArmorDamageConversion", "Magic", "Piercing", "", 0.15);

DB_AMER_Artifacts("AMER_UNI_Trample_Platemail_36352ab1-d9f6-418e-b7e0-8a6834195358", "AMER_UNI_Trample_Rune_6ccc1e12-2b2a-4d19-8ed3-1405a0fdfe68", "Boots", "Artifact_Trample");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Trample", "Both", "Status_AddDuration", "BLEEDING", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_Tundra_Platemail_2031aad5-0c48-4288-926e-ffb802373f4c", "AMER_UNI_Tundra_Rune_b01b15df-f259-40f7-919b-66b42ec915c7", "Helmet", "Artifact_Tundra");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Tundra", "Both", "ArmorDamageConversion", "Physical", "Water", "", 0.2);

DB_AMER_Artifacts("AMER_UNI_Urgency_Leather_b64d339a-9cc3-4c33-8f15-ad86a8f82245", "AMER_UNI_Urgency_Rune_fab75597-3448-42de-8796-3a201cf13304", "Breast", "Artifact_Urgency");

DB_AMER_Artifacts("AMER_UNI_TheVault_Platemail_fdabbaea-89d6-4ee0-ac5f-8c96d2345ea3", "AMER_UNI_TheVault_Rune_1cc1459e-490e-46d5-90f1-970ad625c548", "Breast", "Artifact_Vault");

DB_AMER_Artifacts("AMER_UNI_Vertigo_Axe_1H_6ab20ae4-1ede-4544-ace1-0bc0ac14a72a", "AMER_UNI_Vertigo_Rune_1cf2fb87-45df-43b1-980d-52de5fb942d4", "Weapon", "Artifact_Vertigo");
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_FlexStat("Artifact_Vertigo", "Both", "Attribute", "Finesse", "DRUNK", "Stat", "DODGEBOOST", "Artifact_Vertigo", 0, 1.0);
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_FlexStat("Artifact_Vertigo", "Both", "Attribute", "Finesse", "DRUNK", "Stat", "ACCURACYBOOST", "Artifact_Vertigo", 0, -0.5);
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Vertigo", "Both", "PercAttributeIncrease", "Finesse", "", "", 20.0);

DB_AMER_Artifacts("AMER_UNI_Vortex_Robes_aa5f6f9f-af2d-493b-83f3-5958ed0eeb09", "AMER_UNI_Vortex_Rune_7770a77a-b0d0-4361-948b-26366f01c94a", "Boots", "Artifact_Vortex");

DB_AMER_Artifacts("AMER_UNI_Wendigo_c059b343-ec4e-4b03-a784-e9796d038f93", "AMER_UNI_Wendigo_Rune_7e053219-7d0d-4261-8a2e-c6ed9aa4502e", "Amulet", "Artifact_Wendigo");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Wendigo", "Both", "FreeReactionCharge", "AMER_Predator", "", "", 1.0);

DB_AMER_Artifacts("AMER_UNI_WintersGrasp_Platemail_2d3b1b8f-063b-429a-a6be-b79736614f61", "AMER_UNI_WintersGrasp_Rune_00b7fcc4-6625-4bf1-aa7d-1335a3c05e15", "Gloves", "Artifact_WintersGrasp");

DB_AMER_Artifacts("AMER_UNI_Wraith_Dagger_ca4acd8a-3886-4e62-8387-e4cbdcf85495", "AMER_UNI_Wraith_Rune_d476a1fc-74f0-4efc-acb9-816671c9e6eb", "Weapon", "Artifact_Wraith");

DB_AMER_Artifacts("AMER_UNI_Zeal_Sword_2H_316082cd-5f2d-49d3-b910-a87abc2bd7fc", "AMER_UNI_Zeal_Rune_ae09c357-645a-47e7-8daf-3b704032e72b", "Weapon", "Artifact_Zeal");

DB_AMER_Artifacts("AMER_UNI_Zenith_Bow_3d5974ab-a600-4e6f-9b07-a7aa5e0333bc", "AMER_UNI_Zenith_Rune_f089009a-2bdc-41c3-976f-192c98ad0e7d", "Weapon", "Artifact_Zenith");

DB_AMER_Artifacts("AMER_UNI_Zodiac_Staff_278345a9-3f2d-49a9-b1a2-05b68d91d86a", "AMER_UNI_Zodiac_Rune_eea08f98-dbce-4b28-9971-360c0c27b46b", "Weapon", "Artifact_Zodiac");
DB_AMER_Artifacts_EquippedExtendedStat("Artifact_Zodiac", "Both", "FreeReactionCharge", "Artifact_Zodiac", "", "", 1.0);

//END_REGION
KBSECTION
//=============================================//
//              A R T I F A C T S              //
//                                             //
//   Written by Matteo "Ameranth" T. (2018)    //
//=============================================//

//REGION Artifact quest reward tokens (Protean Artifacts).

//Set the level of the token when it is added to a character, if it was level 1.
IF
ItemTemplateAddedToCharacter(AMER_LOOT_UNI_ArtifactQuestChoiceToken_a70a946e-fda2-4101-82e9-605b0055dd56, _Item, _Char)
AND
DB_IsPlayer(_Char)
AND
DB_AMER_Hook_EventQueue_BackIndex(_RequestIndex)
THEN
DB_AMER_Artifacts_SetTokenLevel_CharBuffer(_RequestIndex, _Char);
PROC_AMER_GEN_ItemGetItemLevel(_Item, "AMER_Artifacts_SetTokenLevel");

PROC PROC_AMER_GEN_ItemGetItemLevel_Returned((INTEGER)_RequestIndex, (ITEMGUID)_Item, (INTEGER)_ItemLevel, "AMER_Artifacts_SetTokenLevel")
AND
DB_AMER_Artifacts_SetTokenLevel_CharBuffer(_RequestIndex, _Char)
THEN
NOT DB_AMER_Artifacts_SetTokenLevel_CharBuffer(_RequestIndex, _Char);
PROC_AMER_Artifacts_Token_TrySetLevel(_Char, _Item, _ItemLevel);

PROC PROC_AMER_Artifacts_Token_TrySetLevel((CHARACTERGUID)_Char, (ITEMGUID)_Item, 1)
AND
CharacterGetLevel(_Char, _CharLevel)
THEN
ItemLevelUpTo(_Item, _CharLevel);


//Get the level of the token when it is used, grant the reward and destroy the token.
IF
CharacterUsedItemTemplate(_Char, "AMER_LOOT_UNI_ArtifactQuestChoiceToken_a70a946e-fda2-4101-82e9-605b0055dd56", _Item)
AND
DB_AMER_Hook_EventQueue_BackIndex(_RequestIndex)
THEN
DB_AMER_Artifacts_GetTokenLevel_CharBuffer(_RequestIndex, _Char);
PROC_AMER_GEN_ItemGetItemLevel(_Item, "AMER_Artifacts_GetTokenLevel");


PROC PROC_AMER_GEN_ItemGetItemLevel_Returned((INTEGER)_RequestIndex, (ITEMGUID)_Item, (INTEGER)_ItemLevel, "AMER_Artifacts_GetTokenLevel")
AND
DB_AMER_Artifacts_GetTokenLevel_CharBuffer(_RequestIndex, _Char)
AND
QRY_AMER_Artifacts_Token_ValidateLevel(_ItemLevel, _Char)
AND
DB_AMER_GEN_OUTPUT_Integer(_LevelFinal)
AND
IntegerMin(_LevelFinal, 35, _LevelBounded)
AND
IntegertoString(_LevelBounded, _LevelStr)
AND
StringConcatenate("Reward_", _LevelStr, _State)
THEN
NOT DB_AMER_Artifacts_GetTokenLevel_CharBuffer(_RequestIndex, _Char);
CharacterGiveQuestReward(_Char, "EE_ArtifactReward", _State);
ItemDestroy(_Item);


//Differ to user's level if token's level is 1 and user's level is higher. This protects against directly using the token
//from a non-character container and getting a level 1 item as a result. Technically this allows for exploiting level
//1 tokens, but tokens dropping at level 1 should probably never happen.
QRY QRY_AMER_Artifacts_Token_ValidateLevel((INTEGER)_ItemLevel, (CHARACTERGUID)_Char)
AND
DB_AMER_GEN_OUTPUT_Integer(_OldOutput)
THEN
NOT DB_AMER_GEN_OUTPUT_Integer(_OldOutput);

QRY QRY_AMER_Artifacts_Token_ValidateLevel(1, (CHARACTERGUID)_Char)
AND
CharacterGetLevel(_Char, _CharLevel)
AND
_CharLevel > 1
THEN
DB_AMER_GEN_OUTPUT_Integer(_CharLevel);

QRY QRY_AMER_Artifacts_Token_ValidateLevel((INTEGER)_ItemLevel, (CHARACTERGUID)_Char)
AND
NOT DB_AMER_GEN_OUTPUT_Integer(_)
THEN
DB_AMER_GEN_OUTPUT_Integer(_ItemLevel);

//END_REGION


//REGION Track artifact transforms.
//This is pretty much only relevant with mods that allow template changes.

//If turning an artifact into a different root, track that this object is still considered an artifact.
PROC PROC_AMER_GEN_ObjectTransforming((GUIDSTRING)_Object, (STRING)_Root, (STRING)_ToRoot)
AND
DB_AMER_Artifacts(_Root, _, _, _ArtifactID)
AND
NOT DB_AMER_Artifacts_FakeArtifact(_Object, _)    //Not if this was a mundane item transformed into artifact.
AND
NOT DB_AMER_Artifacts_TransformedArtifact(_Object, _)
THEN
DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID);

//Ensure a transformed artifact maintains its AMER_UNI tag.
PROC PROC_AMER_GEN_ObjectTransforming((GUIDSTRING)_Object, (STRING)_Root, (STRING)_ToRoot)
//AND
//DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID)
AND
IsTagged(_Object, "AMER_UNI", 1)    //Apparently this works to keep it tagged :joy:, thanks Pip.
THEN
SetTag(_Object, "AMER_UNI");

PROC PROC_AMER_GEN_ObjectTransforming((GUIDSTRING)_Object, (STRING)_Root, (STRING)_ToRoot)
AND
DB_AMER_Artifacts_FakeArtifact(_Object, _OldArtifactID) //Clear old fake data if it existed, because we can only be a single template at once anyway.
AND
_Root != _ToRoot
THEN
NOT DB_AMER_Artifacts_FakeArtifact(_Object, _OldArtifactID);

//If turning a mundane item into an artifact root, track that this object should *not* be considered an artifact.
PROC PROC_AMER_GEN_ObjectTransforming((GUIDSTRING)_Object, (STRING)_Root, (STRING)_ToRoot)
AND
DB_AMER_Artifacts(_ToRoot, _, _, _ArtifactID)
AND
_Root != _ToRoot
AND
NOT DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID)     //This means the artifact is transforming back into its original state, so don't flag as fake.
THEN
ClearTag(_Object, "AMER_UNI");
DB_AMER_Artifacts_FakeArtifact(_Object, _ArtifactID);

//If turning a transformed artifact back into itself, clear transformed DB.
//PROC PROC_AMER_GEN_ObjectTransforming((GUIDSTRING)_Object, (STRING)_Root, (STRING)_ToRoot)
PROC PROC_AMER_GEN_ObjectTransformed((GUIDSTRING)_Object, (GUIDSTRING)_ToTemplate, 0) 
AND
DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID)
AND
String(_ToTemplate, _ToRoot)
AND
DB_AMER_Artifacts(_ToRoot, _, _, _ArtifactID)
THEN
NOT DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID);


//Return in DB_AMER_GEN_OUTPUT_String() the Artifact ID of _Object.
//The query fails if it is not an artifact.
QRY QRY_AMER_Aritfacts_GetItemArtifactID((ITEMGUID)_Object)
AND
QRY_AMER_Aritfacts_GetItemArtifactID_Internal(_Object)
AND
0 != 0  //Never allow this portion of the query to influence truth (clearing oldoutput dbs).
THEN
DB_NOOP(1);

QRY QRY_AMER_Aritfacts_GetItemArtifactID_Internal((ITEMGUID)_Object)
AND
DB_AMER_GEN_OUTPUT_String(_OldOutput)
THEN
NOT DB_AMER_GEN_OUTPUT_String(_OldOutput);

QRY QRY_AMER_Aritfacts_GetItemArtifactID((ITEMGUID)_Object)
AND
DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID)
//AND
//NOT DB_AMER_Artifacts_FakeArtifact(_Object, _)        //Always defer to DB_AMER_Artifacts_TransformedArtifact if it exists for this object.
THEN
DB_AMER_GEN_OUTPUT_String(_ArtifactID);

QRY QRY_AMER_Aritfacts_GetItemArtifactID((ITEMGUID)_Object)
AND
NOT DB_AMER_GEN_OUTPUT_String(_)
AND
GetTemplate(_Object, _Root)
AND
DB_AMER_Artifacts(_Root, _, _, _ArtifactID)
AND
NOT DB_AMER_Artifacts_FakeArtifact(_Object, _)
THEN
DB_AMER_GEN_OUTPUT_String(_ArtifactID);


//Similar to QRY_AMER_Aritfacts_GetItemArtifactID(), but has (and influences) no DB output.
QRY QRY_AMER_Artifact_ItemIsArtifact((ITEMGUID)_Object)
AND
GetTemplate(_Object, _Root)
AND
DB_AMER_Artifacts(_Root, _, _, _ArtifactID)
AND
NOT DB_AMER_Artifacts_FakeArtifact(_Object, _)
THEN
DB_NOOP(1);

QRY QRY_AMER_Artifact_ItemIsArtifact((ITEMGUID)_Object)
AND
DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID)
//AND
//NOT DB_AMER_Artifacts_FakeArtifact(_Object, _)        //Always defer to DB_AMER_Artifacts_TransformedArtifact if it exists for this object.
THEN
DB_NOOP(1);



PROC PROC_AMER_GEN_ItemBeingRemoved(_Object)
AND
DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID)
THEN
NOT DB_AMER_Artifacts_TransformedArtifact(_Object, _ArtifactID);

PROC PROC_AMER_GEN_ItemBeingRemoved(_Object)
AND
DB_AMER_Artifacts_FakeArtifact(_Object, _OldArtifactID)
THEN
NOT DB_AMER_Artifacts_FakeArtifact(_Object, _OldArtifactID);

//END_REGION


//REGION Register Un/Equiping/Stacking an artifact effect.

PROC PROC_AMER_GEN_PlayerItemEquipped((ITEMGUID)_Item, (CHARACTERGUID)_Char, (STRING)_EquipSlot)
AND
QRY_AMER_Aritfacts_GetItemArtifactID(_Item)
AND
DB_AMER_GEN_OUTPUT_String(_ArtifactID)
AND
NOT QRY_AMER_Artifacts_ArtifactEquipment_InvalidStacking(_Char, _Item, _ArtifactID)
THEN
PROC_AMER_Artifacts_ArtifactEquipped(_Char, _Item, _ArtifactID, "Base");

PROC PROC_AMER_GEN_PlayerItemUnequipped((ITEMGUID)_Item, (CHARACTERGUID)_Char, (STRING)_EquipSlot)
AND
QRY_AMER_Aritfacts_GetItemArtifactID(_Item)
AND
DB_AMER_GEN_OUTPUT_String(_ArtifactID)
AND
NOT QRY_AMER_Artifacts_UnequipBlocked(_Char, _ArtifactID)	//If the item is unequipped from our script's imposed conditions, we don't want to fire the unequip routine.
THEN
PROC_AMER_Artifacts_ArtifactUnequipped(_Char, _Item, _ArtifactID, "Base");



PROC PROC_AMER_Runes_RuneEquipped((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_EquipSlot, (STRING)_EquipCategory, (STRING)_Rune, (INTEGER)_SocketIndex)
AND
DB_AMER_Artifacts(_, _Rune, _ExpectedSlot, _ArtifactID)
AND
NOT QRY_AMER_Artifacts_ArtifactRune_InvalidSlot(_Char, _Item, _ArtifactID, _EquipSlot, _ExpectedSlot, _SocketIndex)
AND
NOT QRY_AMER_Artifacts_ArtifactRune_InvalidStacking(_Char, _Item, _ArtifactID, _SocketIndex)
THEN
PROC_AMER_Artifacts_ArtifactEquipped(_Char, _Item, _ArtifactID, "Rune");

PROC PROC_AMER_Runes_RuneUnequipped((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_EquipSlot, (STRING)_EquipCategory, (STRING)_Rune, (INTEGER)_SocketIndex)
AND
DB_AMER_Artifacts(_, _Rune, _, _ArtifactID)
AND
NOT QRY_AMER_Artifacts_UnequipBlocked(_Char, _ArtifactID)	//If the rune is unequipped from our script's imposed conditions, we don't want to fire the unequip routine.
THEN
PROC_AMER_Artifacts_ArtifactUnequipped(_Char, _Item, _ArtifactID, "Rune");


QRY QRY_AMER_Artifacts_ArtifactRune_InvalidSlot((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_ArtifactID, (STRING)_EquipSlot, (STRING)_ExpectedSlot, (INTEGER)_SocketIndex)
AND
NOT QRY_AMER_Artifacts_ValidateSlot(_ArtifactID, _EquipSlot, _ExpectedSlot)	//Don't allow socketing Artifact Runes into equipment that doesn't match the equipment slot of the original Artifact Unique.
THEN
DB_AMER_Runes_RejectRuneInserted(_Char, _Item, _SocketIndex);
ProcObjectTimer(_Char, "AMER_Runes_RejectRuneInserted", 10);
OpenMessageBox(_Char, "AMER_Artifacts_TryRune_IncompatibleSlot");


QRY QRY_AMER_Artifacts_ValidateSlot((STRING)_ArtifactID, (STRING)_EquipSlot, (STRING)_ExpectedSlot)
AND
_EquipSlot == _ExpectedSlot
THEN
DB_NOOP(1);

QRY QRY_AMER_Artifacts_ValidateSlot((STRING)_ArtifactID, "Weapon2", "Weapon")	//Handle off-hand wielding a weapon.
THEN
DB_NOOP(1);

QRY QRY_AMER_Artifacts_ValidateSlot((STRING)_ArtifactID, "Ring2", "Ring")	//Handle second ring slot.
THEN
DB_NOOP(1);



//This only matters if script is altered to allow socketing an artifact rune into an item that is unequipped.
//This will likely become possible due to recent script API additions.
//In this case of placing an artifact rune into the parent artifact, prevent it.
//PROC PROC_AMER_Runes_RuneEquipped((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_EquipSlot, (STRING)_EquipCategory, (STRING)_RuneRoot, (INTEGER)_SocketIndex)
QRY QRY_AMER_Runes_RuneInserted_RepeatRune((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_RuneRoot, (INTEGER)_SocketIndex)
AND
DB_AMER_Artifacts(_, _RuneRoot, _, _)
AND
QRY_AMER_Aritfacts_GetItemArtifactID(_Item)
AND
DB_AMER_GEN_OUTPUT_String(_ArtifactID)
AND
DB_AMER_Artifacts(_, _RuneRoot, _, _ArtifactID) //Yes the DB gets hit twice this way, but it's probably more efficient overall since socketing a rune, let alone an artifact rune, is very uncommon.
THEN
DB_AMER_Runes_RejectRuneInserted(_Char, _Item, _SocketIndex);
ProcObjectTimer(_Char, "AMER_Runes_RejectRuneInserted", 10);
OpenMessageBox(_Char, "AMER_Artifacts_RuneIntoParent");


//Prevent players from socketing artifact runes into items that are not equipped,
//because we cannot know the equipment slot of the item if it isn't equipped.
PROC PROC_AMER_Runes_RuneInserted_NotEquipped((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_RuneRoot, (INTEGER)_SocketIndex)
AND
DB_AMER_Artifacts(_, _RuneRoot, _, _)
THEN
DB_AMER_Runes_RejectRuneInserted(_Char, _Item, _SocketIndex);
ProcObjectTimer(_Char, "AMER_Runes_RejectRuneInserted", 10);
OpenMessageBox(_Char, "AMER_Artifacts_MustEquipToRune");



//If we already have this effect, stacking is invalid if we have too many stacks.
//"Too many" stacks is as is defined in DB_AMER_Artifacts_EffectStackAllowed(_ArtifactID, _AllowedStacks).
//If no such DB exists, then any stacking at all is unallowed.
QRY QRY_AMER_Artifacts_ArtifactRune_InvalidStacking((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_ArtifactID, (INTEGER)_SocketIndex)
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _Count)
AND
QRY_AMER_Artifacts_Artifact_InvalidStacking(_Char, _ArtifactID, _Count)
THEN
DB_AMER_Artifacts_BlockUnequip(_Char, _ArtifactID);
DB_AMER_Runes_RejectRuneInserted(_Char, _Item, _SocketIndex);
ProcObjectTimer(_Char, "AMER_Runes_RejectRuneInserted", 10);

QRY QRY_AMER_Artifacts_ArtifactEquipment_InvalidStacking((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_ArtifactID)
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _Count)
AND
QRY_AMER_Artifacts_Artifact_InvalidStacking(_Char, _ArtifactID, _Count)
THEN
DB_AMER_Artifacts_BlockUnequip(_Char, _ArtifactID);
CharacterUnequipItem(_Char, _Item);


QRY QRY_AMER_Artifacts_Artifact_InvalidStacking((CHARACTERGUID)_Char, (STRING)_ArtifactID, (INTEGER)_Count)
AND
DB_AMER_Artifacts_EffectStackAllowed(_ArtifactID, (INTEGER)_AllowedStacks)
AND
_Count >= _AllowedStacks
THEN
OpenMessageBox(_Char, "AMER_Artifacts_InvalidStacking");

QRY QRY_AMER_Artifacts_Artifact_InvalidStacking((CHARACTERGUID)_Char, (STRING)_ArtifactID, (INTEGER)_Count)
AND
NOT DB_AMER_Artifacts_EffectStackAllowed(_ArtifactID, _)
THEN
OpenMessageBox(_Char, "AMER_Artifacts_AlreadyEquipped");



QRY QRY_AMER_Artifacts_UnequipBlocked((CHARACTERGUID)_Char, (STRING)_ArtifactID)
AND
DB_AMER_Artifacts_BlockUnequip(_Char, _ArtifactID)
THEN
NOT DB_AMER_Artifacts_BlockUnequip(_Char, _ArtifactID);



//Handle an Artifact Unique or Rune being un/equipped.
//Considerations for equipping multiple of the same Artifact
//effect are made, though our default intent is to prevent this
//behavior, in case mods want to allow it.
PROC PROC_AMER_Artifacts_ArtifactEquipped((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_ArtifactID, (STRING)_SourceType)
THEN
PROC_AMER_Artifacts_EquipEffects(_Char, _ArtifactID, _SourceType);

PROC PROC_AMER_Artifacts_EquipEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType)
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _OldCount)
AND
IntegerSum(_OldCount, 1, _NewCount)
THEN
NOT DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _OldCount);
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _NewCount);
PROC_AMER_Artifacts_StackEffects(_Char, _ArtifactID, _NewCount);	//Hook for artifact effects that require initialization, and stacking of their effect.

PROC PROC_AMER_Artifacts_EquipEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType)
AND
NOT DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _)
THEN
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, 1);
PROC_AMER_Artifacts_InitEffects_ActivateGoal(_ArtifactID);  //Important that this happens *before* PROC_AMER_Artifacts_InitEffects(), so artifact logic can catch it.
PROC_AMER_Artifacts_InitEffects(_Char, _ArtifactID, _SourceType);	//Hook for artifact effects that require initialization.


PROC PROC_AMER_Artifacts_ArtifactUnequipped((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_ArtifactID, (STRING)_SourceType)
THEN
PROC_AMER_Artifacts_UnequipEffects(_Char, _ArtifactID, _SourceType);

PROC PROC_AMER_Artifacts_UnequipEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType)
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _OldCount)
AND
IntegerSubtract(_OldCount, 1, _NewCount)
THEN
NOT DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _OldCount);
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _NewCount);
PROC_AMER_Artifacts_RemoveStackedEffects(_Char, _ArtifactID, _NewCount);	//Hook for artifact effects that require cleanup or upkeep when removing a stack of their effect.

PROC PROC_AMER_Artifacts_UnequipEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType)
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, 0)	//Remove zero-count entries, throw removal proc when all instances have been removed.
THEN
NOT DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, 0);
PROC_AMER_Artifacts_RemoveEffects(_Char, _ArtifactID, _SourceType);	//Hook for artifact effects that require cleanup.
PROC_AMER_Artifacts_InitEffects_DeactivateGoal(_ArtifactID);  //Important that this happens *after* PROC_AMER_Artifacts_RemoveEffects(), so artifact logic can catch it.



//A goal is automatically activated for the artifact's scripted logic, it must
//follow the naming convention DB_AMER_Artifacts_ScriptPrefix(_Prefix) + "ArtifactID", which probably looks
//like "AMER_GLO_Artifact_ApothecarysGuile". This goal is also automatically
//completed when there are no active instances of the artifact power.
PROC PROC_AMER_Artifacts_InitEffects_ActivateGoal((STRING)_ArtifactID)
AND
DB_AMER_Artifacts_ScriptPrefix(_Prefix)
AND
StringConcatenate(_Prefix, _ArtifactID, _Goal)
THEN
PROC_AMER_GEN_Goal_Activate(_Goal);

PROC PROC_AMER_Artifacts_InitEffects_DeactivateGoal((STRING)_ArtifactID)
AND
NOT DB_AMER_Artifacts_EquippedEffects(_, _ArtifactID, _)    //The artifact power is no longer equipped by anyone, complete its goal.
AND
DB_AMER_Artifacts_ScriptPrefix(_Prefix)
AND
StringConcatenate(_Prefix, _ArtifactID, _Goal)
THEN
PROC_AMER_GEN_Goal_Complete(_Goal);


//Hook into this to do some actions when the artifact effect is first equipped.
PROC PROC_AMER_Artifacts_InitEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType)
THEN
DB_NOOP(1);

//Hook into this to do some actions when this artifact effect is no longer carried on _Char.
PROC PROC_AMER_Artifacts_RemoveEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType)
THEN
DB_NOOP(1);

//END_REGION


//REGION De/Activate declared Artifact effects.
//We handle adding/removing effects by passing a multiplier of 1.0 or -1.0.
//The PROC_AMER_Artifacts_ToggleEffects() routine then multiplies the effect
//amounts by this multipler and applies them--thereby allowing us to handle
//both equipping and unequipping with the same set of logic.

PROC PROC_AMER_Artifacts_InitEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType)
THEN
PROC_AMER_Artifacts_ToggleEffects(_Char, _ArtifactID, _SourceType, 1.0);

PROC PROC_AMER_Artifacts_RemoveEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType)
THEN
PROC_AMER_Artifacts_ToggleEffects(_Char, _ArtifactID, _SourceType, -1.0);


//REGION Permanent effects.

PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedFlexStat((STRING)_ArtifactID, (STRING)_StoredSourceType, (STRING)_StatType, (STRING)_Stat, (REAL)_Amount)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Amount, _Multiplier, _Toggle)
THEN
PROC_AMER_FlexStat_CharacterAddStat(_Char, _StatType, _Stat, _Toggle);



PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedExtendedStat(_ArtifactID, _StoredSourceType, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Amount)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Amount, _Multiplier, _Toggle)
THEN
PROC_AMER_ExtendedStat_CharacterAddStat(_Char, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Toggle);

//END_REGION


//REGION Statusmod effects.

PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedStatusMod_FlexStat(_ArtifactID, _StoredSourceType, _TargetStatus, _StatType, _Stat, _Amount, _SelfBool)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Amount, _Multiplier, _Toggle)
THEN
PROC_AMER_Artifacts_ToggleEffects_StatusMod_FlexStat(_Char, _TargetStatus, _StatType, _Stat, _Toggle, _ArtifactID, _SelfBool, _Multiplier);

PROC PROC_AMER_Artifacts_ToggleEffects_StatusMod_FlexStat((CHARACTERGUID)_Char, (STRING)_TargetStatus, (STRING)_StatType, (STRING)_Stat, (REAL)_Toggle, (STRING)_ArtifactID, (INTEGER)_SelfBool, (REAL)_Multiplier)
THEN
PROC_AMER_StatusMod_Add_FlexStat(_Char, _TargetStatus, _StatType, _Stat, _Toggle, _ArtifactID, _SelfBool);

//Remove artifact-granted statusmods from affected characters when the artifact is unequipped.
PROC PROC_AMER_Artifacts_ToggleEffects_StatusMod_FlexStat((CHARACTERGUID)_Char, (STRING)_TargetStatus, (STRING)_StatType, (STRING)_Stat, (REAL)_Toggle, (STRING)_ArtifactID, (INTEGER)_SelfBool, (REAL)_Multiplier)
AND
_Multiplier < 0.0
AND
DB_AMER_StatusMod_FlexStat_ActiveMods(_AffectedChar, _Char, _TargetStatus, _StatType, _Stat, _StoredAmount, _ArtifactID)
AND
RealProduct(_StoredAmount, -1.0, _Negation)
THEN
NOT DB_AMER_StatusMod_FlexStat_ActiveMods(_AffectedChar, _Char, _TargetStatus, _StatType, _Stat, _StoredAmount, _ArtifactID);
PROC_AMER_FlexStat_CharacterAddStat(_AffectedChar, _StatType, _Stat, _Negation);



PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedStatusMod_ExtendedStat(_ArtifactID, _StoredSourceType, _TargetStatus, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Amount, _SelfBool)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Amount, _Multiplier, _Toggle)
THEN
PROC_AMER_Artifacts_ToggleEffects_StatusMod_ExtendedStat(_Char, _TargetStatus, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Toggle, _ArtifactID, _SelfBool, _Multiplier);

PROC PROC_AMER_Artifacts_ToggleEffects_StatusMod_ExtendedStat((CHARACTERGUID)_Char, (STRING)_TargetStatus, (STRING)_Stat, (STRING)_Extraprop1, (STRING)_Extraprop2, (STRING)_Extraprop3, (REAL)_Toggle, (STRING)_ArtifactID, (INTEGER)_SelfBool, (REAL)_Multiplier)
THEN
PROC_AMER_StatusMod_Add_ExtendedStat(_Char, _TargetStatus, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Toggle, _ArtifactID, _SelfBool);

//Remove artifact-granted statusmods from affected characters when the artifact is unequipped.
PROC PROC_AMER_Artifacts_ToggleEffects_StatusMod_ExtendedStat((CHARACTERGUID)_Char, (STRING)_TargetStatus, (STRING)_Stat, (STRING)_Extraprop1, (STRING)_Extraprop2, (STRING)_Extraprop3, (REAL)_Toggle, (STRING)_ArtifactID, (INTEGER)_SelfBool, (REAL)_Multiplier)
AND
_Multiplier < 0.0
AND
DB_AMER_StatusMod_ExtendedStat_ActiveMods(_AffectedChar, _Char, _TargetStatus, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _StoredAmount, _ArtifactID)
AND
RealProduct(_StoredAmount, -1.0, _Negation)
THEN
NOT DB_AMER_StatusMod_ExtendedStat_ActiveMods(_AffectedChar, _Char, _TargetStatus, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _StoredAmount, _ArtifactID);
PROC_AMER_ExtendedStat_CharacterAddStat(_AffectedChar, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Negation);



PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedStatusMod_AddStatus(_ArtifactID, _StoredSourceType, _TargetStatus, _AddedStatus, _Duration, _ForceStatus, _SelfBool)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
Integer(_Multiplier, _Toggle)
THEN
PROC_AMER_StatusMod_Add_AddStatus(_Char, _TargetStatus, _AddedStatus, _Duration, _ForceStatus, _SelfBool, _Toggle);



PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedStatusMod_AddHealing(_ArtifactID, (STRING)_StoredSourceType, (STRING)_TargetStatus, (REAL)_HealBase, (STRING)_HealType, (REAL)_HealScaling, (STRING)_StatType, (STRING)_Stat, (INTEGER)_TriageBool, (INTEGER)_SelfBool)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_HealBase, _Multiplier, _HealBaseToggle)
AND
RealProduct(_HealScaling, _Multiplier, _HealScalingToggle)
THEN
PROC_AMER_StatusMod_Add_Healing(_Char, _TargetStatus, _HealBaseToggle, _HealType, _HealScalingToggle, _StatType, _Stat, _TriageBool, _SelfBool);



PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedStatusMod_SpreadingStatus(_ArtifactID, (STRING)_StoredSourceType, (STRING)_TargetStatus, (REAL)_Radius, (INTEGER)_Conditions, (STRING)_SourceFX, (STRING)_TargetFX, (STRING)_BeamFX, (INTEGER)_SelfBool)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Radius, _Multiplier, _Toggle)
THEN
PROC_AMER_StatusMod_Add_Spreading(_Char, _TargetStatus, _Toggle, _Conditions, _SourceFX, _TargetFX, _BeamFX, _SelfBool);

//END_REGION


//REGION ScalingStat effects.

PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedScalingStat_FlexStat((STRING)_ArtifactID, (STRING)_StoredSourceType, (STRING)_ScalarType, (STRING)_Scalar, (STRING)_StatType, (STRING)_Stat, (REAL)_Amount)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Amount, _Multiplier, _Toggle)
THEN
PROC_AMER_ScalingStat_FlexStat_Add(_Char, _ScalarType, _Scalar, _StatType, _Stat, _Toggle);



PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedScalingStat_ExtendedStat(_ArtifactID, _StoredSourceType, _ScalarType, _Scalar, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Amount)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Amount, _Multiplier, _Toggle)
THEN
PROC_AMER_ScalingStat_ExtendedStat_Add(_Char, _ScalarType, _Scalar, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _Toggle);



PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_FlexStat(_ArtifactID, (STRING)_StoredSourceType, (STRING)_ScalarType, (STRING)_Scalar, (STRING)_Status, (STRING)_StatType, (STRING)_Stat, (STRING)_StackID, (INTEGER)_SelfBool, (REAL)_Amount)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Amount, _Multiplier, _Toggle)
THEN
PROC_AMER_ScalingStat_StatusMod_FlexStat_Add(_Char, _ScalarType, _Scalar, _Status, _StatType, _Stat, _StackID, _SelfBool, _Toggle);



PROC PROC_AMER_Artifacts_ToggleEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (STRING)_SourceType, (REAL)_Multiplier)
AND
DB_AMER_Artifacts_EquippedScalingStat_StatusMod_ExtendedStat(_ArtifactID, _StoredSourceType, _ScalarType, _Scalar, _Status, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _StackID, _SelfBool, _Amount)
AND
QRY_AMER_Artifacts_ToggleEffects_VerifySourceType(_StoredSourceType, _SourceType)
AND
RealProduct(_Amount, _Multiplier, _Toggle)
THEN
PROC_AMER_ScalingStat_StatusMod_ExtendedStat_Add(_Char, _ScalarType, _Scalar, _Status, _Stat, _Extraprop1, _Extraprop2, _Extraprop3, _StackID, _SelfBool, _Toggle);

//END_REGION


//_SourceType refers to whether or not the artifact power comes from the Artifact itself,
//or if it is the rune-version of the Artifact. Valid types are "Both", "Base", or "Rune".
//Doing this allows us to define effects that are active only for the base or rune.
QRY QRY_AMER_Artifacts_ToggleEffects_VerifySourceType((STRING)_StoredSourceType, (STRING)_SourceType)
AND
_SourceType == _StoredSourceType
THEN
DB_NOOP(1);

//If either the stored type or passed type is "Both", return true.
QRY QRY_AMER_Artifacts_ToggleEffects_VerifySourceType("Both", (STRING)_SourceType)
THEN
DB_NOOP(1);

QRY QRY_AMER_Artifacts_ToggleEffects_VerifySourceType((STRING)_StoredSourceType, "Both")
THEN
DB_NOOP(1);

//END_REGION


//REGION Artifact un/stacking.
//Not yet officially supported.
//This is as such because we don't currently have any cases where artifact effect
//stacking would be balanced. The architecture is nearly finished, however, in
//case we do include in the future--or you want to allow it.

PROC PROC_AMER_Artifacts_StackEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (INTEGER)_NewCount)
THEN
DB_NOOP(1);

PROC PROC_AMER_Artifacts_RemoveStackedEffects((CHARACTERGUID)_Char, (STRING)_ArtifactID, (INTEGER)_NewCount)
THEN
DB_NOOP(1);

//END_REGION


/*
//REGION Assign Artifact Power deltamods to shields.
//Assign the corresponding Artifact Power deltamod to Artifact shields when 
//they are identified.
//This is necessary because Shields stats cannot successfully take a boost param,
//even if it is added in StatObjectDefinitions.sod.
IF
ItemStatusChange(_Item, "IDENTIFY", _)
AND
GetTemplate(_Item, _Root)
AND
DB_AMER_Artifacts_DeltamodOnIdentify(_ArtifactID, _Root, _Deltamod)
AND
QRY_AMER_GEN_ItemHasDeltaModifier(_Item, _Deltamod)
AND
DB_AMER_GEN_OUTPUT_Integer(0)
THEN
ItemAddDeltaModifier(_Item, _Deltamod);


//Also check to add the deltamod when the artifact is equipped. This is a workaround
//for such items being awarded pre-identified.
PROC PROC_AMER_Artifacts_ArtifactEquipped((CHARACTERGUID)_Char, (ITEMGUID)_Item, (STRING)_ArtifactID, "Base")
AND
DB_AMER_Artifacts_DeltamodOnIdentify(_ArtifactID, _Root, _Deltamod)
AND
QRY_AMER_GEN_ItemHasDeltaModifier(_Item, _Deltamod)
AND
DB_AMER_GEN_OUTPUT_Integer(0)
THEN
ItemAddDeltaModifier(_Item, _Deltamod);

//END_REGION
*/


//REGION Utility.
//A patching utility, use to remove scripted stats from _Char who has this artifact equipped, without the artifact being considered unequipped.

PROC PROC_AMER_Artifacts_UnequipPowers()
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _Count)
THEN
NOT DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _Count);
PROC_AMER_Artifacts_ToggleEffects(_Char, _ArtifactID, "Both", -1.0);

PROC PROC_AMER_Artifacts_UnequipPowers((CHARACTERGUID)_Char)
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _Count)
THEN
NOT DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _Count);
PROC_AMER_Artifacts_ToggleEffects(_Char, _ArtifactID, "Both", -1.0);



PROC PROC_AMER_Artifacts_Patch_Begin((STRING)_ArtifactID)
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _Count)
AND
Real(_Count, _CountReal)
AND
RealProduct(_CountReal, -1.0, _Negation)
THEN
PROC_AMER_Artifacts_ToggleEffects(_Char, _ArtifactID, "Both", _Negation);	//Toggling for "Both" works at the moment because we don't allow multiple copies of the same artifact. This will need to be improved eventually by storing the artifact type in DB_AMER_Artifacts_EquippedEffects(), eventually.

PROC PROC_AMER_Artifacts_Patch_End((STRING)_ArtifactID)
AND
DB_AMER_Artifacts_EquippedEffects(_Char, _ArtifactID, _Count)
AND
Real(_Count, _CountReal)
THEN
PROC_AMER_Artifacts_ToggleEffects(_Char, _ArtifactID, "Both", _CountReal);

//END_REGION











//=============================================//
//              A R T I F A C T S              //
//                                             //
//   Written by Matteo "Ameranth" T. (2018)    //
//=============================================//
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start_AMER"
