
---------------------------------------------
-- Extensions to the table table.
---------------------------------------------

---Sorts a table using the comparison operators on all values.
---@param tbl table Will be mutated.
---@param reverse boolean? Defaults to false.
---@return table Same table as the one passed by parameter (mutates in-place).
function table.simpleSort(tbl, reverse)
    local fun

    if reverse then
        fun = function(a, b) return a > b end
    else
        fun = function(a, b) return a < b end
    end

    table.sort(tbl, fun)

    return tbl
end

---Sorts a an array of tables based on a property. The property must be a key in all tables contained in the array.
---@param tbl table
---@param prop string Property name.
---@param reverse boolean? Defaults to false.
---@return table Same table as the one passed by parameter (mutates in-place).
function table.sortByProperty(tbl, prop, reverse)
    local fun

    if reverse then
        fun = function(a, b) return a[prop] > b[prop] end
    else
        fun = function(a, b) return a[prop] < b[prop] end
    end

    table.sort(tbl, fun)

    return tbl
end

---Copies a table's values recursively, including metatables.
---From http://lua-users.org/wiki/CopyTable
---@param orig table
---@return table
function table.deepCopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[table.deepCopy(orig_key)] = table.deepCopy(orig_value)
        end
        setmetatable(copy, table.deepCopy(getmetatable(orig)))
    else -- primitives
        copy = orig
    end
    return copy
end

---Similar to unpack, but respects "holes" in the array generated by select()
---@param p table
---@param l integer? Max length.
---@param i integer? Starting index. Defaults to 1.
---@return ... any
function table.unpackSelect(p, l, i)
    i = i or 1
    l = l or p.n -- Tables created by select() have this key as "length".

    if i == l then
        return p[i]
    else
        return p[i], table.unpackSelect(p, l, i + 1)
    end
end

---Returns the first index that maps to the passed value.
---@param table1 table
---@param value any
---@return any
function table.reverseLookup(table1, value)
    for i,v in pairs(table1) do
        if v == value then
            return i
        end
    end
    return nil
end

---Returns whether the table contains the passed value. Does **not** search recursively.
---@param tbl table
---@param value any
---@return boolean
function table.contains(tbl, value)
    for _,val in pairs(tbl) do
        if val == value then
            return true
        end
    end

    return false
end

---Count the amount of keys in a table.
---@param t table
---@return integer Key count.
function table.getKeyCount(t)
    local count = 0

    for _,_ in pairs(t) do
        count = count + 1
    end

    return count
end